import { APP_INITIALIZER, ApplicationRef, ChangeDetectionStrategy, ChangeDetectorRef, Component, ComponentFactory, ComponentFactoryResolver, ContentChild, ContentChildren, Directive, ElementRef, EventEmitter, Host, HostBinding, HostListener, Inject, Injectable, InjectionToken, Injector, Input, NgModule, NgZone, Optional, Output, Pipe, Renderer, Renderer2, SkipSelf, TemplateRef, Type, ViewChild, ViewContainerRef, ViewEncapsulation, forwardRef } from '@angular/core';
import { CommonModule } from '@angular/common';
import { animate, state, style, transition, trigger } from '@angular/animations';
import moment from 'moment';
import 'moment/locale/zh-cn';
import { FormsModule, NG_VALUE_ACCESSOR } from '@angular/forms';
import { BACKSPACE, ComponentPortal, DOWN_ARROW, Directionality, DomPortalHost, ENTER, ESCAPE, LEFT_ARROW, ObserveContentModule, Platform, PlatformModule, PortalModule, RIGHT_ARROW, RxChain, TemplatePortal, UP_ARROW } from '@angular/cdk';
import { Subject as Subject$1 } from 'rxjs/Subject';
import { Subscription as Subscription$1 } from 'rxjs/Subscription';
import { fromEvent as fromEvent$1 } from 'rxjs/observable/fromEvent';
import { merge as merge$1 } from 'rxjs/observable/merge';
import { auditTime as auditTime$1 } from 'rxjs/operator/auditTime';
import { DOCUMENT } from '@angular/platform-browser';
import { BehaviorSubject as BehaviorSubject$1 } from 'rxjs/BehaviorSubject';
import { distinctUntilChanged as distinctUntilChanged$1 } from 'rxjs/operator/distinctUntilChanged';
import { _do as _do$1 } from 'rxjs/operator/do';
import { filter as filter$1 } from 'rxjs/operator/filter';
import { map as map$1 } from 'rxjs/operator/map';
import { pluck as pluck$1 } from 'rxjs/operator/pluck';
import { takeUntil as takeUntil$1 } from 'rxjs/operator/takeUntil';
import { debounceTime as debounceTime$1 } from 'rxjs/operator/debounceTime';
import { Observable as Observable$1 } from 'rxjs/Observable';
import { of as of$1 } from 'rxjs/observable/of';
import { startWith as startWith$1 } from 'rxjs/operator/startWith';
import { throttleTime as throttleTime$1 } from 'rxjs/operator/throttleTime';

class NzRowComponent {
    /**
     * @param {?} _elementRef
     * @param {?} _renderer
     */
    constructor(_elementRef, _renderer) {
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this._classList = [];
        this._prefixCls = 'ant-row';
        this._align = 'top';
        this._justify = 'start';
        this._el = this._elementRef.nativeElement;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzType(value) {
        this._type = value;
        this.setClassMap();
    }
    /**
     * @return {?}
     */
    get nzType() {
        return this._type;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzAlign(value) {
        this._align = value;
        this.setClassMap();
    }
    /**
     * @return {?}
     */
    get nzAlign() {
        return this._align;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzJustify(value) {
        this._justify = value;
        this.setClassMap();
    }
    /**
     * @return {?}
     */
    get nzJustify() {
        return this._justify;
    }
    /**
     * @return {?}
     */
    get nzGutter() {
        return this._gutter;
    }
    ;
    /**
     * @param {?} value
     * @return {?}
     */
    set nzGutter(value) {
        this._gutter = value;
        this.setStyle();
    }
    /**
     * @return {?}
     */
    setStyle() {
        this._renderer.setStyle(this._el, 'margin-left', `-${this._gutter / 2}px`);
        this._renderer.setStyle(this._el, 'margin-right', `-${this._gutter / 2}px`);
    }
    /**
     * temp solution since no method add classMap to host https://github.com/angular/angular/issues/7289
     * @return {?}
     */
    setClassMap() {
        this._classList.forEach(_className => {
            this._renderer.removeClass(this._el, _className);
        });
        this._classList = [
            (!this.nzType) && this._prefixCls,
            this.nzType && `${this._prefixCls}-${this.nzType}`,
            this.nzType && this.nzAlign && `${this._prefixCls}-${this.nzType}-${this.nzAlign}`,
            this.nzType && this.nzJustify && `${this._prefixCls}-${this.nzType}-${this.nzJustify}`
        ].filter((item) => {
            return !!item;
        });
        this._classList.forEach(_className => {
            this._renderer.addClass(this._el, _className);
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.setClassMap();
    }
}
NzRowComponent.decorators = [
    { type: Component, args: [{
                selector: '[nz-row],nz-row',
                encapsulation: ViewEncapsulation.None,
                template: `
    <ng-content></ng-content>
  `,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-row {
  position: relative;
  margin-left: 0;
  margin-right: 0;
  height: auto;
  zoom: 1;
  display: block;
}
.ant-row:before,
.ant-row:after {
  content: " ";
  display: table;
}
.ant-row:after {
  clear: both;
  visibility: hidden;
  font-size: 0;
  height: 0;
}
.ant-row-flex {
  display: flex;
  flex-flow: row wrap;
}
.ant-row-flex:before,
.ant-row-flex:after {
  display: flex;
}
.ant-row-flex-start {
  justify-content: flex-start;
}
.ant-row-flex-center {
  justify-content: center;
}
.ant-row-flex-end {
  justify-content: flex-end;
}
.ant-row-flex-space-between {
  justify-content: space-between;
}
.ant-row-flex-space-around {
  justify-content: space-around;
}
.ant-row-flex-top {
  align-items: flex-start;
}
.ant-row-flex-middle {
  align-items: center;
}
.ant-row-flex-bottom {
  align-items: flex-end;
}
.ant-col {
  position: relative;
  display: block;
}
.ant-col-1, .ant-col-xs-1, .ant-col-sm-1, .ant-col-md-1, .ant-col-lg-1, .ant-col-2, .ant-col-xs-2, .ant-col-sm-2, .ant-col-md-2, .ant-col-lg-2, .ant-col-3, .ant-col-xs-3, .ant-col-sm-3, .ant-col-md-3, .ant-col-lg-3, .ant-col-4, .ant-col-xs-4, .ant-col-sm-4, .ant-col-md-4, .ant-col-lg-4, .ant-col-5, .ant-col-xs-5, .ant-col-sm-5, .ant-col-md-5, .ant-col-lg-5, .ant-col-6, .ant-col-xs-6, .ant-col-sm-6, .ant-col-md-6, .ant-col-lg-6, .ant-col-7, .ant-col-xs-7, .ant-col-sm-7, .ant-col-md-7, .ant-col-lg-7, .ant-col-8, .ant-col-xs-8, .ant-col-sm-8, .ant-col-md-8, .ant-col-lg-8, .ant-col-9, .ant-col-xs-9, .ant-col-sm-9, .ant-col-md-9, .ant-col-lg-9, .ant-col-10, .ant-col-xs-10, .ant-col-sm-10, .ant-col-md-10, .ant-col-lg-10, .ant-col-11, .ant-col-xs-11, .ant-col-sm-11, .ant-col-md-11, .ant-col-lg-11, .ant-col-12, .ant-col-xs-12, .ant-col-sm-12, .ant-col-md-12, .ant-col-lg-12, .ant-col-13, .ant-col-xs-13, .ant-col-sm-13, .ant-col-md-13, .ant-col-lg-13, .ant-col-14, .ant-col-xs-14, .ant-col-sm-14, .ant-col-md-14, .ant-col-lg-14, .ant-col-15, .ant-col-xs-15, .ant-col-sm-15, .ant-col-md-15, .ant-col-lg-15, .ant-col-16, .ant-col-xs-16, .ant-col-sm-16, .ant-col-md-16, .ant-col-lg-16, .ant-col-17, .ant-col-xs-17, .ant-col-sm-17, .ant-col-md-17, .ant-col-lg-17, .ant-col-18, .ant-col-xs-18, .ant-col-sm-18, .ant-col-md-18, .ant-col-lg-18, .ant-col-19, .ant-col-xs-19, .ant-col-sm-19, .ant-col-md-19, .ant-col-lg-19, .ant-col-20, .ant-col-xs-20, .ant-col-sm-20, .ant-col-md-20, .ant-col-lg-20, .ant-col-21, .ant-col-xs-21, .ant-col-sm-21, .ant-col-md-21, .ant-col-lg-21, .ant-col-22, .ant-col-xs-22, .ant-col-sm-22, .ant-col-md-22, .ant-col-lg-22, .ant-col-23, .ant-col-xs-23, .ant-col-sm-23, .ant-col-md-23, .ant-col-lg-23, .ant-col-24, .ant-col-xs-24, .ant-col-sm-24, .ant-col-md-24, .ant-col-lg-24 {
  position: relative;
  min-height: 1px;
  padding-left: 0;
  padding-right: 0;
}
.ant-col-1, .ant-col-2, .ant-col-3, .ant-col-4, .ant-col-5, .ant-col-6, .ant-col-7, .ant-col-8, .ant-col-9, .ant-col-10, .ant-col-11, .ant-col-12, .ant-col-13, .ant-col-14, .ant-col-15, .ant-col-16, .ant-col-17, .ant-col-18, .ant-col-19, .ant-col-20, .ant-col-21, .ant-col-22, .ant-col-23, .ant-col-24 {
  float: left;
  flex: 0 0 auto;
}
.ant-col-24 {
  display: block;
  width: 100%;
}
.ant-col-push-24 {
  left: 100%;
}
.ant-col-pull-24 {
  right: 100%;
}
.ant-col-offset-24 {
  margin-left: 100%;
}
.ant-col-order-24 {
  order: 24;
}
.ant-col-23 {
  display: block;
  width: 95.83333333%;
}
.ant-col-push-23 {
  left: 95.83333333%;
}
.ant-col-pull-23 {
  right: 95.83333333%;
}
.ant-col-offset-23 {
  margin-left: 95.83333333%;
}
.ant-col-order-23 {
  order: 23;
}
.ant-col-22 {
  display: block;
  width: 91.66666667%;
}
.ant-col-push-22 {
  left: 91.66666667%;
}
.ant-col-pull-22 {
  right: 91.66666667%;
}
.ant-col-offset-22 {
  margin-left: 91.66666667%;
}
.ant-col-order-22 {
  order: 22;
}
.ant-col-21 {
  display: block;
  width: 87.5%;
}
.ant-col-push-21 {
  left: 87.5%;
}
.ant-col-pull-21 {
  right: 87.5%;
}
.ant-col-offset-21 {
  margin-left: 87.5%;
}
.ant-col-order-21 {
  order: 21;
}
.ant-col-20 {
  display: block;
  width: 83.33333333%;
}
.ant-col-push-20 {
  left: 83.33333333%;
}
.ant-col-pull-20 {
  right: 83.33333333%;
}
.ant-col-offset-20 {
  margin-left: 83.33333333%;
}
.ant-col-order-20 {
  order: 20;
}
.ant-col-19 {
  display: block;
  width: 79.16666667%;
}
.ant-col-push-19 {
  left: 79.16666667%;
}
.ant-col-pull-19 {
  right: 79.16666667%;
}
.ant-col-offset-19 {
  margin-left: 79.16666667%;
}
.ant-col-order-19 {
  order: 19;
}
.ant-col-18 {
  display: block;
  width: 75%;
}
.ant-col-push-18 {
  left: 75%;
}
.ant-col-pull-18 {
  right: 75%;
}
.ant-col-offset-18 {
  margin-left: 75%;
}
.ant-col-order-18 {
  order: 18;
}
.ant-col-17 {
  display: block;
  width: 70.83333333%;
}
.ant-col-push-17 {
  left: 70.83333333%;
}
.ant-col-pull-17 {
  right: 70.83333333%;
}
.ant-col-offset-17 {
  margin-left: 70.83333333%;
}
.ant-col-order-17 {
  order: 17;
}
.ant-col-16 {
  display: block;
  width: 66.66666667%;
}
.ant-col-push-16 {
  left: 66.66666667%;
}
.ant-col-pull-16 {
  right: 66.66666667%;
}
.ant-col-offset-16 {
  margin-left: 66.66666667%;
}
.ant-col-order-16 {
  order: 16;
}
.ant-col-15 {
  display: block;
  width: 62.5%;
}
.ant-col-push-15 {
  left: 62.5%;
}
.ant-col-pull-15 {
  right: 62.5%;
}
.ant-col-offset-15 {
  margin-left: 62.5%;
}
.ant-col-order-15 {
  order: 15;
}
.ant-col-14 {
  display: block;
  width: 58.33333333%;
}
.ant-col-push-14 {
  left: 58.33333333%;
}
.ant-col-pull-14 {
  right: 58.33333333%;
}
.ant-col-offset-14 {
  margin-left: 58.33333333%;
}
.ant-col-order-14 {
  order: 14;
}
.ant-col-13 {
  display: block;
  width: 54.16666667%;
}
.ant-col-push-13 {
  left: 54.16666667%;
}
.ant-col-pull-13 {
  right: 54.16666667%;
}
.ant-col-offset-13 {
  margin-left: 54.16666667%;
}
.ant-col-order-13 {
  order: 13;
}
.ant-col-12 {
  display: block;
  width: 50%;
}
.ant-col-push-12 {
  left: 50%;
}
.ant-col-pull-12 {
  right: 50%;
}
.ant-col-offset-12 {
  margin-left: 50%;
}
.ant-col-order-12 {
  order: 12;
}
.ant-col-11 {
  display: block;
  width: 45.83333333%;
}
.ant-col-push-11 {
  left: 45.83333333%;
}
.ant-col-pull-11 {
  right: 45.83333333%;
}
.ant-col-offset-11 {
  margin-left: 45.83333333%;
}
.ant-col-order-11 {
  order: 11;
}
.ant-col-10 {
  display: block;
  width: 41.66666667%;
}
.ant-col-push-10 {
  left: 41.66666667%;
}
.ant-col-pull-10 {
  right: 41.66666667%;
}
.ant-col-offset-10 {
  margin-left: 41.66666667%;
}
.ant-col-order-10 {
  order: 10;
}
.ant-col-9 {
  display: block;
  width: 37.5%;
}
.ant-col-push-9 {
  left: 37.5%;
}
.ant-col-pull-9 {
  right: 37.5%;
}
.ant-col-offset-9 {
  margin-left: 37.5%;
}
.ant-col-order-9 {
  order: 9;
}
.ant-col-8 {
  display: block;
  width: 33.33333333%;
}
.ant-col-push-8 {
  left: 33.33333333%;
}
.ant-col-pull-8 {
  right: 33.33333333%;
}
.ant-col-offset-8 {
  margin-left: 33.33333333%;
}
.ant-col-order-8 {
  order: 8;
}
.ant-col-7 {
  display: block;
  width: 29.16666667%;
}
.ant-col-push-7 {
  left: 29.16666667%;
}
.ant-col-pull-7 {
  right: 29.16666667%;
}
.ant-col-offset-7 {
  margin-left: 29.16666667%;
}
.ant-col-order-7 {
  order: 7;
}
.ant-col-6 {
  display: block;
  width: 25%;
}
.ant-col-push-6 {
  left: 25%;
}
.ant-col-pull-6 {
  right: 25%;
}
.ant-col-offset-6 {
  margin-left: 25%;
}
.ant-col-order-6 {
  order: 6;
}
.ant-col-5 {
  display: block;
  width: 20.83333333%;
}
.ant-col-push-5 {
  left: 20.83333333%;
}
.ant-col-pull-5 {
  right: 20.83333333%;
}
.ant-col-offset-5 {
  margin-left: 20.83333333%;
}
.ant-col-order-5 {
  order: 5;
}
.ant-col-4 {
  display: block;
  width: 16.66666667%;
}
.ant-col-push-4 {
  left: 16.66666667%;
}
.ant-col-pull-4 {
  right: 16.66666667%;
}
.ant-col-offset-4 {
  margin-left: 16.66666667%;
}
.ant-col-order-4 {
  order: 4;
}
.ant-col-3 {
  display: block;
  width: 12.5%;
}
.ant-col-push-3 {
  left: 12.5%;
}
.ant-col-pull-3 {
  right: 12.5%;
}
.ant-col-offset-3 {
  margin-left: 12.5%;
}
.ant-col-order-3 {
  order: 3;
}
.ant-col-2 {
  display: block;
  width: 8.33333333%;
}
.ant-col-push-2 {
  left: 8.33333333%;
}
.ant-col-pull-2 {
  right: 8.33333333%;
}
.ant-col-offset-2 {
  margin-left: 8.33333333%;
}
.ant-col-order-2 {
  order: 2;
}
.ant-col-1 {
  display: block;
  width: 4.16666667%;
}
.ant-col-push-1 {
  left: 4.16666667%;
}
.ant-col-pull-1 {
  right: 4.16666667%;
}
.ant-col-offset-1 {
  margin-left: 4.16666667%;
}
.ant-col-order-1 {
  order: 1;
}
.ant-col-0 {
  display: none;
}
.ant-col-push-0 {
  left: auto;
}
.ant-col-pull-0 {
  right: auto;
}
.ant-col-push-0 {
  left: auto;
}
.ant-col-pull-0 {
  right: auto;
}
.ant-col-offset-0 {
  margin-left: 0;
}
.ant-col-order-0 {
  order: 0;
}
.ant-col-xs-1, .ant-col-xs-2, .ant-col-xs-3, .ant-col-xs-4, .ant-col-xs-5, .ant-col-xs-6, .ant-col-xs-7, .ant-col-xs-8, .ant-col-xs-9, .ant-col-xs-10, .ant-col-xs-11, .ant-col-xs-12, .ant-col-xs-13, .ant-col-xs-14, .ant-col-xs-15, .ant-col-xs-16, .ant-col-xs-17, .ant-col-xs-18, .ant-col-xs-19, .ant-col-xs-20, .ant-col-xs-21, .ant-col-xs-22, .ant-col-xs-23, .ant-col-xs-24 {
  float: left;
  flex: 0 0 auto;
}
.ant-col-xs-24 {
  display: block;
  width: 100%;
}
.ant-col-xs-push-24 {
  left: 100%;
}
.ant-col-xs-pull-24 {
  right: 100%;
}
.ant-col-xs-offset-24 {
  margin-left: 100%;
}
.ant-col-xs-order-24 {
  order: 24;
}
.ant-col-xs-23 {
  display: block;
  width: 95.83333333%;
}
.ant-col-xs-push-23 {
  left: 95.83333333%;
}
.ant-col-xs-pull-23 {
  right: 95.83333333%;
}
.ant-col-xs-offset-23 {
  margin-left: 95.83333333%;
}
.ant-col-xs-order-23 {
  order: 23;
}
.ant-col-xs-22 {
  display: block;
  width: 91.66666667%;
}
.ant-col-xs-push-22 {
  left: 91.66666667%;
}
.ant-col-xs-pull-22 {
  right: 91.66666667%;
}
.ant-col-xs-offset-22 {
  margin-left: 91.66666667%;
}
.ant-col-xs-order-22 {
  order: 22;
}
.ant-col-xs-21 {
  display: block;
  width: 87.5%;
}
.ant-col-xs-push-21 {
  left: 87.5%;
}
.ant-col-xs-pull-21 {
  right: 87.5%;
}
.ant-col-xs-offset-21 {
  margin-left: 87.5%;
}
.ant-col-xs-order-21 {
  order: 21;
}
.ant-col-xs-20 {
  display: block;
  width: 83.33333333%;
}
.ant-col-xs-push-20 {
  left: 83.33333333%;
}
.ant-col-xs-pull-20 {
  right: 83.33333333%;
}
.ant-col-xs-offset-20 {
  margin-left: 83.33333333%;
}
.ant-col-xs-order-20 {
  order: 20;
}
.ant-col-xs-19 {
  display: block;
  width: 79.16666667%;
}
.ant-col-xs-push-19 {
  left: 79.16666667%;
}
.ant-col-xs-pull-19 {
  right: 79.16666667%;
}
.ant-col-xs-offset-19 {
  margin-left: 79.16666667%;
}
.ant-col-xs-order-19 {
  order: 19;
}
.ant-col-xs-18 {
  display: block;
  width: 75%;
}
.ant-col-xs-push-18 {
  left: 75%;
}
.ant-col-xs-pull-18 {
  right: 75%;
}
.ant-col-xs-offset-18 {
  margin-left: 75%;
}
.ant-col-xs-order-18 {
  order: 18;
}
.ant-col-xs-17 {
  display: block;
  width: 70.83333333%;
}
.ant-col-xs-push-17 {
  left: 70.83333333%;
}
.ant-col-xs-pull-17 {
  right: 70.83333333%;
}
.ant-col-xs-offset-17 {
  margin-left: 70.83333333%;
}
.ant-col-xs-order-17 {
  order: 17;
}
.ant-col-xs-16 {
  display: block;
  width: 66.66666667%;
}
.ant-col-xs-push-16 {
  left: 66.66666667%;
}
.ant-col-xs-pull-16 {
  right: 66.66666667%;
}
.ant-col-xs-offset-16 {
  margin-left: 66.66666667%;
}
.ant-col-xs-order-16 {
  order: 16;
}
.ant-col-xs-15 {
  display: block;
  width: 62.5%;
}
.ant-col-xs-push-15 {
  left: 62.5%;
}
.ant-col-xs-pull-15 {
  right: 62.5%;
}
.ant-col-xs-offset-15 {
  margin-left: 62.5%;
}
.ant-col-xs-order-15 {
  order: 15;
}
.ant-col-xs-14 {
  display: block;
  width: 58.33333333%;
}
.ant-col-xs-push-14 {
  left: 58.33333333%;
}
.ant-col-xs-pull-14 {
  right: 58.33333333%;
}
.ant-col-xs-offset-14 {
  margin-left: 58.33333333%;
}
.ant-col-xs-order-14 {
  order: 14;
}
.ant-col-xs-13 {
  display: block;
  width: 54.16666667%;
}
.ant-col-xs-push-13 {
  left: 54.16666667%;
}
.ant-col-xs-pull-13 {
  right: 54.16666667%;
}
.ant-col-xs-offset-13 {
  margin-left: 54.16666667%;
}
.ant-col-xs-order-13 {
  order: 13;
}
.ant-col-xs-12 {
  display: block;
  width: 50%;
}
.ant-col-xs-push-12 {
  left: 50%;
}
.ant-col-xs-pull-12 {
  right: 50%;
}
.ant-col-xs-offset-12 {
  margin-left: 50%;
}
.ant-col-xs-order-12 {
  order: 12;
}
.ant-col-xs-11 {
  display: block;
  width: 45.83333333%;
}
.ant-col-xs-push-11 {
  left: 45.83333333%;
}
.ant-col-xs-pull-11 {
  right: 45.83333333%;
}
.ant-col-xs-offset-11 {
  margin-left: 45.83333333%;
}
.ant-col-xs-order-11 {
  order: 11;
}
.ant-col-xs-10 {
  display: block;
  width: 41.66666667%;
}
.ant-col-xs-push-10 {
  left: 41.66666667%;
}
.ant-col-xs-pull-10 {
  right: 41.66666667%;
}
.ant-col-xs-offset-10 {
  margin-left: 41.66666667%;
}
.ant-col-xs-order-10 {
  order: 10;
}
.ant-col-xs-9 {
  display: block;
  width: 37.5%;
}
.ant-col-xs-push-9 {
  left: 37.5%;
}
.ant-col-xs-pull-9 {
  right: 37.5%;
}
.ant-col-xs-offset-9 {
  margin-left: 37.5%;
}
.ant-col-xs-order-9 {
  order: 9;
}
.ant-col-xs-8 {
  display: block;
  width: 33.33333333%;
}
.ant-col-xs-push-8 {
  left: 33.33333333%;
}
.ant-col-xs-pull-8 {
  right: 33.33333333%;
}
.ant-col-xs-offset-8 {
  margin-left: 33.33333333%;
}
.ant-col-xs-order-8 {
  order: 8;
}
.ant-col-xs-7 {
  display: block;
  width: 29.16666667%;
}
.ant-col-xs-push-7 {
  left: 29.16666667%;
}
.ant-col-xs-pull-7 {
  right: 29.16666667%;
}
.ant-col-xs-offset-7 {
  margin-left: 29.16666667%;
}
.ant-col-xs-order-7 {
  order: 7;
}
.ant-col-xs-6 {
  display: block;
  width: 25%;
}
.ant-col-xs-push-6 {
  left: 25%;
}
.ant-col-xs-pull-6 {
  right: 25%;
}
.ant-col-xs-offset-6 {
  margin-left: 25%;
}
.ant-col-xs-order-6 {
  order: 6;
}
.ant-col-xs-5 {
  display: block;
  width: 20.83333333%;
}
.ant-col-xs-push-5 {
  left: 20.83333333%;
}
.ant-col-xs-pull-5 {
  right: 20.83333333%;
}
.ant-col-xs-offset-5 {
  margin-left: 20.83333333%;
}
.ant-col-xs-order-5 {
  order: 5;
}
.ant-col-xs-4 {
  display: block;
  width: 16.66666667%;
}
.ant-col-xs-push-4 {
  left: 16.66666667%;
}
.ant-col-xs-pull-4 {
  right: 16.66666667%;
}
.ant-col-xs-offset-4 {
  margin-left: 16.66666667%;
}
.ant-col-xs-order-4 {
  order: 4;
}
.ant-col-xs-3 {
  display: block;
  width: 12.5%;
}
.ant-col-xs-push-3 {
  left: 12.5%;
}
.ant-col-xs-pull-3 {
  right: 12.5%;
}
.ant-col-xs-offset-3 {
  margin-left: 12.5%;
}
.ant-col-xs-order-3 {
  order: 3;
}
.ant-col-xs-2 {
  display: block;
  width: 8.33333333%;
}
.ant-col-xs-push-2 {
  left: 8.33333333%;
}
.ant-col-xs-pull-2 {
  right: 8.33333333%;
}
.ant-col-xs-offset-2 {
  margin-left: 8.33333333%;
}
.ant-col-xs-order-2 {
  order: 2;
}
.ant-col-xs-1 {
  display: block;
  width: 4.16666667%;
}
.ant-col-xs-push-1 {
  left: 4.16666667%;
}
.ant-col-xs-pull-1 {
  right: 4.16666667%;
}
.ant-col-xs-offset-1 {
  margin-left: 4.16666667%;
}
.ant-col-xs-order-1 {
  order: 1;
}
.ant-col-xs-0 {
  display: none;
}
.ant-col-push-0 {
  left: auto;
}
.ant-col-pull-0 {
  right: auto;
}
.ant-col-xs-push-0 {
  left: auto;
}
.ant-col-xs-pull-0 {
  right: auto;
}
.ant-col-xs-offset-0 {
  margin-left: 0;
}
.ant-col-xs-order-0 {
  order: 0;
}
@media (min-width: 768px) {
  .ant-col-sm-1, .ant-col-sm-2, .ant-col-sm-3, .ant-col-sm-4, .ant-col-sm-5, .ant-col-sm-6, .ant-col-sm-7, .ant-col-sm-8, .ant-col-sm-9, .ant-col-sm-10, .ant-col-sm-11, .ant-col-sm-12, .ant-col-sm-13, .ant-col-sm-14, .ant-col-sm-15, .ant-col-sm-16, .ant-col-sm-17, .ant-col-sm-18, .ant-col-sm-19, .ant-col-sm-20, .ant-col-sm-21, .ant-col-sm-22, .ant-col-sm-23, .ant-col-sm-24 {
    float: left;
    flex: 0 0 auto;
  }
  .ant-col-sm-24 {
    display: block;
    width: 100%;
  }
  .ant-col-sm-push-24 {
    left: 100%;
  }
  .ant-col-sm-pull-24 {
    right: 100%;
  }
  .ant-col-sm-offset-24 {
    margin-left: 100%;
  }
  .ant-col-sm-order-24 {
    order: 24;
  }
  .ant-col-sm-23 {
    display: block;
    width: 95.83333333%;
  }
  .ant-col-sm-push-23 {
    left: 95.83333333%;
  }
  .ant-col-sm-pull-23 {
    right: 95.83333333%;
  }
  .ant-col-sm-offset-23 {
    margin-left: 95.83333333%;
  }
  .ant-col-sm-order-23 {
    order: 23;
  }
  .ant-col-sm-22 {
    display: block;
    width: 91.66666667%;
  }
  .ant-col-sm-push-22 {
    left: 91.66666667%;
  }
  .ant-col-sm-pull-22 {
    right: 91.66666667%;
  }
  .ant-col-sm-offset-22 {
    margin-left: 91.66666667%;
  }
  .ant-col-sm-order-22 {
    order: 22;
  }
  .ant-col-sm-21 {
    display: block;
    width: 87.5%;
  }
  .ant-col-sm-push-21 {
    left: 87.5%;
  }
  .ant-col-sm-pull-21 {
    right: 87.5%;
  }
  .ant-col-sm-offset-21 {
    margin-left: 87.5%;
  }
  .ant-col-sm-order-21 {
    order: 21;
  }
  .ant-col-sm-20 {
    display: block;
    width: 83.33333333%;
  }
  .ant-col-sm-push-20 {
    left: 83.33333333%;
  }
  .ant-col-sm-pull-20 {
    right: 83.33333333%;
  }
  .ant-col-sm-offset-20 {
    margin-left: 83.33333333%;
  }
  .ant-col-sm-order-20 {
    order: 20;
  }
  .ant-col-sm-19 {
    display: block;
    width: 79.16666667%;
  }
  .ant-col-sm-push-19 {
    left: 79.16666667%;
  }
  .ant-col-sm-pull-19 {
    right: 79.16666667%;
  }
  .ant-col-sm-offset-19 {
    margin-left: 79.16666667%;
  }
  .ant-col-sm-order-19 {
    order: 19;
  }
  .ant-col-sm-18 {
    display: block;
    width: 75%;
  }
  .ant-col-sm-push-18 {
    left: 75%;
  }
  .ant-col-sm-pull-18 {
    right: 75%;
  }
  .ant-col-sm-offset-18 {
    margin-left: 75%;
  }
  .ant-col-sm-order-18 {
    order: 18;
  }
  .ant-col-sm-17 {
    display: block;
    width: 70.83333333%;
  }
  .ant-col-sm-push-17 {
    left: 70.83333333%;
  }
  .ant-col-sm-pull-17 {
    right: 70.83333333%;
  }
  .ant-col-sm-offset-17 {
    margin-left: 70.83333333%;
  }
  .ant-col-sm-order-17 {
    order: 17;
  }
  .ant-col-sm-16 {
    display: block;
    width: 66.66666667%;
  }
  .ant-col-sm-push-16 {
    left: 66.66666667%;
  }
  .ant-col-sm-pull-16 {
    right: 66.66666667%;
  }
  .ant-col-sm-offset-16 {
    margin-left: 66.66666667%;
  }
  .ant-col-sm-order-16 {
    order: 16;
  }
  .ant-col-sm-15 {
    display: block;
    width: 62.5%;
  }
  .ant-col-sm-push-15 {
    left: 62.5%;
  }
  .ant-col-sm-pull-15 {
    right: 62.5%;
  }
  .ant-col-sm-offset-15 {
    margin-left: 62.5%;
  }
  .ant-col-sm-order-15 {
    order: 15;
  }
  .ant-col-sm-14 {
    display: block;
    width: 58.33333333%;
  }
  .ant-col-sm-push-14 {
    left: 58.33333333%;
  }
  .ant-col-sm-pull-14 {
    right: 58.33333333%;
  }
  .ant-col-sm-offset-14 {
    margin-left: 58.33333333%;
  }
  .ant-col-sm-order-14 {
    order: 14;
  }
  .ant-col-sm-13 {
    display: block;
    width: 54.16666667%;
  }
  .ant-col-sm-push-13 {
    left: 54.16666667%;
  }
  .ant-col-sm-pull-13 {
    right: 54.16666667%;
  }
  .ant-col-sm-offset-13 {
    margin-left: 54.16666667%;
  }
  .ant-col-sm-order-13 {
    order: 13;
  }
  .ant-col-sm-12 {
    display: block;
    width: 50%;
  }
  .ant-col-sm-push-12 {
    left: 50%;
  }
  .ant-col-sm-pull-12 {
    right: 50%;
  }
  .ant-col-sm-offset-12 {
    margin-left: 50%;
  }
  .ant-col-sm-order-12 {
    order: 12;
  }
  .ant-col-sm-11 {
    display: block;
    width: 45.83333333%;
  }
  .ant-col-sm-push-11 {
    left: 45.83333333%;
  }
  .ant-col-sm-pull-11 {
    right: 45.83333333%;
  }
  .ant-col-sm-offset-11 {
    margin-left: 45.83333333%;
  }
  .ant-col-sm-order-11 {
    order: 11;
  }
  .ant-col-sm-10 {
    display: block;
    width: 41.66666667%;
  }
  .ant-col-sm-push-10 {
    left: 41.66666667%;
  }
  .ant-col-sm-pull-10 {
    right: 41.66666667%;
  }
  .ant-col-sm-offset-10 {
    margin-left: 41.66666667%;
  }
  .ant-col-sm-order-10 {
    order: 10;
  }
  .ant-col-sm-9 {
    display: block;
    width: 37.5%;
  }
  .ant-col-sm-push-9 {
    left: 37.5%;
  }
  .ant-col-sm-pull-9 {
    right: 37.5%;
  }
  .ant-col-sm-offset-9 {
    margin-left: 37.5%;
  }
  .ant-col-sm-order-9 {
    order: 9;
  }
  .ant-col-sm-8 {
    display: block;
    width: 33.33333333%;
  }
  .ant-col-sm-push-8 {
    left: 33.33333333%;
  }
  .ant-col-sm-pull-8 {
    right: 33.33333333%;
  }
  .ant-col-sm-offset-8 {
    margin-left: 33.33333333%;
  }
  .ant-col-sm-order-8 {
    order: 8;
  }
  .ant-col-sm-7 {
    display: block;
    width: 29.16666667%;
  }
  .ant-col-sm-push-7 {
    left: 29.16666667%;
  }
  .ant-col-sm-pull-7 {
    right: 29.16666667%;
  }
  .ant-col-sm-offset-7 {
    margin-left: 29.16666667%;
  }
  .ant-col-sm-order-7 {
    order: 7;
  }
  .ant-col-sm-6 {
    display: block;
    width: 25%;
  }
  .ant-col-sm-push-6 {
    left: 25%;
  }
  .ant-col-sm-pull-6 {
    right: 25%;
  }
  .ant-col-sm-offset-6 {
    margin-left: 25%;
  }
  .ant-col-sm-order-6 {
    order: 6;
  }
  .ant-col-sm-5 {
    display: block;
    width: 20.83333333%;
  }
  .ant-col-sm-push-5 {
    left: 20.83333333%;
  }
  .ant-col-sm-pull-5 {
    right: 20.83333333%;
  }
  .ant-col-sm-offset-5 {
    margin-left: 20.83333333%;
  }
  .ant-col-sm-order-5 {
    order: 5;
  }
  .ant-col-sm-4 {
    display: block;
    width: 16.66666667%;
  }
  .ant-col-sm-push-4 {
    left: 16.66666667%;
  }
  .ant-col-sm-pull-4 {
    right: 16.66666667%;
  }
  .ant-col-sm-offset-4 {
    margin-left: 16.66666667%;
  }
  .ant-col-sm-order-4 {
    order: 4;
  }
  .ant-col-sm-3 {
    display: block;
    width: 12.5%;
  }
  .ant-col-sm-push-3 {
    left: 12.5%;
  }
  .ant-col-sm-pull-3 {
    right: 12.5%;
  }
  .ant-col-sm-offset-3 {
    margin-left: 12.5%;
  }
  .ant-col-sm-order-3 {
    order: 3;
  }
  .ant-col-sm-2 {
    display: block;
    width: 8.33333333%;
  }
  .ant-col-sm-push-2 {
    left: 8.33333333%;
  }
  .ant-col-sm-pull-2 {
    right: 8.33333333%;
  }
  .ant-col-sm-offset-2 {
    margin-left: 8.33333333%;
  }
  .ant-col-sm-order-2 {
    order: 2;
  }
  .ant-col-sm-1 {
    display: block;
    width: 4.16666667%;
  }
  .ant-col-sm-push-1 {
    left: 4.16666667%;
  }
  .ant-col-sm-pull-1 {
    right: 4.16666667%;
  }
  .ant-col-sm-offset-1 {
    margin-left: 4.16666667%;
  }
  .ant-col-sm-order-1 {
    order: 1;
  }
  .ant-col-sm-0 {
    display: none;
  }
  .ant-col-push-0 {
    left: auto;
  }
  .ant-col-pull-0 {
    right: auto;
  }
  .ant-col-sm-push-0 {
    left: auto;
  }
  .ant-col-sm-pull-0 {
    right: auto;
  }
  .ant-col-sm-offset-0 {
    margin-left: 0;
  }
  .ant-col-sm-order-0 {
    order: 0;
  }
}
@media (min-width: 992px) {
  .ant-col-md-1, .ant-col-md-2, .ant-col-md-3, .ant-col-md-4, .ant-col-md-5, .ant-col-md-6, .ant-col-md-7, .ant-col-md-8, .ant-col-md-9, .ant-col-md-10, .ant-col-md-11, .ant-col-md-12, .ant-col-md-13, .ant-col-md-14, .ant-col-md-15, .ant-col-md-16, .ant-col-md-17, .ant-col-md-18, .ant-col-md-19, .ant-col-md-20, .ant-col-md-21, .ant-col-md-22, .ant-col-md-23, .ant-col-md-24 {
    float: left;
    flex: 0 0 auto;
  }
  .ant-col-md-24 {
    display: block;
    width: 100%;
  }
  .ant-col-md-push-24 {
    left: 100%;
  }
  .ant-col-md-pull-24 {
    right: 100%;
  }
  .ant-col-md-offset-24 {
    margin-left: 100%;
  }
  .ant-col-md-order-24 {
    order: 24;
  }
  .ant-col-md-23 {
    display: block;
    width: 95.83333333%;
  }
  .ant-col-md-push-23 {
    left: 95.83333333%;
  }
  .ant-col-md-pull-23 {
    right: 95.83333333%;
  }
  .ant-col-md-offset-23 {
    margin-left: 95.83333333%;
  }
  .ant-col-md-order-23 {
    order: 23;
  }
  .ant-col-md-22 {
    display: block;
    width: 91.66666667%;
  }
  .ant-col-md-push-22 {
    left: 91.66666667%;
  }
  .ant-col-md-pull-22 {
    right: 91.66666667%;
  }
  .ant-col-md-offset-22 {
    margin-left: 91.66666667%;
  }
  .ant-col-md-order-22 {
    order: 22;
  }
  .ant-col-md-21 {
    display: block;
    width: 87.5%;
  }
  .ant-col-md-push-21 {
    left: 87.5%;
  }
  .ant-col-md-pull-21 {
    right: 87.5%;
  }
  .ant-col-md-offset-21 {
    margin-left: 87.5%;
  }
  .ant-col-md-order-21 {
    order: 21;
  }
  .ant-col-md-20 {
    display: block;
    width: 83.33333333%;
  }
  .ant-col-md-push-20 {
    left: 83.33333333%;
  }
  .ant-col-md-pull-20 {
    right: 83.33333333%;
  }
  .ant-col-md-offset-20 {
    margin-left: 83.33333333%;
  }
  .ant-col-md-order-20 {
    order: 20;
  }
  .ant-col-md-19 {
    display: block;
    width: 79.16666667%;
  }
  .ant-col-md-push-19 {
    left: 79.16666667%;
  }
  .ant-col-md-pull-19 {
    right: 79.16666667%;
  }
  .ant-col-md-offset-19 {
    margin-left: 79.16666667%;
  }
  .ant-col-md-order-19 {
    order: 19;
  }
  .ant-col-md-18 {
    display: block;
    width: 75%;
  }
  .ant-col-md-push-18 {
    left: 75%;
  }
  .ant-col-md-pull-18 {
    right: 75%;
  }
  .ant-col-md-offset-18 {
    margin-left: 75%;
  }
  .ant-col-md-order-18 {
    order: 18;
  }
  .ant-col-md-17 {
    display: block;
    width: 70.83333333%;
  }
  .ant-col-md-push-17 {
    left: 70.83333333%;
  }
  .ant-col-md-pull-17 {
    right: 70.83333333%;
  }
  .ant-col-md-offset-17 {
    margin-left: 70.83333333%;
  }
  .ant-col-md-order-17 {
    order: 17;
  }
  .ant-col-md-16 {
    display: block;
    width: 66.66666667%;
  }
  .ant-col-md-push-16 {
    left: 66.66666667%;
  }
  .ant-col-md-pull-16 {
    right: 66.66666667%;
  }
  .ant-col-md-offset-16 {
    margin-left: 66.66666667%;
  }
  .ant-col-md-order-16 {
    order: 16;
  }
  .ant-col-md-15 {
    display: block;
    width: 62.5%;
  }
  .ant-col-md-push-15 {
    left: 62.5%;
  }
  .ant-col-md-pull-15 {
    right: 62.5%;
  }
  .ant-col-md-offset-15 {
    margin-left: 62.5%;
  }
  .ant-col-md-order-15 {
    order: 15;
  }
  .ant-col-md-14 {
    display: block;
    width: 58.33333333%;
  }
  .ant-col-md-push-14 {
    left: 58.33333333%;
  }
  .ant-col-md-pull-14 {
    right: 58.33333333%;
  }
  .ant-col-md-offset-14 {
    margin-left: 58.33333333%;
  }
  .ant-col-md-order-14 {
    order: 14;
  }
  .ant-col-md-13 {
    display: block;
    width: 54.16666667%;
  }
  .ant-col-md-push-13 {
    left: 54.16666667%;
  }
  .ant-col-md-pull-13 {
    right: 54.16666667%;
  }
  .ant-col-md-offset-13 {
    margin-left: 54.16666667%;
  }
  .ant-col-md-order-13 {
    order: 13;
  }
  .ant-col-md-12 {
    display: block;
    width: 50%;
  }
  .ant-col-md-push-12 {
    left: 50%;
  }
  .ant-col-md-pull-12 {
    right: 50%;
  }
  .ant-col-md-offset-12 {
    margin-left: 50%;
  }
  .ant-col-md-order-12 {
    order: 12;
  }
  .ant-col-md-11 {
    display: block;
    width: 45.83333333%;
  }
  .ant-col-md-push-11 {
    left: 45.83333333%;
  }
  .ant-col-md-pull-11 {
    right: 45.83333333%;
  }
  .ant-col-md-offset-11 {
    margin-left: 45.83333333%;
  }
  .ant-col-md-order-11 {
    order: 11;
  }
  .ant-col-md-10 {
    display: block;
    width: 41.66666667%;
  }
  .ant-col-md-push-10 {
    left: 41.66666667%;
  }
  .ant-col-md-pull-10 {
    right: 41.66666667%;
  }
  .ant-col-md-offset-10 {
    margin-left: 41.66666667%;
  }
  .ant-col-md-order-10 {
    order: 10;
  }
  .ant-col-md-9 {
    display: block;
    width: 37.5%;
  }
  .ant-col-md-push-9 {
    left: 37.5%;
  }
  .ant-col-md-pull-9 {
    right: 37.5%;
  }
  .ant-col-md-offset-9 {
    margin-left: 37.5%;
  }
  .ant-col-md-order-9 {
    order: 9;
  }
  .ant-col-md-8 {
    display: block;
    width: 33.33333333%;
  }
  .ant-col-md-push-8 {
    left: 33.33333333%;
  }
  .ant-col-md-pull-8 {
    right: 33.33333333%;
  }
  .ant-col-md-offset-8 {
    margin-left: 33.33333333%;
  }
  .ant-col-md-order-8 {
    order: 8;
  }
  .ant-col-md-7 {
    display: block;
    width: 29.16666667%;
  }
  .ant-col-md-push-7 {
    left: 29.16666667%;
  }
  .ant-col-md-pull-7 {
    right: 29.16666667%;
  }
  .ant-col-md-offset-7 {
    margin-left: 29.16666667%;
  }
  .ant-col-md-order-7 {
    order: 7;
  }
  .ant-col-md-6 {
    display: block;
    width: 25%;
  }
  .ant-col-md-push-6 {
    left: 25%;
  }
  .ant-col-md-pull-6 {
    right: 25%;
  }
  .ant-col-md-offset-6 {
    margin-left: 25%;
  }
  .ant-col-md-order-6 {
    order: 6;
  }
  .ant-col-md-5 {
    display: block;
    width: 20.83333333%;
  }
  .ant-col-md-push-5 {
    left: 20.83333333%;
  }
  .ant-col-md-pull-5 {
    right: 20.83333333%;
  }
  .ant-col-md-offset-5 {
    margin-left: 20.83333333%;
  }
  .ant-col-md-order-5 {
    order: 5;
  }
  .ant-col-md-4 {
    display: block;
    width: 16.66666667%;
  }
  .ant-col-md-push-4 {
    left: 16.66666667%;
  }
  .ant-col-md-pull-4 {
    right: 16.66666667%;
  }
  .ant-col-md-offset-4 {
    margin-left: 16.66666667%;
  }
  .ant-col-md-order-4 {
    order: 4;
  }
  .ant-col-md-3 {
    display: block;
    width: 12.5%;
  }
  .ant-col-md-push-3 {
    left: 12.5%;
  }
  .ant-col-md-pull-3 {
    right: 12.5%;
  }
  .ant-col-md-offset-3 {
    margin-left: 12.5%;
  }
  .ant-col-md-order-3 {
    order: 3;
  }
  .ant-col-md-2 {
    display: block;
    width: 8.33333333%;
  }
  .ant-col-md-push-2 {
    left: 8.33333333%;
  }
  .ant-col-md-pull-2 {
    right: 8.33333333%;
  }
  .ant-col-md-offset-2 {
    margin-left: 8.33333333%;
  }
  .ant-col-md-order-2 {
    order: 2;
  }
  .ant-col-md-1 {
    display: block;
    width: 4.16666667%;
  }
  .ant-col-md-push-1 {
    left: 4.16666667%;
  }
  .ant-col-md-pull-1 {
    right: 4.16666667%;
  }
  .ant-col-md-offset-1 {
    margin-left: 4.16666667%;
  }
  .ant-col-md-order-1 {
    order: 1;
  }
  .ant-col-md-0 {
    display: none;
  }
  .ant-col-push-0 {
    left: auto;
  }
  .ant-col-pull-0 {
    right: auto;
  }
  .ant-col-md-push-0 {
    left: auto;
  }
  .ant-col-md-pull-0 {
    right: auto;
  }
  .ant-col-md-offset-0 {
    margin-left: 0;
  }
  .ant-col-md-order-0 {
    order: 0;
  }
}
@media (min-width: 1200px) {
  .ant-col-lg-1, .ant-col-lg-2, .ant-col-lg-3, .ant-col-lg-4, .ant-col-lg-5, .ant-col-lg-6, .ant-col-lg-7, .ant-col-lg-8, .ant-col-lg-9, .ant-col-lg-10, .ant-col-lg-11, .ant-col-lg-12, .ant-col-lg-13, .ant-col-lg-14, .ant-col-lg-15, .ant-col-lg-16, .ant-col-lg-17, .ant-col-lg-18, .ant-col-lg-19, .ant-col-lg-20, .ant-col-lg-21, .ant-col-lg-22, .ant-col-lg-23, .ant-col-lg-24 {
    float: left;
    flex: 0 0 auto;
  }
  .ant-col-lg-24 {
    display: block;
    width: 100%;
  }
  .ant-col-lg-push-24 {
    left: 100%;
  }
  .ant-col-lg-pull-24 {
    right: 100%;
  }
  .ant-col-lg-offset-24 {
    margin-left: 100%;
  }
  .ant-col-lg-order-24 {
    order: 24;
  }
  .ant-col-lg-23 {
    display: block;
    width: 95.83333333%;
  }
  .ant-col-lg-push-23 {
    left: 95.83333333%;
  }
  .ant-col-lg-pull-23 {
    right: 95.83333333%;
  }
  .ant-col-lg-offset-23 {
    margin-left: 95.83333333%;
  }
  .ant-col-lg-order-23 {
    order: 23;
  }
  .ant-col-lg-22 {
    display: block;
    width: 91.66666667%;
  }
  .ant-col-lg-push-22 {
    left: 91.66666667%;
  }
  .ant-col-lg-pull-22 {
    right: 91.66666667%;
  }
  .ant-col-lg-offset-22 {
    margin-left: 91.66666667%;
  }
  .ant-col-lg-order-22 {
    order: 22;
  }
  .ant-col-lg-21 {
    display: block;
    width: 87.5%;
  }
  .ant-col-lg-push-21 {
    left: 87.5%;
  }
  .ant-col-lg-pull-21 {
    right: 87.5%;
  }
  .ant-col-lg-offset-21 {
    margin-left: 87.5%;
  }
  .ant-col-lg-order-21 {
    order: 21;
  }
  .ant-col-lg-20 {
    display: block;
    width: 83.33333333%;
  }
  .ant-col-lg-push-20 {
    left: 83.33333333%;
  }
  .ant-col-lg-pull-20 {
    right: 83.33333333%;
  }
  .ant-col-lg-offset-20 {
    margin-left: 83.33333333%;
  }
  .ant-col-lg-order-20 {
    order: 20;
  }
  .ant-col-lg-19 {
    display: block;
    width: 79.16666667%;
  }
  .ant-col-lg-push-19 {
    left: 79.16666667%;
  }
  .ant-col-lg-pull-19 {
    right: 79.16666667%;
  }
  .ant-col-lg-offset-19 {
    margin-left: 79.16666667%;
  }
  .ant-col-lg-order-19 {
    order: 19;
  }
  .ant-col-lg-18 {
    display: block;
    width: 75%;
  }
  .ant-col-lg-push-18 {
    left: 75%;
  }
  .ant-col-lg-pull-18 {
    right: 75%;
  }
  .ant-col-lg-offset-18 {
    margin-left: 75%;
  }
  .ant-col-lg-order-18 {
    order: 18;
  }
  .ant-col-lg-17 {
    display: block;
    width: 70.83333333%;
  }
  .ant-col-lg-push-17 {
    left: 70.83333333%;
  }
  .ant-col-lg-pull-17 {
    right: 70.83333333%;
  }
  .ant-col-lg-offset-17 {
    margin-left: 70.83333333%;
  }
  .ant-col-lg-order-17 {
    order: 17;
  }
  .ant-col-lg-16 {
    display: block;
    width: 66.66666667%;
  }
  .ant-col-lg-push-16 {
    left: 66.66666667%;
  }
  .ant-col-lg-pull-16 {
    right: 66.66666667%;
  }
  .ant-col-lg-offset-16 {
    margin-left: 66.66666667%;
  }
  .ant-col-lg-order-16 {
    order: 16;
  }
  .ant-col-lg-15 {
    display: block;
    width: 62.5%;
  }
  .ant-col-lg-push-15 {
    left: 62.5%;
  }
  .ant-col-lg-pull-15 {
    right: 62.5%;
  }
  .ant-col-lg-offset-15 {
    margin-left: 62.5%;
  }
  .ant-col-lg-order-15 {
    order: 15;
  }
  .ant-col-lg-14 {
    display: block;
    width: 58.33333333%;
  }
  .ant-col-lg-push-14 {
    left: 58.33333333%;
  }
  .ant-col-lg-pull-14 {
    right: 58.33333333%;
  }
  .ant-col-lg-offset-14 {
    margin-left: 58.33333333%;
  }
  .ant-col-lg-order-14 {
    order: 14;
  }
  .ant-col-lg-13 {
    display: block;
    width: 54.16666667%;
  }
  .ant-col-lg-push-13 {
    left: 54.16666667%;
  }
  .ant-col-lg-pull-13 {
    right: 54.16666667%;
  }
  .ant-col-lg-offset-13 {
    margin-left: 54.16666667%;
  }
  .ant-col-lg-order-13 {
    order: 13;
  }
  .ant-col-lg-12 {
    display: block;
    width: 50%;
  }
  .ant-col-lg-push-12 {
    left: 50%;
  }
  .ant-col-lg-pull-12 {
    right: 50%;
  }
  .ant-col-lg-offset-12 {
    margin-left: 50%;
  }
  .ant-col-lg-order-12 {
    order: 12;
  }
  .ant-col-lg-11 {
    display: block;
    width: 45.83333333%;
  }
  .ant-col-lg-push-11 {
    left: 45.83333333%;
  }
  .ant-col-lg-pull-11 {
    right: 45.83333333%;
  }
  .ant-col-lg-offset-11 {
    margin-left: 45.83333333%;
  }
  .ant-col-lg-order-11 {
    order: 11;
  }
  .ant-col-lg-10 {
    display: block;
    width: 41.66666667%;
  }
  .ant-col-lg-push-10 {
    left: 41.66666667%;
  }
  .ant-col-lg-pull-10 {
    right: 41.66666667%;
  }
  .ant-col-lg-offset-10 {
    margin-left: 41.66666667%;
  }
  .ant-col-lg-order-10 {
    order: 10;
  }
  .ant-col-lg-9 {
    display: block;
    width: 37.5%;
  }
  .ant-col-lg-push-9 {
    left: 37.5%;
  }
  .ant-col-lg-pull-9 {
    right: 37.5%;
  }
  .ant-col-lg-offset-9 {
    margin-left: 37.5%;
  }
  .ant-col-lg-order-9 {
    order: 9;
  }
  .ant-col-lg-8 {
    display: block;
    width: 33.33333333%;
  }
  .ant-col-lg-push-8 {
    left: 33.33333333%;
  }
  .ant-col-lg-pull-8 {
    right: 33.33333333%;
  }
  .ant-col-lg-offset-8 {
    margin-left: 33.33333333%;
  }
  .ant-col-lg-order-8 {
    order: 8;
  }
  .ant-col-lg-7 {
    display: block;
    width: 29.16666667%;
  }
  .ant-col-lg-push-7 {
    left: 29.16666667%;
  }
  .ant-col-lg-pull-7 {
    right: 29.16666667%;
  }
  .ant-col-lg-offset-7 {
    margin-left: 29.16666667%;
  }
  .ant-col-lg-order-7 {
    order: 7;
  }
  .ant-col-lg-6 {
    display: block;
    width: 25%;
  }
  .ant-col-lg-push-6 {
    left: 25%;
  }
  .ant-col-lg-pull-6 {
    right: 25%;
  }
  .ant-col-lg-offset-6 {
    margin-left: 25%;
  }
  .ant-col-lg-order-6 {
    order: 6;
  }
  .ant-col-lg-5 {
    display: block;
    width: 20.83333333%;
  }
  .ant-col-lg-push-5 {
    left: 20.83333333%;
  }
  .ant-col-lg-pull-5 {
    right: 20.83333333%;
  }
  .ant-col-lg-offset-5 {
    margin-left: 20.83333333%;
  }
  .ant-col-lg-order-5 {
    order: 5;
  }
  .ant-col-lg-4 {
    display: block;
    width: 16.66666667%;
  }
  .ant-col-lg-push-4 {
    left: 16.66666667%;
  }
  .ant-col-lg-pull-4 {
    right: 16.66666667%;
  }
  .ant-col-lg-offset-4 {
    margin-left: 16.66666667%;
  }
  .ant-col-lg-order-4 {
    order: 4;
  }
  .ant-col-lg-3 {
    display: block;
    width: 12.5%;
  }
  .ant-col-lg-push-3 {
    left: 12.5%;
  }
  .ant-col-lg-pull-3 {
    right: 12.5%;
  }
  .ant-col-lg-offset-3 {
    margin-left: 12.5%;
  }
  .ant-col-lg-order-3 {
    order: 3;
  }
  .ant-col-lg-2 {
    display: block;
    width: 8.33333333%;
  }
  .ant-col-lg-push-2 {
    left: 8.33333333%;
  }
  .ant-col-lg-pull-2 {
    right: 8.33333333%;
  }
  .ant-col-lg-offset-2 {
    margin-left: 8.33333333%;
  }
  .ant-col-lg-order-2 {
    order: 2;
  }
  .ant-col-lg-1 {
    display: block;
    width: 4.16666667%;
  }
  .ant-col-lg-push-1 {
    left: 4.16666667%;
  }
  .ant-col-lg-pull-1 {
    right: 4.16666667%;
  }
  .ant-col-lg-offset-1 {
    margin-left: 4.16666667%;
  }
  .ant-col-lg-order-1 {
    order: 1;
  }
  .ant-col-lg-0 {
    display: none;
  }
  .ant-col-push-0 {
    left: auto;
  }
  .ant-col-pull-0 {
    right: auto;
  }
  .ant-col-lg-push-0 {
    left: auto;
  }
  .ant-col-lg-pull-0 {
    right: auto;
  }
  .ant-col-lg-offset-0 {
    margin-left: 0;
  }
  .ant-col-lg-order-0 {
    order: 0;
  }
}
@media (min-width: 1600px) {
  .ant-col-xl-1, .ant-col-xl-2, .ant-col-xl-3, .ant-col-xl-4, .ant-col-xl-5, .ant-col-xl-6, .ant-col-xl-7, .ant-col-xl-8, .ant-col-xl-9, .ant-col-xl-10, .ant-col-xl-11, .ant-col-xl-12, .ant-col-xl-13, .ant-col-xl-14, .ant-col-xl-15, .ant-col-xl-16, .ant-col-xl-17, .ant-col-xl-18, .ant-col-xl-19, .ant-col-xl-20, .ant-col-xl-21, .ant-col-xl-22, .ant-col-xl-23, .ant-col-xl-24 {
    float: left;
    flex: 0 0 auto;
  }
  .ant-col-xl-24 {
    display: block;
    width: 100%;
  }
  .ant-col-xl-push-24 {
    left: 100%;
  }
  .ant-col-xl-pull-24 {
    right: 100%;
  }
  .ant-col-xl-offset-24 {
    margin-left: 100%;
  }
  .ant-col-xl-order-24 {
    order: 24;
  }
  .ant-col-xl-23 {
    display: block;
    width: 95.83333333%;
  }
  .ant-col-xl-push-23 {
    left: 95.83333333%;
  }
  .ant-col-xl-pull-23 {
    right: 95.83333333%;
  }
  .ant-col-xl-offset-23 {
    margin-left: 95.83333333%;
  }
  .ant-col-xl-order-23 {
    order: 23;
  }
  .ant-col-xl-22 {
    display: block;
    width: 91.66666667%;
  }
  .ant-col-xl-push-22 {
    left: 91.66666667%;
  }
  .ant-col-xl-pull-22 {
    right: 91.66666667%;
  }
  .ant-col-xl-offset-22 {
    margin-left: 91.66666667%;
  }
  .ant-col-xl-order-22 {
    order: 22;
  }
  .ant-col-xl-21 {
    display: block;
    width: 87.5%;
  }
  .ant-col-xl-push-21 {
    left: 87.5%;
  }
  .ant-col-xl-pull-21 {
    right: 87.5%;
  }
  .ant-col-xl-offset-21 {
    margin-left: 87.5%;
  }
  .ant-col-xl-order-21 {
    order: 21;
  }
  .ant-col-xl-20 {
    display: block;
    width: 83.33333333%;
  }
  .ant-col-xl-push-20 {
    left: 83.33333333%;
  }
  .ant-col-xl-pull-20 {
    right: 83.33333333%;
  }
  .ant-col-xl-offset-20 {
    margin-left: 83.33333333%;
  }
  .ant-col-xl-order-20 {
    order: 20;
  }
  .ant-col-xl-19 {
    display: block;
    width: 79.16666667%;
  }
  .ant-col-xl-push-19 {
    left: 79.16666667%;
  }
  .ant-col-xl-pull-19 {
    right: 79.16666667%;
  }
  .ant-col-xl-offset-19 {
    margin-left: 79.16666667%;
  }
  .ant-col-xl-order-19 {
    order: 19;
  }
  .ant-col-xl-18 {
    display: block;
    width: 75%;
  }
  .ant-col-xl-push-18 {
    left: 75%;
  }
  .ant-col-xl-pull-18 {
    right: 75%;
  }
  .ant-col-xl-offset-18 {
    margin-left: 75%;
  }
  .ant-col-xl-order-18 {
    order: 18;
  }
  .ant-col-xl-17 {
    display: block;
    width: 70.83333333%;
  }
  .ant-col-xl-push-17 {
    left: 70.83333333%;
  }
  .ant-col-xl-pull-17 {
    right: 70.83333333%;
  }
  .ant-col-xl-offset-17 {
    margin-left: 70.83333333%;
  }
  .ant-col-xl-order-17 {
    order: 17;
  }
  .ant-col-xl-16 {
    display: block;
    width: 66.66666667%;
  }
  .ant-col-xl-push-16 {
    left: 66.66666667%;
  }
  .ant-col-xl-pull-16 {
    right: 66.66666667%;
  }
  .ant-col-xl-offset-16 {
    margin-left: 66.66666667%;
  }
  .ant-col-xl-order-16 {
    order: 16;
  }
  .ant-col-xl-15 {
    display: block;
    width: 62.5%;
  }
  .ant-col-xl-push-15 {
    left: 62.5%;
  }
  .ant-col-xl-pull-15 {
    right: 62.5%;
  }
  .ant-col-xl-offset-15 {
    margin-left: 62.5%;
  }
  .ant-col-xl-order-15 {
    order: 15;
  }
  .ant-col-xl-14 {
    display: block;
    width: 58.33333333%;
  }
  .ant-col-xl-push-14 {
    left: 58.33333333%;
  }
  .ant-col-xl-pull-14 {
    right: 58.33333333%;
  }
  .ant-col-xl-offset-14 {
    margin-left: 58.33333333%;
  }
  .ant-col-xl-order-14 {
    order: 14;
  }
  .ant-col-xl-13 {
    display: block;
    width: 54.16666667%;
  }
  .ant-col-xl-push-13 {
    left: 54.16666667%;
  }
  .ant-col-xl-pull-13 {
    right: 54.16666667%;
  }
  .ant-col-xl-offset-13 {
    margin-left: 54.16666667%;
  }
  .ant-col-xl-order-13 {
    order: 13;
  }
  .ant-col-xl-12 {
    display: block;
    width: 50%;
  }
  .ant-col-xl-push-12 {
    left: 50%;
  }
  .ant-col-xl-pull-12 {
    right: 50%;
  }
  .ant-col-xl-offset-12 {
    margin-left: 50%;
  }
  .ant-col-xl-order-12 {
    order: 12;
  }
  .ant-col-xl-11 {
    display: block;
    width: 45.83333333%;
  }
  .ant-col-xl-push-11 {
    left: 45.83333333%;
  }
  .ant-col-xl-pull-11 {
    right: 45.83333333%;
  }
  .ant-col-xl-offset-11 {
    margin-left: 45.83333333%;
  }
  .ant-col-xl-order-11 {
    order: 11;
  }
  .ant-col-xl-10 {
    display: block;
    width: 41.66666667%;
  }
  .ant-col-xl-push-10 {
    left: 41.66666667%;
  }
  .ant-col-xl-pull-10 {
    right: 41.66666667%;
  }
  .ant-col-xl-offset-10 {
    margin-left: 41.66666667%;
  }
  .ant-col-xl-order-10 {
    order: 10;
  }
  .ant-col-xl-9 {
    display: block;
    width: 37.5%;
  }
  .ant-col-xl-push-9 {
    left: 37.5%;
  }
  .ant-col-xl-pull-9 {
    right: 37.5%;
  }
  .ant-col-xl-offset-9 {
    margin-left: 37.5%;
  }
  .ant-col-xl-order-9 {
    order: 9;
  }
  .ant-col-xl-8 {
    display: block;
    width: 33.33333333%;
  }
  .ant-col-xl-push-8 {
    left: 33.33333333%;
  }
  .ant-col-xl-pull-8 {
    right: 33.33333333%;
  }
  .ant-col-xl-offset-8 {
    margin-left: 33.33333333%;
  }
  .ant-col-xl-order-8 {
    order: 8;
  }
  .ant-col-xl-7 {
    display: block;
    width: 29.16666667%;
  }
  .ant-col-xl-push-7 {
    left: 29.16666667%;
  }
  .ant-col-xl-pull-7 {
    right: 29.16666667%;
  }
  .ant-col-xl-offset-7 {
    margin-left: 29.16666667%;
  }
  .ant-col-xl-order-7 {
    order: 7;
  }
  .ant-col-xl-6 {
    display: block;
    width: 25%;
  }
  .ant-col-xl-push-6 {
    left: 25%;
  }
  .ant-col-xl-pull-6 {
    right: 25%;
  }
  .ant-col-xl-offset-6 {
    margin-left: 25%;
  }
  .ant-col-xl-order-6 {
    order: 6;
  }
  .ant-col-xl-5 {
    display: block;
    width: 20.83333333%;
  }
  .ant-col-xl-push-5 {
    left: 20.83333333%;
  }
  .ant-col-xl-pull-5 {
    right: 20.83333333%;
  }
  .ant-col-xl-offset-5 {
    margin-left: 20.83333333%;
  }
  .ant-col-xl-order-5 {
    order: 5;
  }
  .ant-col-xl-4 {
    display: block;
    width: 16.66666667%;
  }
  .ant-col-xl-push-4 {
    left: 16.66666667%;
  }
  .ant-col-xl-pull-4 {
    right: 16.66666667%;
  }
  .ant-col-xl-offset-4 {
    margin-left: 16.66666667%;
  }
  .ant-col-xl-order-4 {
    order: 4;
  }
  .ant-col-xl-3 {
    display: block;
    width: 12.5%;
  }
  .ant-col-xl-push-3 {
    left: 12.5%;
  }
  .ant-col-xl-pull-3 {
    right: 12.5%;
  }
  .ant-col-xl-offset-3 {
    margin-left: 12.5%;
  }
  .ant-col-xl-order-3 {
    order: 3;
  }
  .ant-col-xl-2 {
    display: block;
    width: 8.33333333%;
  }
  .ant-col-xl-push-2 {
    left: 8.33333333%;
  }
  .ant-col-xl-pull-2 {
    right: 8.33333333%;
  }
  .ant-col-xl-offset-2 {
    margin-left: 8.33333333%;
  }
  .ant-col-xl-order-2 {
    order: 2;
  }
  .ant-col-xl-1 {
    display: block;
    width: 4.16666667%;
  }
  .ant-col-xl-push-1 {
    left: 4.16666667%;
  }
  .ant-col-xl-pull-1 {
    right: 4.16666667%;
  }
  .ant-col-xl-offset-1 {
    margin-left: 4.16666667%;
  }
  .ant-col-xl-order-1 {
    order: 1;
  }
  .ant-col-xl-0 {
    display: none;
  }
  .ant-col-push-0 {
    left: auto;
  }
  .ant-col-pull-0 {
    right: auto;
  }
  .ant-col-xl-push-0 {
    left: auto;
  }
  .ant-col-xl-pull-0 {
    right: auto;
  }
  .ant-col-xl-offset-0 {
    margin-left: 0;
  }
  .ant-col-xl-order-0 {
    order: 0;
  }
}
`
                ]
            },] },
];
/**
 * @nocollapse
 */
NzRowComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
];
NzRowComponent.propDecorators = {
    'nzType': [{ type: Input },],
    'nzAlign': [{ type: Input },],
    'nzJustify': [{ type: Input },],
    'nzGutter': [{ type: Input },],
};

/**
 * @abstract
 */

class NzColComponent {
    /**
     * @param {?} _elementRef
     * @param {?} _nzRow
     * @param {?} _renderer
     */
    constructor(_elementRef, _nzRow, _renderer) {
        this._elementRef = _elementRef;
        this._nzRow = _nzRow;
        this._renderer = _renderer;
        this._classList = [];
        this._prefixCls = 'ant-col';
        this._el = this._elementRef.nativeElement;
    }
    /**
     * @return {?}
     */
    get paddingLeft() {
        return this._nzRow && this._nzRow._gutter / 2;
    }
    /**
     * @return {?}
     */
    get paddingRight() {
        return this._nzRow && this._nzRow._gutter / 2;
    }
    /**
     * temp solution since no method add classMap to host https://github.com/angular/angular/issues/7289
     * @return {?}
     */
    setClassMap() {
        this._classList.forEach(_className => {
            this._renderer.removeClass(this._el, _className);
        });
        this._classList = [
            this.nzSpan && `${this._prefixCls}-${this.nzSpan}`,
            this.nzOrder && `${this._prefixCls}-order-${this.nzOrder}`,
            this.nzOffset && `${this._prefixCls}-offset-${this.nzOffset}`,
            this.nzPull && `${this._prefixCls}-pull-${this.nzPull}`,
            this.nzPush && `${this._prefixCls}-push-${this.nzPush}`,
            ...this.generateClass()
        ];
        this._classList = this._classList.filter((item) => {
            return !!item;
        });
        this._classList.forEach(_className => {
            this._renderer.addClass(this._el, _className);
        });
    }
    /**
     * @return {?}
     */
    generateClass() {
        const /** @type {?} */ listOfSizeInputName = ['nzXs', 'nzSm', 'nzMd', 'nzLg', 'nzXl'];
        const /** @type {?} */ listOfClassName = [];
        listOfSizeInputName.forEach(name => {
            const /** @type {?} */ sizeName = name.replace('nz', '').toLowerCase();
            if ((typeof (this[name]) === 'number') || (typeof (this[name]) === 'string')) {
                listOfClassName.push(this[name] && `${this._prefixCls}-${sizeName}-${this[name]}`);
            }
            else {
                listOfClassName.push(this[name] && this[name]['span'] && `${this._prefixCls}-${sizeName}-${this[name]['span']}`);
                listOfClassName.push(this[name] && this[name]['pull'] && `${this._prefixCls}-${sizeName}-pull-${this[name]['pull']}`);
                listOfClassName.push(this[name] && this[name]['push'] && `${this._prefixCls}-${sizeName}-push-${this[name]['push']}`);
                listOfClassName.push(this[name] && this[name]['offset'] && `${this._prefixCls}-${sizeName}-offset-${this[name]['offset']}`);
                listOfClassName.push(this[name] && this[name]['order'] && `${this._prefixCls}-${sizeName}-order-${this[name]['order']}`);
            }
        });
        return listOfClassName;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.setClassMap();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.setClassMap();
    }
}
NzColComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-col',
                template: `
    <ng-content></ng-content>
  `,
                styles: []
            },] },
];
/**
 * @nocollapse
 */
NzColComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: NzRowComponent, decorators: [{ type: Optional }, { type: Host },] },
    { type: Renderer2, },
];
NzColComponent.propDecorators = {
    'paddingLeft': [{ type: HostBinding, args: ['style.padding-left.px',] },],
    'paddingRight': [{ type: HostBinding, args: ['style.padding-right.px',] },],
    'nzSpan': [{ type: Input },],
    'nzOrder': [{ type: Input },],
    'nzOffset': [{ type: Input },],
    'nzPush': [{ type: Input },],
    'nzPull': [{ type: Input },],
    'nzXs': [{ type: Input },],
    'nzSm': [{ type: Input },],
    'nzMd': [{ type: Input },],
    'nzLg': [{ type: Input },],
    'nzXl': [{ type: Input },],
};

class NzColDirective extends NzColComponent {
}
NzColDirective.decorators = [
    { type: Directive, args: [{
                selector: '[nz-col]'
            },] },
];
/**
 * @nocollapse
 */
NzColDirective.ctorParameters = () => [];

class NzGridModule {
}
NzGridModule.decorators = [
    { type: NgModule, args: [{
                declarations: [NzRowComponent, NzColDirective, NzColComponent],
                exports: [NzRowComponent, NzColDirective, NzColComponent],
                imports: [CommonModule]
            },] },
];
/**
 * @nocollapse
 */
NzGridModule.ctorParameters = () => [];

class NzButtonGroupComponent {
    constructor() {
        this._prefixCls = 'ant-btn-group';
        this._sizeMap = { large: 'lg', small: 'sm' };
    }
    /**
     * @return {?}
     */
    get nzSize() {
        return this._size;
    }
    ;
    /**
     * @param {?} value
     * @return {?}
     */
    set nzSize(value) {
        this._size = value;
    }
    /**
     * @return {?}
     */
    get _classMap() {
        return {
            [this._prefixCls]: true,
            [`${this._prefixCls}-${this._sizeMap[this.nzSize]}`]: this._sizeMap[this.nzSize]
        };
    }
    ;
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        /** trim text node between button */
        Array.from(this._groupWrapper.nativeElement.childNodes).forEach((node) => {
            if (node.nodeType === 3) {
                this._groupWrapper.nativeElement.removeChild(node);
            }
        });
    }
}
NzButtonGroupComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-button-group',
                encapsulation: ViewEncapsulation.None,
                template: `
    <div [ngClass]="_classMap" #groupWrapper>
      <ng-content></ng-content>
    </div>
  `,
                styles: []
            },] },
];
/**
 * @nocollapse
 */
NzButtonGroupComponent.ctorParameters = () => [];
NzButtonGroupComponent.propDecorators = {
    '_groupWrapper': [{ type: ViewChild, args: ['groupWrapper',] },],
    'nzSize': [{ type: Input },],
};

class NzButtonComponent {
    /**
     * @param {?} _elementRef
     * @param {?} _renderer
     */
    constructor(_elementRef, _renderer) {
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this._classList = [];
        this._iconOnly = false;
        this._loading = false;
        this._clicked = false;
        this._ghost = false;
        this._prefixCls = 'ant-btn';
        this._sizeMap = { large: 'lg', small: 'sm' };
        this._el = this._elementRef.nativeElement;
        this.nativeElement = this._elementRef.nativeElement;
        this._renderer.addClass(this._el, this._prefixCls);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzGhost(value) {
        this._ghost = value;
        this._setClassMap();
    }
    /**
     * @return {?}
     */
    get nzGhost() {
        return this._ghost;
    }
    /**
     * @return {?}
     */
    get nzType() {
        return this._type;
    }
    ;
    /**
     * @param {?} value
     * @return {?}
     */
    set nzType(value) {
        this._type = value;
        this._setClassMap();
    }
    /**
     * @return {?}
     */
    get nzShape() {
        return this._shape;
    }
    ;
    /**
     * @param {?} value
     * @return {?}
     */
    set nzShape(value) {
        this._shape = value;
        this._setClassMap();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzSize(value) {
        this._size = value;
        this._setClassMap();
    }
    /**
     * @return {?}
     */
    get nzSize() {
        return this._size;
    }
    ;
    /**
     * @param {?} value
     * @return {?}
     */
    set nzLoading(value) {
        this._loading = value;
        this._setClassMap();
        this._setIconDisplay(value);
    }
    /**
     * @return {?}
     */
    get nzLoading() {
        return this._loading;
    }
    ;
    /**
     * toggle button clicked animation
     * @return {?}
     */
    _onClick() {
        this._clicked = true;
        this._setClassMap();
        setTimeout(() => {
            this._clicked = false;
            this._setClassMap();
        }, 300);
    }
    ;
    /**
     * @param {?} value
     * @return {?}
     */
    _setIconDisplay(value) {
        const /** @type {?} */ innerI = this._iconElement;
        if (innerI) {
            this._renderer.setStyle(innerI, 'display', value ? 'none' : 'inline-block');
        }
    }
    /**
     * temp solution since no method add classMap to host https://github.com/angular/angular/issues/7289
     * @return {?}
     */
    _setClassMap() {
        this._classList.forEach(_className => {
            this._renderer.removeClass(this._el, _className);
        });
        this._classList = [
            this.nzType && `${this._prefixCls}-${this.nzType}`,
            this.nzShape && `${this._prefixCls}-${this.nzShape}`,
            this._sizeMap[this.nzSize] && `${this._prefixCls}-${this._sizeMap[this.nzSize]}`,
            this.nzLoading && `${this._prefixCls}-loading`,
            this._clicked && `${this._prefixCls}-clicked`,
            this._iconOnly && `${this._prefixCls}-icon-only`,
            this.nzGhost && `${this._prefixCls}-background-ghost`,
        ].filter((item) => {
            return !!item;
        });
        this._classList.forEach(_className => {
            this._renderer.addClass(this._el, _className);
        });
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this._iconElement = this._innerIElement;
        /** check if host children only has i element */
        if (this._iconElement && this._el.children.length === 1 && (this._iconElement.isEqualNode(this._el.children[0]))) {
            this._iconOnly = true;
            this._setClassMap();
        }
        this._setIconDisplay(this.nzLoading);
    }
    /**
     * @return {?}
     */
    get _innerIElement() {
        return this._el.querySelector('i');
    }
}
NzButtonComponent.decorators = [
    { type: Component, args: [{
                selector: '[nz-button]',
                encapsulation: ViewEncapsulation.None,
                template: `
    <i class="anticon anticon-spin anticon-loading" *ngIf="nzLoading"></i>
    <ng-content></ng-content>
  `,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-btn {
  display: inline-block;
  margin-bottom: 0;
  font-weight: 500;
  text-align: center;
  touch-action: manipulation;
  cursor: pointer;
  background-image: none;
  border: 1px solid transparent;
  white-space: nowrap;
  line-height: 1.15;
  padding: 0 15px;
  font-size: 12px;
  border-radius: 4px;
  height: 28px;
  user-select: none;
  transition: all 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
  position: relative;
  color: rgba(0, 0, 0, 0.65);
  background-color: #fff;
  border-color: #d9d9d9;
}
.ant-btn > .anticon {
  line-height: 1;
}
.ant-btn,
.ant-btn:active,
.ant-btn:focus {
  outline: 0;
}
.ant-btn:not([disabled]):hover {
  text-decoration: none;
}
.ant-btn:not([disabled]):active {
  outline: 0;
  transition: none;
}
.ant-btn.disabled,
.ant-btn[disabled] {
  cursor: not-allowed;
}
.ant-btn.disabled > *,
.ant-btn[disabled] > * {
  pointer-events: none;
}
.ant-btn-lg {
  padding: 0 15px;
  font-size: 14px;
  border-radius: 4px;
  height: 32px;
}
.ant-btn-sm {
  padding: 0 7px;
  font-size: 12px;
  border-radius: 4px;
  height: 22px;
}
.ant-btn > a:only-child {
  color: currentColor;
}
.ant-btn > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-btn:hover,
.ant-btn:focus {
  color: #3FCE9E;
  background-color: #fff;
  border-color: #3FCE9E;
}
.ant-btn:hover > a:only-child,
.ant-btn:focus > a:only-child {
  color: currentColor;
}
.ant-btn:hover > a:only-child:after,
.ant-btn:focus > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-btn:active,
.ant-btn.active {
  color: #36b38c;
  background-color: #fff;
  border-color: #36b38c;
}
.ant-btn:active > a:only-child,
.ant-btn.active > a:only-child {
  color: currentColor;
}
.ant-btn:active > a:only-child:after,
.ant-btn.active > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-btn.disabled,
.ant-btn[disabled],
.ant-btn.disabled:hover,
.ant-btn[disabled]:hover,
.ant-btn.disabled:focus,
.ant-btn[disabled]:focus,
.ant-btn.disabled:active,
.ant-btn[disabled]:active,
.ant-btn.disabled.active,
.ant-btn[disabled].active {
  color: rgba(0, 0, 0, 0.25);
  background-color: #f7f7f7;
  border-color: #d9d9d9;
}
.ant-btn.disabled > a:only-child,
.ant-btn[disabled] > a:only-child,
.ant-btn.disabled:hover > a:only-child,
.ant-btn[disabled]:hover > a:only-child,
.ant-btn.disabled:focus > a:only-child,
.ant-btn[disabled]:focus > a:only-child,
.ant-btn.disabled:active > a:only-child,
.ant-btn[disabled]:active > a:only-child,
.ant-btn.disabled.active > a:only-child,
.ant-btn[disabled].active > a:only-child {
  color: currentColor;
}
.ant-btn.disabled > a:only-child:after,
.ant-btn[disabled] > a:only-child:after,
.ant-btn.disabled:hover > a:only-child:after,
.ant-btn[disabled]:hover > a:only-child:after,
.ant-btn.disabled:focus > a:only-child:after,
.ant-btn[disabled]:focus > a:only-child:after,
.ant-btn.disabled:active > a:only-child:after,
.ant-btn[disabled]:active > a:only-child:after,
.ant-btn.disabled.active > a:only-child:after,
.ant-btn[disabled].active > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-btn:hover,
.ant-btn:focus,
.ant-btn:active,
.ant-btn.active {
  background: #fff;
}
.ant-btn-primary {
  color: #fff;
  background-color: #3FCE9E;
  border-color: #3FCE9E;
}
.ant-btn-primary > a:only-child {
  color: currentColor;
}
.ant-btn-primary > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-btn-primary:hover,
.ant-btn-primary:focus {
  color: #fff;
  background-color: #6ddab5;
  border-color: #6ddab5;
}
.ant-btn-primary:hover > a:only-child,
.ant-btn-primary:focus > a:only-child {
  color: currentColor;
}
.ant-btn-primary:hover > a:only-child:after,
.ant-btn-primary:focus > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-btn-primary:active,
.ant-btn-primary.active {
  color: #fff;
  background-color: #36b38c;
  border-color: #36b38c;
}
.ant-btn-primary:active > a:only-child,
.ant-btn-primary.active > a:only-child {
  color: currentColor;
}
.ant-btn-primary:active > a:only-child:after,
.ant-btn-primary.active > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-btn-primary.disabled,
.ant-btn-primary[disabled],
.ant-btn-primary.disabled:hover,
.ant-btn-primary[disabled]:hover,
.ant-btn-primary.disabled:focus,
.ant-btn-primary[disabled]:focus,
.ant-btn-primary.disabled:active,
.ant-btn-primary[disabled]:active,
.ant-btn-primary.disabled.active,
.ant-btn-primary[disabled].active {
  color: rgba(0, 0, 0, 0.25);
  background-color: #f7f7f7;
  border-color: #d9d9d9;
}
.ant-btn-primary.disabled > a:only-child,
.ant-btn-primary[disabled] > a:only-child,
.ant-btn-primary.disabled:hover > a:only-child,
.ant-btn-primary[disabled]:hover > a:only-child,
.ant-btn-primary.disabled:focus > a:only-child,
.ant-btn-primary[disabled]:focus > a:only-child,
.ant-btn-primary.disabled:active > a:only-child,
.ant-btn-primary[disabled]:active > a:only-child,
.ant-btn-primary.disabled.active > a:only-child,
.ant-btn-primary[disabled].active > a:only-child {
  color: currentColor;
}
.ant-btn-primary.disabled > a:only-child:after,
.ant-btn-primary[disabled] > a:only-child:after,
.ant-btn-primary.disabled:hover > a:only-child:after,
.ant-btn-primary[disabled]:hover > a:only-child:after,
.ant-btn-primary.disabled:focus > a:only-child:after,
.ant-btn-primary[disabled]:focus > a:only-child:after,
.ant-btn-primary.disabled:active > a:only-child:after,
.ant-btn-primary[disabled]:active > a:only-child:after,
.ant-btn-primary.disabled.active > a:only-child:after,
.ant-btn-primary[disabled].active > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-btn-group .ant-btn-primary:not(:first-child):not(:last-child) {
  border-right-color: #36b38c;
  border-left-color: #36b38c;
}
.ant-btn-group .ant-btn-primary:not(:first-child):not(:last-child):disabled {
  border-color: #d9d9d9;
}
.ant-btn-group .ant-btn-primary:first-child:not(:last-child) {
  border-right-color: #36b38c;
}
.ant-btn-group .ant-btn-primary:first-child:not(:last-child)[disabled] {
  border-right-color: #d9d9d9;
}
.ant-btn-group .ant-btn-primary:last-child:not(:first-child),
.ant-btn-group .ant-btn-primary + .ant-btn-primary {
  border-left-color: #36b38c;
}
.ant-btn-group .ant-btn-primary:last-child:not(:first-child)[disabled],
.ant-btn-group .ant-btn-primary + .ant-btn-primary[disabled] {
  border-left-color: #d9d9d9;
}
.ant-btn-ghost {
  color: rgba(0, 0, 0, 0.65);
  background-color: transparent;
  border-color: #d9d9d9;
}
.ant-btn-ghost > a:only-child {
  color: currentColor;
}
.ant-btn-ghost > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-btn-ghost:hover,
.ant-btn-ghost:focus {
  color: #3FCE9E;
  background-color: transparent;
  border-color: #3FCE9E;
}
.ant-btn-ghost:hover > a:only-child,
.ant-btn-ghost:focus > a:only-child {
  color: currentColor;
}
.ant-btn-ghost:hover > a:only-child:after,
.ant-btn-ghost:focus > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-btn-ghost:active,
.ant-btn-ghost.active {
  color: #36b38c;
  background-color: transparent;
  border-color: #36b38c;
}
.ant-btn-ghost:active > a:only-child,
.ant-btn-ghost.active > a:only-child {
  color: currentColor;
}
.ant-btn-ghost:active > a:only-child:after,
.ant-btn-ghost.active > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-btn-ghost.disabled,
.ant-btn-ghost[disabled],
.ant-btn-ghost.disabled:hover,
.ant-btn-ghost[disabled]:hover,
.ant-btn-ghost.disabled:focus,
.ant-btn-ghost[disabled]:focus,
.ant-btn-ghost.disabled:active,
.ant-btn-ghost[disabled]:active,
.ant-btn-ghost.disabled.active,
.ant-btn-ghost[disabled].active {
  color: rgba(0, 0, 0, 0.25);
  background-color: #f7f7f7;
  border-color: #d9d9d9;
}
.ant-btn-ghost.disabled > a:only-child,
.ant-btn-ghost[disabled] > a:only-child,
.ant-btn-ghost.disabled:hover > a:only-child,
.ant-btn-ghost[disabled]:hover > a:only-child,
.ant-btn-ghost.disabled:focus > a:only-child,
.ant-btn-ghost[disabled]:focus > a:only-child,
.ant-btn-ghost.disabled:active > a:only-child,
.ant-btn-ghost[disabled]:active > a:only-child,
.ant-btn-ghost.disabled.active > a:only-child,
.ant-btn-ghost[disabled].active > a:only-child {
  color: currentColor;
}
.ant-btn-ghost.disabled > a:only-child:after,
.ant-btn-ghost[disabled] > a:only-child:after,
.ant-btn-ghost.disabled:hover > a:only-child:after,
.ant-btn-ghost[disabled]:hover > a:only-child:after,
.ant-btn-ghost.disabled:focus > a:only-child:after,
.ant-btn-ghost[disabled]:focus > a:only-child:after,
.ant-btn-ghost.disabled:active > a:only-child:after,
.ant-btn-ghost[disabled]:active > a:only-child:after,
.ant-btn-ghost.disabled.active > a:only-child:after,
.ant-btn-ghost[disabled].active > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-btn-dashed {
  color: rgba(0, 0, 0, 0.65);
  background-color: #fff;
  border-color: #d9d9d9;
  border-style: dashed;
}
.ant-btn-dashed > a:only-child {
  color: currentColor;
}
.ant-btn-dashed > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-btn-dashed:hover,
.ant-btn-dashed:focus {
  color: #3FCE9E;
  background-color: #fff;
  border-color: #3FCE9E;
}
.ant-btn-dashed:hover > a:only-child,
.ant-btn-dashed:focus > a:only-child {
  color: currentColor;
}
.ant-btn-dashed:hover > a:only-child:after,
.ant-btn-dashed:focus > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-btn-dashed:active,
.ant-btn-dashed.active {
  color: #36b38c;
  background-color: #fff;
  border-color: #36b38c;
}
.ant-btn-dashed:active > a:only-child,
.ant-btn-dashed.active > a:only-child {
  color: currentColor;
}
.ant-btn-dashed:active > a:only-child:after,
.ant-btn-dashed.active > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-btn-dashed.disabled,
.ant-btn-dashed[disabled],
.ant-btn-dashed.disabled:hover,
.ant-btn-dashed[disabled]:hover,
.ant-btn-dashed.disabled:focus,
.ant-btn-dashed[disabled]:focus,
.ant-btn-dashed.disabled:active,
.ant-btn-dashed[disabled]:active,
.ant-btn-dashed.disabled.active,
.ant-btn-dashed[disabled].active {
  color: rgba(0, 0, 0, 0.25);
  background-color: #f7f7f7;
  border-color: #d9d9d9;
}
.ant-btn-dashed.disabled > a:only-child,
.ant-btn-dashed[disabled] > a:only-child,
.ant-btn-dashed.disabled:hover > a:only-child,
.ant-btn-dashed[disabled]:hover > a:only-child,
.ant-btn-dashed.disabled:focus > a:only-child,
.ant-btn-dashed[disabled]:focus > a:only-child,
.ant-btn-dashed.disabled:active > a:only-child,
.ant-btn-dashed[disabled]:active > a:only-child,
.ant-btn-dashed.disabled.active > a:only-child,
.ant-btn-dashed[disabled].active > a:only-child {
  color: currentColor;
}
.ant-btn-dashed.disabled > a:only-child:after,
.ant-btn-dashed[disabled] > a:only-child:after,
.ant-btn-dashed.disabled:hover > a:only-child:after,
.ant-btn-dashed[disabled]:hover > a:only-child:after,
.ant-btn-dashed.disabled:focus > a:only-child:after,
.ant-btn-dashed[disabled]:focus > a:only-child:after,
.ant-btn-dashed.disabled:active > a:only-child:after,
.ant-btn-dashed[disabled]:active > a:only-child:after,
.ant-btn-dashed.disabled.active > a:only-child:after,
.ant-btn-dashed[disabled].active > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-btn-danger {
  color: #f04134;
  background-color: #f7f7f7;
  border-color: #d9d9d9;
}
.ant-btn-danger > a:only-child {
  color: currentColor;
}
.ant-btn-danger > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-btn-danger:hover,
.ant-btn-danger:focus {
  color: #fff;
  background-color: #f04134;
  border-color: #f04134;
}
.ant-btn-danger:hover > a:only-child,
.ant-btn-danger:focus > a:only-child {
  color: currentColor;
}
.ant-btn-danger:hover > a:only-child:after,
.ant-btn-danger:focus > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-btn-danger:active,
.ant-btn-danger.active {
  color: #fff;
  background-color: #d73435;
  border-color: #d73435;
}
.ant-btn-danger:active > a:only-child,
.ant-btn-danger.active > a:only-child {
  color: currentColor;
}
.ant-btn-danger:active > a:only-child:after,
.ant-btn-danger.active > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-btn-danger.disabled,
.ant-btn-danger[disabled],
.ant-btn-danger.disabled:hover,
.ant-btn-danger[disabled]:hover,
.ant-btn-danger.disabled:focus,
.ant-btn-danger[disabled]:focus,
.ant-btn-danger.disabled:active,
.ant-btn-danger[disabled]:active,
.ant-btn-danger.disabled.active,
.ant-btn-danger[disabled].active {
  color: rgba(0, 0, 0, 0.25);
  background-color: #f7f7f7;
  border-color: #d9d9d9;
}
.ant-btn-danger.disabled > a:only-child,
.ant-btn-danger[disabled] > a:only-child,
.ant-btn-danger.disabled:hover > a:only-child,
.ant-btn-danger[disabled]:hover > a:only-child,
.ant-btn-danger.disabled:focus > a:only-child,
.ant-btn-danger[disabled]:focus > a:only-child,
.ant-btn-danger.disabled:active > a:only-child,
.ant-btn-danger[disabled]:active > a:only-child,
.ant-btn-danger.disabled.active > a:only-child,
.ant-btn-danger[disabled].active > a:only-child {
  color: currentColor;
}
.ant-btn-danger.disabled > a:only-child:after,
.ant-btn-danger[disabled] > a:only-child:after,
.ant-btn-danger.disabled:hover > a:only-child:after,
.ant-btn-danger[disabled]:hover > a:only-child:after,
.ant-btn-danger.disabled:focus > a:only-child:after,
.ant-btn-danger[disabled]:focus > a:only-child:after,
.ant-btn-danger.disabled:active > a:only-child:after,
.ant-btn-danger[disabled]:active > a:only-child:after,
.ant-btn-danger.disabled.active > a:only-child:after,
.ant-btn-danger[disabled].active > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-btn-circle,
.ant-btn-circle-outline {
  width: 28px;
  padding: 0;
  font-size: 14px;
  border-radius: 50%;
  height: 28px;
}
.ant-btn-circle.ant-btn-lg,
.ant-btn-circle-outline.ant-btn-lg {
  width: 32px;
  padding: 0;
  font-size: 16px;
  border-radius: 50%;
  height: 32px;
}
.ant-btn-circle.ant-btn-sm,
.ant-btn-circle-outline.ant-btn-sm {
  width: 22px;
  padding: 0;
  font-size: 12px;
  border-radius: 50%;
  height: 22px;
}
.ant-btn:before {
  position: absolute;
  top: -1px;
  left: -1px;
  bottom: -1px;
  right: -1px;
  background: #fff;
  opacity: 0.35;
  content: '';
  border-radius: inherit;
  z-index: 1;
  transition: opacity .2s;
  pointer-events: none;
  display: none;
}
.ant-btn .anticon {
  transition: margin-left 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
}
.ant-btn.ant-btn-loading:before {
  display: block;
}
.ant-btn.ant-btn-loading:not(.ant-btn-circle):not(.ant-btn-circle-outline) {
  padding-left: 29px;
  pointer-events: none;
  position: relative;
}
.ant-btn.ant-btn-loading:not(.ant-btn-circle):not(.ant-btn-circle-outline) .anticon {
  margin-left: -14px;
}
.ant-btn-sm.ant-btn-loading:not(.ant-btn-circle):not(.ant-btn-circle-outline) {
  padding-left: 24px;
}
.ant-btn-sm.ant-btn-loading:not(.ant-btn-circle):not(.ant-btn-circle-outline) .anticon {
  margin-left: -17px;
}
.ant-btn-group {
  position: relative;
  display: inline-block;
}
.ant-btn-group > .ant-btn {
  position: relative;
  z-index: 1;
}
.ant-btn-group > .ant-btn:hover,
.ant-btn-group > .ant-btn:focus,
.ant-btn-group > .ant-btn:active,
.ant-btn-group > .ant-btn.active {
  z-index: 2;
}
.ant-btn-group > .ant-btn:disabled {
  z-index: 0;
}
.ant-btn-group-lg > .ant-btn {
  padding: 0 15px;
  font-size: 14px;
  border-radius: 4px;
  height: 32px;
}
.ant-btn-group-sm > .ant-btn {
  padding: 0 7px;
  font-size: 12px;
  border-radius: 4px;
  height: 22px;
}
.ant-btn-group-sm > .ant-btn > .anticon {
  font-size: 12px;
}
.ant-btn-group .ant-btn + .ant-btn,
.ant-btn + .ant-btn-group,
.ant-btn-group + .ant-btn,
.ant-btn-group + .ant-btn-group {
  margin-left: -1px;
}
.ant-btn-group .ant-btn:not(:first-child):not(:last-child) {
  border-radius: 0;
  padding-left: 8px;
  padding-right: 8px;
}
.ant-btn-group > .ant-btn:first-child {
  margin-left: 0;
}
.ant-btn-group > .ant-btn:first-child:not(:last-child) {
  border-bottom-right-radius: 0;
  border-top-right-radius: 0;
  padding-right: 8px;
}
.ant-btn-group > .ant-btn:last-child:not(:first-child) {
  border-bottom-left-radius: 0;
  border-top-left-radius: 0;
  padding-left: 8px;
}
.ant-btn-group > .ant-btn-group {
  float: left;
}
.ant-btn-group > .ant-btn-group:not(:first-child):not(:last-child) > .ant-btn {
  border-radius: 0;
}
.ant-btn-group > .ant-btn-group:first-child:not(:last-child) > .ant-btn:last-child {
  border-bottom-right-radius: 0;
  border-top-right-radius: 0;
  padding-right: 8px;
}
.ant-btn-group > .ant-btn-group:last-child:not(:first-child) > .ant-btn:first-child {
  border-bottom-left-radius: 0;
  border-top-left-radius: 0;
  padding-left: 8px;
}
.ant-btn:not(.ant-btn-circle):not(.ant-btn-circle-outline).ant-btn-icon-only {
  padding-left: 8px;
  padding-right: 8px;
}
.ant-btn:focus > span,
.ant-btn:active > span {
  position: relative;
}
.ant-btn > .anticon + span,
.ant-btn > span + .anticon {
  margin-left: 0.5em;
}
.ant-btn-clicked:after {
  content: '';
  position: absolute;
  top: -1px;
  left: -1px;
  bottom: -1px;
  right: -1px;
  border-radius: inherit;
  border: 0 solid #3FCE9E;
  opacity: 0.4;
  animation: buttonEffect .4s;
  display: block;
}
.ant-btn-danger.ant-btn-clicked:after {
  border-color: #f04134;
}
.ant-btn-background-ghost {
  background: transparent !important;
  border-color: #fff;
  color: #fff;
}
.ant-btn-background-ghost.ant-btn-primary {
  color: #3FCE9E;
  background-color: transparent;
  border-color: #3FCE9E;
}
.ant-btn-background-ghost.ant-btn-primary > a:only-child {
  color: currentColor;
}
.ant-btn-background-ghost.ant-btn-primary > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-btn-background-ghost.ant-btn-primary:hover,
.ant-btn-background-ghost.ant-btn-primary:focus {
  color: #6ddab5;
  background-color: transparent;
  border-color: #6ddab5;
}
.ant-btn-background-ghost.ant-btn-primary:hover > a:only-child,
.ant-btn-background-ghost.ant-btn-primary:focus > a:only-child {
  color: currentColor;
}
.ant-btn-background-ghost.ant-btn-primary:hover > a:only-child:after,
.ant-btn-background-ghost.ant-btn-primary:focus > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-btn-background-ghost.ant-btn-primary:active,
.ant-btn-background-ghost.ant-btn-primary.active {
  color: #36b38c;
  background-color: transparent;
  border-color: #36b38c;
}
.ant-btn-background-ghost.ant-btn-primary:active > a:only-child,
.ant-btn-background-ghost.ant-btn-primary.active > a:only-child {
  color: currentColor;
}
.ant-btn-background-ghost.ant-btn-primary:active > a:only-child:after,
.ant-btn-background-ghost.ant-btn-primary.active > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-btn-background-ghost.ant-btn-primary.disabled,
.ant-btn-background-ghost.ant-btn-primary[disabled],
.ant-btn-background-ghost.ant-btn-primary.disabled:hover,
.ant-btn-background-ghost.ant-btn-primary[disabled]:hover,
.ant-btn-background-ghost.ant-btn-primary.disabled:focus,
.ant-btn-background-ghost.ant-btn-primary[disabled]:focus,
.ant-btn-background-ghost.ant-btn-primary.disabled:active,
.ant-btn-background-ghost.ant-btn-primary[disabled]:active,
.ant-btn-background-ghost.ant-btn-primary.disabled.active,
.ant-btn-background-ghost.ant-btn-primary[disabled].active {
  color: rgba(0, 0, 0, 0.25);
  background-color: #f7f7f7;
  border-color: #d9d9d9;
}
.ant-btn-background-ghost.ant-btn-primary.disabled > a:only-child,
.ant-btn-background-ghost.ant-btn-primary[disabled] > a:only-child,
.ant-btn-background-ghost.ant-btn-primary.disabled:hover > a:only-child,
.ant-btn-background-ghost.ant-btn-primary[disabled]:hover > a:only-child,
.ant-btn-background-ghost.ant-btn-primary.disabled:focus > a:only-child,
.ant-btn-background-ghost.ant-btn-primary[disabled]:focus > a:only-child,
.ant-btn-background-ghost.ant-btn-primary.disabled:active > a:only-child,
.ant-btn-background-ghost.ant-btn-primary[disabled]:active > a:only-child,
.ant-btn-background-ghost.ant-btn-primary.disabled.active > a:only-child,
.ant-btn-background-ghost.ant-btn-primary[disabled].active > a:only-child {
  color: currentColor;
}
.ant-btn-background-ghost.ant-btn-primary.disabled > a:only-child:after,
.ant-btn-background-ghost.ant-btn-primary[disabled] > a:only-child:after,
.ant-btn-background-ghost.ant-btn-primary.disabled:hover > a:only-child:after,
.ant-btn-background-ghost.ant-btn-primary[disabled]:hover > a:only-child:after,
.ant-btn-background-ghost.ant-btn-primary.disabled:focus > a:only-child:after,
.ant-btn-background-ghost.ant-btn-primary[disabled]:focus > a:only-child:after,
.ant-btn-background-ghost.ant-btn-primary.disabled:active > a:only-child:after,
.ant-btn-background-ghost.ant-btn-primary[disabled]:active > a:only-child:after,
.ant-btn-background-ghost.ant-btn-primary.disabled.active > a:only-child:after,
.ant-btn-background-ghost.ant-btn-primary[disabled].active > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-btn-background-ghost.ant-btn-danger {
  color: #f04134;
  background-color: transparent;
  border-color: #f04134;
}
.ant-btn-background-ghost.ant-btn-danger > a:only-child {
  color: currentColor;
}
.ant-btn-background-ghost.ant-btn-danger > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-btn-background-ghost.ant-btn-danger:hover,
.ant-btn-background-ghost.ant-btn-danger:focus {
  color: #f46e65;
  background-color: transparent;
  border-color: #f46e65;
}
.ant-btn-background-ghost.ant-btn-danger:hover > a:only-child,
.ant-btn-background-ghost.ant-btn-danger:focus > a:only-child {
  color: currentColor;
}
.ant-btn-background-ghost.ant-btn-danger:hover > a:only-child:after,
.ant-btn-background-ghost.ant-btn-danger:focus > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-btn-background-ghost.ant-btn-danger:active,
.ant-btn-background-ghost.ant-btn-danger.active {
  color: #d73435;
  background-color: transparent;
  border-color: #d73435;
}
.ant-btn-background-ghost.ant-btn-danger:active > a:only-child,
.ant-btn-background-ghost.ant-btn-danger.active > a:only-child {
  color: currentColor;
}
.ant-btn-background-ghost.ant-btn-danger:active > a:only-child:after,
.ant-btn-background-ghost.ant-btn-danger.active > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-btn-background-ghost.ant-btn-danger.disabled,
.ant-btn-background-ghost.ant-btn-danger[disabled],
.ant-btn-background-ghost.ant-btn-danger.disabled:hover,
.ant-btn-background-ghost.ant-btn-danger[disabled]:hover,
.ant-btn-background-ghost.ant-btn-danger.disabled:focus,
.ant-btn-background-ghost.ant-btn-danger[disabled]:focus,
.ant-btn-background-ghost.ant-btn-danger.disabled:active,
.ant-btn-background-ghost.ant-btn-danger[disabled]:active,
.ant-btn-background-ghost.ant-btn-danger.disabled.active,
.ant-btn-background-ghost.ant-btn-danger[disabled].active {
  color: rgba(0, 0, 0, 0.25);
  background-color: #f7f7f7;
  border-color: #d9d9d9;
}
.ant-btn-background-ghost.ant-btn-danger.disabled > a:only-child,
.ant-btn-background-ghost.ant-btn-danger[disabled] > a:only-child,
.ant-btn-background-ghost.ant-btn-danger.disabled:hover > a:only-child,
.ant-btn-background-ghost.ant-btn-danger[disabled]:hover > a:only-child,
.ant-btn-background-ghost.ant-btn-danger.disabled:focus > a:only-child,
.ant-btn-background-ghost.ant-btn-danger[disabled]:focus > a:only-child,
.ant-btn-background-ghost.ant-btn-danger.disabled:active > a:only-child,
.ant-btn-background-ghost.ant-btn-danger[disabled]:active > a:only-child,
.ant-btn-background-ghost.ant-btn-danger.disabled.active > a:only-child,
.ant-btn-background-ghost.ant-btn-danger[disabled].active > a:only-child {
  color: currentColor;
}
.ant-btn-background-ghost.ant-btn-danger.disabled > a:only-child:after,
.ant-btn-background-ghost.ant-btn-danger[disabled] > a:only-child:after,
.ant-btn-background-ghost.ant-btn-danger.disabled:hover > a:only-child:after,
.ant-btn-background-ghost.ant-btn-danger[disabled]:hover > a:only-child:after,
.ant-btn-background-ghost.ant-btn-danger.disabled:focus > a:only-child:after,
.ant-btn-background-ghost.ant-btn-danger[disabled]:focus > a:only-child:after,
.ant-btn-background-ghost.ant-btn-danger.disabled:active > a:only-child:after,
.ant-btn-background-ghost.ant-btn-danger[disabled]:active > a:only-child:after,
.ant-btn-background-ghost.ant-btn-danger.disabled.active > a:only-child:after,
.ant-btn-background-ghost.ant-btn-danger[disabled].active > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
@keyframes buttonEffect {
  to {
    opacity: 0;
    top: -6px;
    left: -6px;
    bottom: -6px;
    right: -6px;
    border-width: 6px;
  }
}
`
                ]
            },] },
];
/**
 * @nocollapse
 */
NzButtonComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
];
NzButtonComponent.propDecorators = {
    'nzGhost': [{ type: Input },],
    'nzType': [{ type: Input },],
    'nzShape': [{ type: Input },],
    'nzSize': [{ type: Input },],
    'nzLoading': [{ type: Input },],
    '_onClick': [{ type: HostListener, args: ['click',] },],
};

class NzButtonModule {
}
NzButtonModule.decorators = [
    { type: NgModule, args: [{
                declarations: [NzButtonComponent, NzButtonGroupComponent],
                exports: [NzButtonComponent, NzButtonGroupComponent],
                imports: [CommonModule]
            },] },
];
/**
 * @nocollapse
 */
NzButtonModule.ctorParameters = () => [];

const FadeAnimation = trigger('fadeAnimation', [
    state('void', style({ opacity: 0 })),
    state('true', style({ opacity: 1 })),
    state('false', style({ opacity: 0 })),
    transition('* => true', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),
    transition('* => void', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),
]);

/**
 * @author MoXun
 */
class NzAlertComponent {
    constructor() {
        this._display = true;
        this.nzType = 'info';
        this.nzBanner = false;
        this.nzCloseable = false;
        this.nzShowIcon = false;
        this.nzOnClose = new EventEmitter();
    }
    /**
     * @return {?}
     */
    get _classMap() {
        const /** @type {?} */ antAlert = 'ant-alert';
        return {
            [`${antAlert}`]: true,
            [`${antAlert}-${this.nzType}`]: true,
            [`${antAlert}-no-icon`]: !this.nzShowIcon,
            [`${antAlert}-banner`]: this.nzBanner,
            [`${antAlert}-with-description`]: !!this.nzDescription
        };
    }
    /**
     * @return {?}
     */
    closeAlert() {
        this._display = false;
        this.nzOnClose.emit(true);
    }
}
NzAlertComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-alert',
                encapsulation: ViewEncapsulation.None,
                animations: [FadeAnimation],
                template: `
    <div [ngClass]="_classMap" *ngIf="_display" [@fadeAnimation]>
      <i
        class="ant-alert-icon anticon"
        [class.anticon-cross-circle-o]="nzType==='error'"
        [class.anticon-check-circle-o]="nzType==='success'"
        [class.anticon-info-circle-o]="nzType==='info'"
        [class.anticon-exclamation-circle-o]="nzType==='warning'"
        *ngIf="nzShowIcon&&nzDescription"></i>
      <i
        class="ant-alert-icon anticon"
        [class.anticon-cross-circle]="nzType==='error'"
        [class.anticon-check-circle]="nzType==='success'"
        [class.anticon-info-circle]="nzType==='info'"
        [class.anticon-exclamation-circle]="nzType==='warning'"
        *ngIf="nzShowIcon&&!nzDescription"></i>
      <ng-template [ngIf]="nzMessage">
        <span class="ant-alert-message">{{nzMessage}}</span>
      </ng-template>
      <ng-template [ngIf]="!nzMessage">
        <ng-content select="[alert-body]"></ng-content>
      </ng-template>
      <ng-template [ngIf]="nzDescription">
        <span class="ant-alert-description">{{nzDescription}}</span>
      </ng-template>
      <ng-template [ngIf]="!nzDescription">
        <ng-content select="alert-description"></ng-content>
      </ng-template>
      <ng-template [ngIf]="nzCloseable || nzCloseText">
        <a *ngIf="nzCloseable" (click)="closeAlert($event)" class="ant-alert-close-icon">
          <i class="anticon anticon-cross"></i>
        </a>
        <a *ngIf="nzCloseText" class="ant-alert-close-icon" (click)="closeAlert()">{{nzCloseText}}</a>
      </ng-template>
    </div>
  `,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-alert {
  position: relative;
  padding: 8px 48px 8px 38px;
  border-radius: 4px;
  color: rgba(0, 0, 0, 0.65);
  font-size: 12px;
  line-height: 1.5;
}
.ant-alert.ant-alert-no-icon {
  padding: 8px 48px 8px 16px;
}
.ant-alert-icon {
  font-size: 14px;
  top: 10px;
  left: 16px;
  position: absolute;
}
.ant-alert-description {
  font-size: 12px;
  line-height: 21px;
  display: none;
}
.ant-alert-success {
  border: 1px solid #cfefdf;
  background-color: #ebf8f2;
}
.ant-alert-success .ant-alert-icon {
  color: #00a854;
}
.ant-alert-info {
  border: 1px solid #dbf6ed;
  background-color: #f0fbf7;
}
.ant-alert-info .ant-alert-icon {
  color: #3FCE9E;
}
.ant-alert-warning {
  border: 1px solid #fff3cf;
  background-color: #fffaeb;
}
.ant-alert-warning .ant-alert-icon {
  color: #ffbf00;
}
.ant-alert-error {
  border: 1px solid #fcdbd9;
  background-color: #fef0ef;
}
.ant-alert-error .ant-alert-icon {
  color: #f04134;
}
.ant-alert-close-icon {
  font-size: 12px;
  position: absolute;
  right: 16px;
  top: 10px;
  height: 12px;
  line-height: 12px;
  overflow: hidden;
  cursor: pointer;
}
.ant-alert-close-icon .anticon-cross {
  color: rgba(0, 0, 0, 0.43);
  transition: color .3s ease;
}
.ant-alert-close-icon .anticon-cross:hover {
  color: #404040;
}
.ant-alert-close-text {
  position: absolute;
  right: 16px;
}
.ant-alert-with-description {
  padding: 16px 16px 16px 60px;
  position: relative;
  border-radius: 4px;
  color: rgba(0, 0, 0, 0.65);
  line-height: 1.5;
}
.ant-alert-with-description.ant-alert-no-icon {
  padding: 16px;
}
.ant-alert-with-description .ant-alert-icon {
  position: absolute;
  top: 16px;
  left: 20px;
  font-size: 24px;
}
.ant-alert-with-description .ant-alert-close-icon {
  position: absolute;
  top: 16px;
  right: 16px;
  cursor: pointer;
  font-size: 12px;
}
.ant-alert-with-description .ant-alert-message {
  font-size: 14px;
  color: rgba(0, 0, 0, 0.85);
  display: block;
  margin-bottom: 4px;
}
.ant-alert-with-description .ant-alert-description {
  display: block;
}
.ant-alert.ant-alert-close {
  height: 0 !important;
  margin: 0;
  padding-top: 0;
  padding-bottom: 0;
  transition: all 0.3s cubic-bezier(0.78, 0.14, 0.15, 0.86);
  transform-origin: 50% 0;
}
.ant-alert-slide-up-leave {
  animation: antAlertSlideUpOut 0.3s cubic-bezier(0.78, 0.14, 0.15, 0.86);
  animation-fill-mode: both;
}
.ant-alert-banner {
  border-radius: 0;
  border: 0;
  margin-bottom: 0;
}
@keyframes antAlertSlideUpIn {
  0% {
    opacity: 0;
    transform-origin: 0% 0%;
    transform: scaleY(0);
  }
  100% {
    opacity: 1;
    transform-origin: 0% 0%;
    transform: scaleY(1);
  }
}
@keyframes antAlertSlideUpOut {
  0% {
    opacity: 1;
    transform-origin: 0% 0%;
    transform: scaleY(1);
  }
  100% {
    opacity: 0;
    transform-origin: 0% 0%;
    transform: scaleY(0);
  }
}
`,
                    `nz-alert {
  display: block;
}
`
                ]
            },] },
];
/**
 * @nocollapse
 */
NzAlertComponent.ctorParameters = () => [];
NzAlertComponent.propDecorators = {
    'nzType': [{ type: Input },],
    'nzBanner': [{ type: Input },],
    'nzCloseable': [{ type: Input },],
    'nzDescription': [{ type: Input },],
    'nzShowIcon': [{ type: Input },],
    'nzCloseText': [{ type: Input },],
    'nzMessage': [{ type: Input },],
    'nzOnClose': [{ type: Output },],
};

class NzAlertModule {
}
NzAlertModule.decorators = [
    { type: NgModule, args: [{
                declarations: [NzAlertComponent],
                exports: [NzAlertComponent],
                imports: [CommonModule]
            },] },
];
/**
 * @nocollapse
 */
NzAlertModule.ctorParameters = () => [];

class NzBadgeComponent {
    constructor() {
        this._showZero = false;
        this.countArray = [];
        this.countSingleArray = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
        this._nzBadge = true;
        this.nzOverflowCount = 99;
        this.nzDot = false;
    }
    /**
     * @return {?}
     */
    get setNoWrapper() {
        return !this.content;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzShowZero(value) {
        if (value === '') {
            this._showZero = true;
        }
        else {
            this._showZero = (value);
        }
    }
    /**
     * @return {?}
     */
    get nzShowZero() {
        return this._showZero;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzCount(value) {
        if (value < 0) {
            this.count = 0;
        }
        else {
            this.count = value;
        }
        this.countArray = this.count.toString().split('');
    }
    /**
     * @return {?}
     */
    get nzCount() {
        return this.count;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.maxNumberArray = this.nzOverflowCount.toString().split('');
    }
}
NzBadgeComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-badge',
                encapsulation: ViewEncapsulation.None,
                animations: [
                    trigger('enterLeave', [
                        transition('void => *', [
                            style({ opacity: 0 }),
                            animate('0.3s cubic-bezier(0.12, 0.4, 0.29, 1.46)')
                        ]),
                        transition('* => void', [
                            style({ opacity: 1 }),
                            animate('0.3s cubic-bezier(0.12, 0.4, 0.29, 1.46)')
                        ])
                    ])
                ],
                template: `<ng-template *ngIf="content" [ngTemplateOutlet]="content"></ng-template><span class="ant-badge-status-dot ant-badge-status-{{nzStatus}}" *ngIf="nzStatus"></span><span class="ant-badge-status-text" *ngIf="nzText">{{nzText}}</span><sup [@enterLeave] [ngStyle]="nzStyle" *ngIf="(nzDot)||(nzCount>0)||((nzCount==0)&&nzShowZero)" data-show="true" class="ant-scroll-number" [class.ant-badge-count]="!nzDot" [class.ant-badge-dot]="nzDot"><ng-template ngFor let-number [ngForOf]="maxNumberArray" let-i="index"><span *ngIf="nzCount<=nzOverflowCount" class="ant-scroll-number-only" [style.transform]="'translateY('+((-countArray[i]*100))+'%)'"><ng-template [ngIf]="(!nzDot)&&(countArray[i]!=null)"><p *ngFor="let p of countSingleArray" [class.current]="p==countArray[i]">{{p}}</p></ng-template></span></ng-template><ng-template [ngIf]="nzCount>nzOverflowCount">{{nzOverflowCount}}+</ng-template></sup>`,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-badge {
  position: relative;
  display: inline-block;
  line-height: 1;
  vertical-align: middle;
}
.ant-badge-count {
  position: absolute;
  transform: translateX(-50%);
  top: -10px;
  height: 20px;
  border-radius: 10px;
  min-width: 20px;
  background: #f04134;
  color: #fff;
  line-height: 20px;
  text-align: center;
  padding: 0 6px;
  font-size: 12px;
  white-space: nowrap;
  transform-origin: -10% center;
  font-family: tahoma;
}
.ant-badge-count a,
.ant-badge-count a:hover {
  color: #fff;
}
.ant-badge-dot {
  position: absolute;
  transform: translateX(-50%);
  transform-origin: 0 center;
  top: -4px;
  height: 8px;
  width: 8px;
  border-radius: 100%;
  background: #f04134;
  z-index: 10;
  box-shadow: 0 0 0 1px #fff;
}
.ant-badge-status {
  line-height: inherit;
  vertical-align: baseline;
}
.ant-badge-status-dot {
  width: 8px;
  height: 8px;
  display: inline-block;
  border-radius: 50%;
}
.ant-badge-status-success {
  background-color: #00a854;
}
.ant-badge-status-processing {
  background-color: #3FCE9E;
  position: relative;
}
.ant-badge-status-processing:after {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  border-radius: 50%;
  border: 1px solid #3FCE9E;
  content: '';
  animation: antStatusProcessing 1.2s infinite ease-in-out;
}
.ant-badge-status-default {
  background-color: #d9d9d9;
}
.ant-badge-status-error {
  background-color: #f04134;
}
.ant-badge-status-warning {
  background-color: #ffbf00;
}
.ant-badge-status-text {
  color: rgba(0, 0, 0, 0.65);
  font-size: 12px;
  margin-left: 8px;
}
.ant-badge-zoom-appear,
.ant-badge-zoom-enter {
  animation: antZoomBadgeIn 0.3s cubic-bezier(0.12, 0.4, 0.29, 1.46);
  animation-fill-mode: both;
}
.ant-badge-zoom-leave {
  animation: antZoomBadgeOut 0.3s cubic-bezier(0.71, -0.46, 0.88, 0.6);
  animation-fill-mode: both;
}
.ant-badge-not-a-wrapper .ant-badge-count {
  top: auto;
  display: block;
  position: relative;
  transform: none !important;
}
@keyframes antStatusProcessing {
  0% {
    transform: scale(0.8);
    opacity: 0.5;
  }
  100% {
    transform: scale(2.4);
    opacity: 0;
  }
}
.ant-scroll-number {
  overflow: hidden;
}
.ant-scroll-number-only {
  display: inline-block;
  transition: all 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
  height: 20px;
}
.ant-scroll-number-only > p {
  height: 20px;
}
@keyframes antZoomBadgeIn {
  0% {
    opacity: 0;
    transform: scale(0) translateX(-50%);
  }
  100% {
    transform: scale(1) translateX(-50%);
  }
}
@keyframes antZoomBadgeOut {
  0% {
    transform: scale(1) translateX(-50%);
  }
  100% {
    opacity: 0;
    transform: scale(0) translateX(-50%);
  }
}
`,
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-badge {
  position: relative;
  display: inline-block;
  line-height: 1;
  vertical-align: middle;
}
.ant-badge-count {
  position: absolute;
  transform: translateX(-50%);
  top: -10px;
  height: 20px;
  border-radius: 10px;
  min-width: 20px;
  background: #f04134;
  color: #fff;
  line-height: 20px;
  text-align: center;
  padding: 0 6px;
  font-size: 12px;
  white-space: nowrap;
  transform-origin: -10% center;
  font-family: tahoma;
}
.ant-badge-count a,
.ant-badge-count a:hover {
  color: #fff;
}
.ant-badge-dot {
  position: absolute;
  transform: translateX(-50%);
  transform-origin: 0 center;
  top: -4px;
  height: 8px;
  width: 8px;
  border-radius: 100%;
  background: #f04134;
  z-index: 10;
  box-shadow: 0 0 0 1px #fff;
}
.ant-badge-status {
  line-height: inherit;
  vertical-align: baseline;
}
.ant-badge-status-dot {
  width: 8px;
  height: 8px;
  display: inline-block;
  border-radius: 50%;
}
.ant-badge-status-success {
  background-color: #00a854;
}
.ant-badge-status-processing {
  background-color: #3FCE9E;
  position: relative;
}
.ant-badge-status-processing:after {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  border-radius: 50%;
  border: 1px solid #3FCE9E;
  content: '';
  animation: antStatusProcessing 1.2s infinite ease-in-out;
}
.ant-badge-status-default {
  background-color: #d9d9d9;
}
.ant-badge-status-error {
  background-color: #f04134;
}
.ant-badge-status-warning {
  background-color: #ffbf00;
}
.ant-badge-status-text {
  color: rgba(0, 0, 0, 0.65);
  font-size: 12px;
  margin-left: 8px;
}
.ant-badge-zoom-appear,
.ant-badge-zoom-enter {
  animation: antZoomBadgeIn 0.3s cubic-bezier(0.12, 0.4, 0.29, 1.46);
  animation-fill-mode: both;
}
.ant-badge-zoom-leave {
  animation: antZoomBadgeOut 0.3s cubic-bezier(0.71, -0.46, 0.88, 0.6);
  animation-fill-mode: both;
}
.ant-badge-not-a-wrapper .ant-badge-count {
  top: auto;
  display: block;
  position: relative;
  transform: none !important;
}
@keyframes antStatusProcessing {
  0% {
    transform: scale(0.8);
    opacity: 0.5;
  }
  100% {
    transform: scale(2.4);
    opacity: 0;
  }
}
.ant-scroll-number {
  overflow: hidden;
}
.ant-scroll-number-only {
  display: inline-block;
  transition: all 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
  height: 20px;
}
.ant-scroll-number-only > p {
  height: 20px;
}
@keyframes antZoomBadgeIn {
  0% {
    opacity: 0;
    transform: scale(0) translateX(-50%);
  }
  100% {
    transform: scale(1) translateX(-50%);
  }
}
@keyframes antZoomBadgeOut {
  0% {
    transform: scale(1) translateX(-50%);
  }
  100% {
    opacity: 0;
    transform: scale(0) translateX(-50%);
  }
}
.ant-badge-count {
  position: absolute;
  transform: translateX(50%);
  right: 0;
}
.ant-badge-dot {
  position: absolute;
  transform: translateX(50%);
  right: 0;
}
`
                ]
            },] },
];
/**
 * @nocollapse
 */
NzBadgeComponent.ctorParameters = () => [];
NzBadgeComponent.propDecorators = {
    'content': [{ type: ContentChild, args: ['content',] },],
    '_nzBadge': [{ type: HostBinding, args: ['class.ant-badge',] },],
    'setNoWrapper': [{ type: HostBinding, args: ['class.ant-badge-not-a-wrapper',] },],
    'nzOverflowCount': [{ type: Input },],
    'nzShowZero': [{ type: Input },],
    'nzDot': [{ type: Input },],
    'nzText': [{ type: Input },],
    'nzStyle': [{ type: Input },],
    'nzStatus': [{ type: Input }, { type: HostBinding, args: ['class.ant-badge-status',] },],
    'nzCount': [{ type: Input },],
};

class NzBadgeModule {
}
NzBadgeModule.decorators = [
    { type: NgModule, args: [{
                declarations: [NzBadgeComponent],
                exports: [NzBadgeComponent],
                imports: [CommonModule]
            },] },
];
/**
 * @nocollapse
 */
NzBadgeModule.ctorParameters = () => [];

class NzCalendarComponent {
    /**
     * @param {?} _elementRef
     */
    constructor(_elementRef) {
        this._elementRef = _elementRef;
        this._weeksCalendar = [];
        this._quartersCalendar = [];
        this._listOfWeekName = [];
        this._listOfMonthName = [];
        this._listOfYearName = [];
        this._yearUnit = '年';
        this._monthUnit = '月';
        this._showMonth = moment(new Date()).month();
        this._showYear = moment(new Date()).year();
        this._value = new Date();
        this._locale = 'zh-cn';
        this.nzClickDay = new EventEmitter();
        this.nzClickMonth = new EventEmitter();
        this.nzClearTime = true;
        this.nzDatePicker = false;
        this.nzMode = 'year';
        this.nzFullScreen = true;
        this.nzShowHeader = true;
        this._el = this._elementRef.nativeElement;
    }
    /**
     * @return {?}
     */
    get nzValue() {
        return this._value || new Date();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzValue(value) {
        if (this._value === value) {
            return;
        }
        this._value = value || new Date();
        this._showMonth = moment(this._value).month();
        this._showYear = moment(this._value).year();
        this._buildCalendar();
    }
    /**
     * @return {?}
     */
    get nzShowYear() {
        return this._showYear;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzShowYear(value) {
        this._showYear = value;
        this._buildCalendar();
    }
    /**
     * @return {?}
     */
    get nzShowMonth() {
        return this._showMonth;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzShowMonth(value) {
        this._showMonth = value;
        this._buildCalendar();
    }
    /**
     * @return {?}
     */
    get nzLocale() {
        return this._locale;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzLocale(value) {
        this._locale = value;
        moment.locale(this._locale);
    }
    /**
     * @param {?} date
     * @return {?}
     */
    _removeTime(date) {
        if (this.nzClearTime) {
            return date.hour(0).minute(0).second(0).millisecond(0);
        }
        else {
            return date;
        }
    }
    ;
    /**
     * @param {?} $event
     * @param {?} day
     * @return {?}
     */
    _clickDay($event, day) {
        $event.preventDefault();
        $event.stopPropagation();
        if (day.disabled) {
            return;
        }
        this.nzClickDay.emit(day);
    }
    ;
    /**
     * @param {?} $event
     * @param {?} month
     * @return {?}
     */
    _clickMonth($event, month) {
        $event.preventDefault();
        $event.stopPropagation();
        this.nzClickMonth.emit(month);
    }
    ;
    /**
     * @param {?} d
     * @return {?}
     */
    _buildMonth(d) {
        const /** @type {?} */ weeks = [];
        const /** @type {?} */ _rawDate = this._removeTime(d);
        const /** @type {?} */ start = _rawDate.clone().date(1).day(0);
        const /** @type {?} */ month = _rawDate.clone();
        let /** @type {?} */ done = false;
        const /** @type {?} */ date = start.clone();
        let /** @type {?} */ monthIndex = date.month();
        let /** @type {?} */ count = 0;
        while (!done) {
            weeks.push({ days: this._buildWeek(date.clone(), month) });
            date.add(1, 'w');
            done = count++ > 4;
            monthIndex = date.month();
        }
        return weeks;
    }
    ;
    /**
     * @param {?} date
     * @param {?} month
     * @return {?}
     */
    _buildWeek(date, month) {
        const /** @type {?} */ days = [];
        for (let /** @type {?} */ i = 0; i < 7; i++) {
            days.push({
                number: date.date(),
                isLastMonth: date.month() < month.month(),
                isNextMonth: date.month() > month.month(),
                isCurrentDay: date.isSame(new Date(), 'day'),
                isSelectedDay: date.isSame(this.nzValue, 'day'),
                title: date.format('YYYY-MM-DD'),
                date: date,
                disabled: this.nzDisabledDate && this.nzDisabledDate(date.toDate()),
                firstDisabled: this.nzDisabledDate && this.nzDisabledDate(date.toDate()) && (date.day() === 0 || (date.day() !== 0 && this.nzDisabledDate && !this.nzDisabledDate(date.clone().subtract(1, 'day').toDate()))),
                lastDisabled: this.nzDisabledDate && this.nzDisabledDate(date.toDate()) && (date.day() === 6 || (date.day() !== 6 && this.nzDisabledDate && !this.nzDisabledDate(date.clone().add(1, 'day').toDate())))
            });
            date = date.clone();
            date.add(1, 'd');
        }
        return days;
    }
    ;
    /**
     * @param {?} date
     * @return {?}
     */
    _buildYears(date) {
        const /** @type {?} */ quarters = [];
        let /** @type {?} */ months = [];
        for (let /** @type {?} */ i = 0; i < 12; i++) {
            months.push({
                index: i,
                name: this._listOfMonthName[i],
                isCurrentMonth: moment(new Date()).month() === i && date.isSame(new Date(), 'year'),
                isSelectedMonth: this._showMonth === i
            });
            if ((i + 1) % 3 === 0) {
                quarters.push(months);
                months = [];
            }
        }
        return quarters;
    }
    ;
    /**
     * @return {?}
     */
    _buildCalendar() {
        moment.locale(this._locale);
        /** TODO replace with real i18n*/
        if (this._locale !== 'zh-cn') {
            try {
                this._yearUnit = moment.duration(12, 'month').humanize().split(' ')[1][0].toUpperCase() + moment.duration(12, 'month').humanize().split(' ')[1].slice(1, moment.duration(12, 'month').humanize().split(' ')[1].length);
                this._monthUnit = moment.duration(4, 'week').humanize().split(' ')[1][0].toUpperCase() + moment.duration(4, 'week').humanize().split(' ')[1].slice(1, moment.duration(4, 'week').humanize().split(' ')[1].length);
            }
            catch (e) {
            }
        }
        this._listOfYearName = this._generateYears(this._showYear);
        this._listOfWeekName = moment.weekdaysMin();
        this._listOfMonthName = moment.months();
        const /** @type {?} */ date = moment(this.nzValue).year(this._showYear).month(this._showMonth);
        this._weeksCalendar = this._buildMonth(date);
        this._quartersCalendar = this._buildYears(date);
    }
    ;
    /**
     * @param {?} year
     * @return {?}
     */
    _generateYears(year) {
        const /** @type {?} */ listOfYears = [];
        for (const /** @type {?} */ i of Array.from(Array(20).keys())) {
            listOfYears.push(i - 10 + year);
        }
        return listOfYears;
    }
    ;
    /**
     * @return {?}
     */
    ngOnInit() {
        this._buildCalendar();
    }
}
NzCalendarComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-calendar',
                encapsulation: ViewEncapsulation.None,
                template: `
    <div
      [class.ant-fullcalendar-fullscreen]="nzFullScreen"
      [class.ant-patch-full-height]="nzDatePicker">
      <div class="ant-fullcalendar-header" *ngIf="nzShowHeader">
        <nz-select
          class="ant-fullcalendar-year-select" style="width: 75px;"
          [ngModel]="_showYear"
          (ngModelChange)="_showYear = $event;_buildCalendar()">
          <nz-option
            *ngFor="let year of _listOfYearName"
            [nzLabel]="year"
            [nzValue]="year">
          </nz-option>
        </nz-select>
        <nz-select
          class="ant-fullcalendar-month-select"
          style="width: 70px;"
          *ngIf="nzMode == 'year'"
          [ngModel]="_showMonth"
          (ngModelChange)="_showMonth = $event;_buildCalendar()">
          <nz-option
            *ngFor="let _month of _listOfMonthName;let i = index;"
            [nzLabel]="_month"
            [nzValue]="i">
          </nz-option>
        </nz-select>
        <nz-radio-group [(ngModel)]="nzMode">
          <label nz-radio-button [nzValue]="'year'">
            <span>{{_yearUnit}}</span>
          </label><label nz-radio-button [nzValue]="'month'">
          <span>{{_monthUnit}}</span>
        </label>
        </nz-radio-group>
      </div>
      <div
        [class.ant-fullcalendar-fullscreen]="nzFullScreen"
        [class.ant-fullcalendar]="!nzDatePicker"
        [class.ant-fullcalendar-full]="!nzDatePicker"
        [class.ant-patch-full-height]="nzDatePicker">
        <div
          [class.ant-fullcalendar-calendar-body]="!nzDatePicker"
          [class.ant-calendar-body]="!nzDatePicker"
          [class.ant-patch-full-height]="nzDatePicker">
          <table
            [class.ant-fullcalendar-table]="!nzDatePicker"
            [class.ant-calendar-table]="nzDatePicker"
            [class.ant-patch-full-height]="nzDatePicker"
            *ngIf="nzMode == 'year'">
            <thead>
              <tr>
                <th
                  *ngFor="let _min of _listOfWeekName"
                  [class.ant-fullcalendar-column-header]="!nzDatePicker"
                  [class.ant-calendar-column-header]="nzDatePicker">
                  <span class="ant-fullcalendar-column-header-inner">{{_min}}</span>
                </th>
              </tr>
            </thead>
            <tbody
              [class.ant-fullcalendartbody]="!nzDatePicker"
              [class.ant-calendartbody]="nzDatePicker">
              <tr *ngFor="let week of _weeksCalendar">
                <ng-template [ngIf]="!nzDatePicker">
                  <td
                    [attr.title]="day.title"
                    *ngFor="let day of week.days"
                    [class.ant-fullcalendar-cell]="!nzDatePicker"
                    [class.ant-calendar-cell]="nzDatePicker"
                    [class.ant-fullcalendar-last-month-cell]="day.isLastMonth"
                    [class.ant-fullcalendar-next-month-btn-day]="day.isNextMonth"
                    [class.ant-fullcalendar-selected-day]="day.isSelectedDay"
                    [class.ant-fullcalendar-today]="day.isCurrentDay">
                    <div class="ant-fullcalendar-date">
                      <div class="ant-fullcalendar-value" (click)="_clickDay($event,day)">{{day.number}}</div>
                      <div class="ant-fullcalendar-content">
                        <ng-template
                          *ngIf="dateCell"
                          [ngTemplateOutlet]="dateCell"
                          [ngTemplateOutletContext]="{ $implicit: day}">
                        </ng-template>
                      </div>
                    </div>
                  </td>
                </ng-template>
                <ng-template [ngIf]="nzDatePicker">
                  <td
                    [attr.title]="day.title"
                    *ngFor="let day of week.days"
                    class="ant-calendar-cell"
                    [class.ant-calendar-disabled-cell-first-of-row]="day.firstDisabled"
                    [class.ant-calendar-disabled-cell-last-of-row]="day.lastDisabled"
                    [class.ant-calendar-disabled-cell]="day.disabled"
                    [class.ant-calendar-last-month-cell]="day.isLastMonth"
                    [class.ant-calendar-next-month-btn-day]="day.isNextMonth"
                    [class.ant-calendar-selected-day]="day.isSelectedDay"
                    [class.ant-calendar-today]="day.isCurrentDay">
                    <div class="ant-calendar-date" (click)="_clickDay($event,day)">{{day.number}}</div>
                  </td>
                </ng-template>
              </tr>
            </tbody>
          </table>
          <table
            [class.ant-fullcalendar-month-panel-table]="!nzDatePicker"
            [class.ant-calendar-month-panel-table]="nzDatePicker"
            *ngIf="nzMode == 'month'">
            <tbody class="ant-fullcalendar-month-panel-tbody">
              <tr *ngFor="let quarter of _quartersCalendar">
                <ng-template [ngIf]="!nzDatePicker">
                  <td
                    *ngFor="let month of quarter"
                    [attr.title]="month.name"
                    class="ant-fullcalendar-month-panel-cell"
                    [class.ant-fullcalendar-month-panel-selected-cell]="month.isSelectedMonth"
                    [class.ant-fullcalendar-month-panel-current-cell]="month.isCurrentMonth">
                    <div class="ant-fullcalendar-month">
                      <div class="ant-fullcalendar-value" (click)="_clickMonth($event,month)">{{month.name}}</div>
                      <div class="ant-fullcalendar-content">
                        <ng-template
                          *ngIf="monthCell"
                          [ngTemplateOutlet]="monthCell"
                          [ngTemplateOutletContext]="{ $implicit: month}">
                        </ng-template>
                      </div>
                    </div>
                  </td>
                </ng-template>
                <ng-template [ngIf]="nzDatePicker">
                  <td
                    *ngFor="let month of quarter"
                    [attr.title]="month.name"
                    class="ant-calendar-month-panel-cell"
                    [class.ant-calendar-month-panel-selected-cell]="month.isSelectedMonth"
                    [class.ant-calendar-month-panel-current-cell]="month.isCurrentMonth">
                    <div class="ant-calendar-month-panel-month" (click)="_clickMonth($event,month)">
                      {{month.name}}
                    </div>
                  </td>
                </ng-template>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
    </div>`,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-fullcalendar {
  font-size: 12px;
  line-height: 1.5;
  outline: none;
  border-top: 1px solid #d9d9d9;
}
.ant-fullcalendar-month-select {
  margin-left: 5px;
}
.ant-fullcalendar-header {
  padding: 11px 16px 11px 0;
  text-align: right;
}
.ant-fullcalendar-header .ant-select-dropdown {
  text-align: left;
}
.ant-fullcalendar-header .ant-radio-group {
  margin-left: 8px;
  text-align: left;
}
.ant-fullcalendar-header label.ant-radio-button {
  height: 22px;
  line-height: 20px;
  padding: 0 10px;
}
.ant-fullcalendar-date-panel {
  position: relative;
  outline: none;
}
.ant-fullcalendar-calendar-body {
  padding: 8px 8px 14px;
}
.ant-fullcalendar table {
  border-collapse: collapse;
  max-width: 100%;
  background-color: transparent;
  width: 100%;
  height: 246px;
}
.ant-fullcalendar table,
.ant-fullcalendar th,
.ant-fullcalendar td {
  border: 0;
}
.ant-fullcalendar td {
  position: relative;
}
.ant-fullcalendar-calendar-table {
  border-spacing: 0;
  margin-bottom: 0;
}
.ant-fullcalendar-column-header {
  line-height: 18px;
  padding: 0;
  width: 33px;
  text-align: center;
}
.ant-fullcalendar-column-header .ant-fullcalendar-column-header-inner {
  display: block;
  font-weight: normal;
}
.ant-fullcalendar-week-number-header .ant-fullcalendar-column-header-inner {
  display: none;
}
.ant-fullcalendar-month,
.ant-fullcalendar-date {
  text-align: center;
  transition: all .3s;
}
.ant-fullcalendar-value {
  display: block;
  margin: 0 auto;
  color: rgba(0, 0, 0, 0.65);
  border-radius: 4px;
  width: 22px;
  height: 22px;
  padding: 0;
  background: transparent;
  line-height: 22px;
  transition: all .3s;
}
.ant-fullcalendar-value:hover {
  background: #f0fbf7;
  cursor: pointer;
}
.ant-fullcalendar-value:active {
  background: #3FCE9E;
  color: #fff;
}
.ant-fullcalendar-month-panel-cell .ant-fullcalendar-value {
  width: 48px;
}
.ant-fullcalendar-today .ant-fullcalendar-value,
.ant-fullcalendar-month-panel-current-cell .ant-fullcalendar-value {
  box-shadow: 0 0 0 1px #3FCE9E;
}
.ant-fullcalendar-selected-day .ant-fullcalendar-value,
.ant-fullcalendar-month-panel-selected-cell .ant-fullcalendar-value {
  background: #3FCE9E;
  color: #fff;
}
.ant-fullcalendar-disabled-cell-first-of-row .ant-fullcalendar-value {
  border-top-left-radius: 4px;
  border-bottom-left-radius: 4px;
}
.ant-fullcalendar-disabled-cell-last-of-row .ant-fullcalendar-value {
  border-top-right-radius: 4px;
  border-bottom-right-radius: 4px;
}
.ant-fullcalendar-last-month-cell .ant-fullcalendar-value,
.ant-fullcalendar-next-month-btn-day .ant-fullcalendar-value {
  color: rgba(0, 0, 0, 0.25);
}
.ant-fullcalendar-month-panel-table {
  table-layout: fixed;
  width: 100%;
  border-collapse: separate;
}
.ant-fullcalendar-content {
  position: absolute;
  width: 100%;
  left: 0;
  bottom: -9px;
}
.ant-fullcalendar-fullscreen {
  border-top: 0;
}
.ant-fullcalendar-fullscreen .ant-fullcalendar-table {
  table-layout: fixed;
}
.ant-fullcalendar-fullscreen .ant-fullcalendar-header .ant-radio-group {
  margin-left: 16px;
}
.ant-fullcalendar-fullscreen .ant-fullcalendar-header label.ant-radio-button {
  height: 28px;
  line-height: 26px;
}
.ant-fullcalendar-fullscreen .ant-fullcalendar-month,
.ant-fullcalendar-fullscreen .ant-fullcalendar-date {
  text-align: left;
  margin: 0 4px;
  display: block;
  color: rgba(0, 0, 0, 0.65);
  height: 116px;
  padding: 4px 8px;
  border-top: 2px solid #e9e9e9;
  transition: background .3s;
}
.ant-fullcalendar-fullscreen .ant-fullcalendar-month:hover,
.ant-fullcalendar-fullscreen .ant-fullcalendar-date:hover {
  background: #f0fbf7;
  cursor: pointer;
}
.ant-fullcalendar-fullscreen .ant-fullcalendar-month:active,
.ant-fullcalendar-fullscreen .ant-fullcalendar-date:active {
  background: #dbf6ed;
}
.ant-fullcalendar-fullscreen .ant-fullcalendar-column-header {
  text-align: right;
  padding-right: 12px;
  padding-bottom: 5px;
}
.ant-fullcalendar-fullscreen .ant-fullcalendar-value {
  text-align: right;
  background: transparent;
  width: auto;
}
.ant-fullcalendar-fullscreen .ant-fullcalendar-today .ant-fullcalendar-value {
  color: rgba(0, 0, 0, 0.65);
}
.ant-fullcalendar-fullscreen .ant-fullcalendar-month-panel-current-cell .ant-fullcalendar-month,
.ant-fullcalendar-fullscreen .ant-fullcalendar-today .ant-fullcalendar-date {
  border-top-color: #3FCE9E;
  background: transparent;
}
.ant-fullcalendar-fullscreen .ant-fullcalendar-month-panel-current-cell .ant-fullcalendar-value,
.ant-fullcalendar-fullscreen .ant-fullcalendar-today .ant-fullcalendar-value {
  box-shadow: none;
}
.ant-fullcalendar-fullscreen .ant-fullcalendar-month-panel-selected-cell .ant-fullcalendar-month,
.ant-fullcalendar-fullscreen .ant-fullcalendar-selected-day .ant-fullcalendar-date {
  background: #f0fbf7;
}
.ant-fullcalendar-fullscreen .ant-fullcalendar-month-panel-selected-cell .ant-fullcalendar-value,
.ant-fullcalendar-fullscreen .ant-fullcalendar-selected-day .ant-fullcalendar-value {
  color: #3FCE9E;
}
.ant-fullcalendar-fullscreen .ant-fullcalendar-last-month-cell .ant-fullcalendar-date,
.ant-fullcalendar-fullscreen .ant-fullcalendar-next-month-btn-day .ant-fullcalendar-date {
  color: rgba(0, 0, 0, 0.25);
}
.ant-fullcalendar-fullscreen .ant-fullcalendar-content {
  height: 90px;
  overflow-y: auto;
  position: static;
  width: auto;
  left: auto;
  bottom: auto;
}
.ant-fullcalendar-disabled-cell .ant-fullcalendar-date,
.ant-fullcalendar-disabled-cell .ant-fullcalendar-date:hover {
  cursor: not-allowed;
}
.ant-fullcalendar-disabled-cell:not(.ant-fullcalendar-today) .ant-fullcalendar-date,
.ant-fullcalendar-disabled-cell:not(.ant-fullcalendar-today) .ant-fullcalendar-date:hover {
  background: transparent;
}
.ant-fullcalendar-disabled-cell .ant-fullcalendar-value {
  color: rgba(0, 0, 0, 0.25);
  border-radius: 0;
  width: auto;
  cursor: not-allowed;
}
`,
                    `nz-calendar {
  display: block;
  position: relative;
}
.ant-patch-full-height {
  height: 100%;
}
`
                ]
            },] },
];
/**
 * @nocollapse
 */
NzCalendarComponent.ctorParameters = () => [
    { type: ElementRef, },
];
NzCalendarComponent.propDecorators = {
    'dateCell': [{ type: ContentChild, args: ['dateCell',] },],
    'monthCell': [{ type: ContentChild, args: ['monthCell',] },],
    'nzClickDay': [{ type: Output },],
    'nzClickMonth': [{ type: Output },],
    'nzClearTime': [{ type: Input },],
    'nzDatePicker': [{ type: Input }, { type: HostBinding, args: ['class.ant-patch-full-height',] },],
    'nzMode': [{ type: Input },],
    'nzFullScreen': [{ type: Input },],
    'nzShowHeader': [{ type: Input },],
    'nzDisabledDate': [{ type: Input },],
    'nzValue': [{ type: Input },],
    'nzShowYear': [{ type: Input },],
    'nzShowMonth': [{ type: Input },],
    'nzLocale': [{ type: Input },],
};

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * OverlayState is a bag of values for either the initial configuration or current state of an
 * overlay.
 */
class OverlayState {
    constructor() {
        /**
         * Custom class to add to the overlay pane.
         */
        this.panelClass = '';
        /**
         * Whether the overlay has a backdrop.
         */
        this.hasBackdrop = false;
        /**
         * Custom class to add to the backdrop
         */
        this.backdropClass = 'cdk-overlay-dark-backdrop';
        /**
         * The direction of the text in the overlay panel.
         */
        this.direction = 'ltr';
        // TODO(jelbourn): configuration still to add
        // - focus trap
        // - disable pointer events
        // - z-index
    }
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Reference to an overlay that has been created with the Overlay service.
 * Used to manipulate or dispose of said overlay.
 */
class OverlayRef {
    /**
     * @param {?} _portalHost
     * @param {?} _pane
     * @param {?} _state
     * @param {?} _scrollStrategy
     * @param {?} _ngZone
     */
    constructor(_portalHost, _pane, _state, _scrollStrategy, _ngZone) {
        this._portalHost = _portalHost;
        this._pane = _pane;
        this._state = _state;
        this._scrollStrategy = _scrollStrategy;
        this._ngZone = _ngZone;
        this._backdropElement = null;
        this._backdropClick = new Subject$1();
        this._attachments = new Subject$1();
        this._detachments = new Subject$1();
        _scrollStrategy.attach(this);
    }
    /**
     * The overlay's HTML element
     * @return {?}
     */
    get overlayElement() {
        return this._pane;
    }
    /**
     * Attaches the overlay to a portal instance and adds the backdrop.
     * @param {?} portal Portal instance to which to attach the overlay.
     * @return {?} The portal attachment result.
     */
    attach(portal) {
        const /** @type {?} */ attachResult = this._portalHost.attach(portal);
        // Update the pane element with the given state configuration.
        this._updateStackingOrder();
        this.updateSize();
        this.updateDirection();
        this.updatePosition();
        this._scrollStrategy.enable();
        // Enable pointer events for the overlay pane element.
        this._togglePointerEvents(true);
        if (this._state.hasBackdrop) {
            this._attachBackdrop();
        }
        if (this._state.panelClass) {
            this._pane.classList.add(this._state.panelClass);
        }
        // Only emit the `attachments` event once all other setup is done.
        this._attachments.next();
        return attachResult;
    }
    /**
     * Detaches an overlay from a portal.
     * @return {?} Resolves when the overlay has been detached.
     */
    detach() {
        this.detachBackdrop();
        // When the overlay is detached, the pane element should disable pointer events.
        // This is necessary because otherwise the pane element will cover the page and disable
        // pointer events therefore. Depends on the position strategy and the applied pane boundaries.
        this._togglePointerEvents(false);
        this._scrollStrategy.disable();
        const /** @type {?} */ detachmentResult = this._portalHost.detach();
        // Only emit after everything is detached.
        this._detachments.next();
        return detachmentResult;
    }
    /**
     * Cleans up the overlay from the DOM.
     * @return {?}
     */
    dispose() {
        if (this._state.positionStrategy) {
            this._state.positionStrategy.dispose();
        }
        if (this._scrollStrategy) {
            this._scrollStrategy.disable();
        }
        this.detachBackdrop();
        this._portalHost.dispose();
        this._attachments.complete();
        this._backdropClick.complete();
        this._detachments.next();
        this._detachments.complete();
    }
    /**
     * Checks whether the overlay has been attached.
     * @return {?}
     */
    hasAttached() {
        return this._portalHost.hasAttached();
    }
    /**
     * Returns an observable that emits when the backdrop has been clicked.
     * @return {?}
     */
    backdropClick() {
        return this._backdropClick.asObservable();
    }
    /**
     * Returns an observable that emits when the overlay has been attached.
     * @return {?}
     */
    attachments() {
        return this._attachments.asObservable();
    }
    /**
     * Returns an observable that emits when the overlay has been detached.
     * @return {?}
     */
    detachments() {
        return this._detachments.asObservable();
    }
    /**
     * Gets the current state config of the overlay.
     * @return {?}
     */
    getState() {
        return this._state;
    }
    /**
     * Updates the position of the overlay based on the position strategy.
     * @return {?}
     */
    updatePosition() {
        if (this._state.positionStrategy) {
            this._state.positionStrategy.apply(this._pane);
        }
    }
    /**
     * Updates the text direction of the overlay panel.
     * @return {?}
     */
    updateDirection() {
        this._pane.setAttribute('dir', this._state.direction);
    }
    /**
     * Updates the size of the overlay based on the overlay config.
     * @return {?}
     */
    updateSize() {
        if (this._state.width || this._state.width === 0) {
            this._pane.style.width = formatCssUnit(this._state.width);
        }
        if (this._state.height || this._state.height === 0) {
            this._pane.style.height = formatCssUnit(this._state.height);
        }
        if (this._state.minWidth || this._state.minWidth === 0) {
            this._pane.style.minWidth = formatCssUnit(this._state.minWidth);
        }
        if (this._state.minHeight || this._state.minHeight === 0) {
            this._pane.style.minHeight = formatCssUnit(this._state.minHeight);
        }
    }
    /**
     * Toggles the pointer events for the overlay pane element.
     * @param {?} enablePointer
     * @return {?}
     */
    _togglePointerEvents(enablePointer) {
        this._pane.style.pointerEvents = enablePointer ? 'auto' : 'none';
    }
    /**
     * Attaches a backdrop for this overlay.
     * @return {?}
     */
    _attachBackdrop() {
        this._backdropElement = document.createElement('div');
        this._backdropElement.classList.add('nz-overlay-backdrop');
        if (this._state.backdropClass) {
            this._backdropElement.classList.add(this._state.backdropClass);
        }
        // Insert the backdrop before the pane in the DOM order,
        // in order to handle stacked overlays properly.
        this._pane.parentElement.insertBefore(this._backdropElement, this._pane);
        // Forward backdrop clicks such that the consumer of the overlay can perform whatever
        // action desired when such a click occurs (usually closing the overlay).
        this._backdropElement.addEventListener('click', () => this._backdropClick.next(null));
        // Add class to fade-in the backdrop after one frame.
        requestAnimationFrame(() => {
            if (this._backdropElement) {
                this._backdropElement.classList.add('nz-overlay-backdrop-showing');
            }
        });
    }
    /**
     * Updates the stacking order of the element, moving it to the top if necessary.
     * This is required in cases where one overlay was detached, while another one,
     * that should be behind it, was destroyed. The next time both of them are opened,
     * the stacking will be wrong, because the detached element's pane will still be
     * in its original DOM position.
     * @return {?}
     */
    _updateStackingOrder() {
        if (this._pane.nextSibling) {
            this._pane.parentNode.appendChild(this._pane);
        }
    }
    /**
     * Detaches the backdrop (if any) associated with the overlay.
     * @return {?}
     */
    detachBackdrop() {
        const /** @type {?} */ backdropToDetach = this._backdropElement;
        if (backdropToDetach) {
            const /** @type {?} */ finishDetach = () => {
                // It may not be attached to anything in certain cases (e.g. unit tests).
                if (backdropToDetach && backdropToDetach.parentNode) {
                    backdropToDetach.parentNode.removeChild(backdropToDetach);
                }
                // It is possible that a new portal has been attached to this overlay since we started
                // removing the backdrop. If that is the case, only clear the backdrop reference if it
                // is still the same instance that we started to remove.
                if (this._backdropElement === backdropToDetach) {
                    this._backdropElement = null;
                }
            };
            backdropToDetach.classList.remove('nz-overlay-backdrop-showing');
            if (this._state.backdropClass) {
                backdropToDetach.classList.remove(this._state.backdropClass);
            }
            backdropToDetach.addEventListener('transitionend', finishDetach);
            // If the backdrop doesn't have a transition, the `transitionend` event won't fire.
            // In this case we make it unclickable and we try to remove it after a delay.
            backdropToDetach.style.pointerEvents = 'none';
            // Run this outside the Angular zone because there's nothing that Angular cares about.
            // If it were to run inside the Angular zone, every test that used Overlay would have to be
            // either async or fakeAsync.
            this._ngZone.runOutsideAngular(() => {
                setTimeout(finishDetach, 500);
            });
        }
    }
}
/**
 * @param {?} value
 * @return {?}
 */
function formatCssUnit(value) {
    return typeof value === 'string' ? (value) : `${value}px`;
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Time in ms to throttle the scrolling events by default.
 */
const DEFAULT_SCROLL_TIME = 20;
/**
 * Service contained all registered Scrollable references and emits an event when any one of the
 * Scrollable references emit a scrolled event.
 */
class ScrollDispatcher {
    /**
     * @param {?} _ngZone
     * @param {?} _platform
     */
    constructor(_ngZone, _platform) {
        this._ngZone = _ngZone;
        this._platform = _platform;
        /**
         * Subject for notifying that a registered scrollable reference element has been scrolled.
         */
        this._scrolled = new Subject$1();
        /**
         * Keeps track of the global `scroll` and `resize` subscriptions.
         */
        this._globalSubscription = null;
        /**
         * Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards.
         */
        this._scrolledCount = 0;
        /**
         * Map of all the scrollable references that are registered with the service and their
         * scroll event subscriptions.
         */
        this.scrollableReferences = new Map();
    }
    /**
     * Registers a Scrollable with the service and listens for its scrolled events. When the
     * scrollable is scrolled, the service emits the event in its scrolled observable.
     * @param {?} scrollable Scrollable instance to be registered.
     * @return {?}
     */
    register(scrollable) {
        const /** @type {?} */ scrollSubscription = scrollable.elementScrolled().subscribe(() => this._notify());
        this.scrollableReferences.set(scrollable, scrollSubscription);
    }
    /**
     * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.
     * @param {?} scrollable Scrollable instance to be deregistered.
     * @return {?}
     */
    deregister(scrollable) {
        const /** @type {?} */ scrollableReference = this.scrollableReferences.get(scrollable);
        if (scrollableReference) {
            scrollableReference.unsubscribe();
            this.scrollableReferences.delete(scrollable);
        }
    }
    /**
     * Subscribes to an observable that emits an event whenever any of the registered Scrollable
     * references (or window, document, or body) fire a scrolled event. Can provide a time in ms
     * to override the default "throttle" time.
     * @param {?=} auditTimeInMs
     * @param {?=} callback
     * @return {?}
     */
    scrolled(auditTimeInMs = DEFAULT_SCROLL_TIME, callback) {
        // Scroll events can only happen on the browser, so do nothing if we're not on the browser.
        if (!this._platform.isBrowser) {
            return Subscription$1.EMPTY;
        }
        // In the case of a 0ms delay, use an observable without auditTime
        // since it does add a perceptible delay in processing overhead.
        const /** @type {?} */ observable = auditTimeInMs > 0 ?
            auditTime$1.call(this._scrolled.asObservable(), auditTimeInMs) :
            this._scrolled.asObservable();
        this._scrolledCount++;
        if (!this._globalSubscription) {
            this._globalSubscription = this._ngZone.runOutsideAngular(() => {
                return merge$1(fromEvent$1(window.document, 'scroll'), fromEvent$1(window, 'resize')).subscribe(() => this._notify());
            });
        }
        // Note that we need to do the subscribing from here, in order to be able to remove
        // the global event listeners once there are no more subscriptions.
        const /** @type {?} */ subscription = observable.subscribe(callback);
        subscription.add(() => {
            this._scrolledCount--;
            if (this._globalSubscription && !this.scrollableReferences.size && !this._scrolledCount) {
                this._globalSubscription.unsubscribe();
                this._globalSubscription = null;
            }
        });
        return subscription;
    }
    /**
     * Returns all registered Scrollables that contain the provided element.
     * @param {?} elementRef
     * @return {?}
     */
    getScrollContainers(elementRef) {
        const /** @type {?} */ scrollingContainers = [];
        this.scrollableReferences.forEach((_subscription, scrollable) => {
            if (this.scrollableContainsElement(scrollable, elementRef)) {
                scrollingContainers.push(scrollable);
            }
        });
        return scrollingContainers;
    }
    /**
     * Returns true if the element is contained within the provided Scrollable.
     * @param {?} scrollable
     * @param {?} elementRef
     * @return {?}
     */
    scrollableContainsElement(scrollable, elementRef) {
        let /** @type {?} */ element = elementRef.nativeElement;
        const /** @type {?} */ scrollableElement = scrollable.getElementRef().nativeElement;
        // Traverse through the element parents until we reach null, checking if any of the elements
        // are the scrollable's element.
        do {
            if (element === scrollableElement) {
                return true;
            }
        } while (element = element.parentElement);
        return false;
    }
    /**
     * Sends a notification that a scroll event has been fired.
     * @return {?}
     */
    _notify() {
        this._scrolled.next();
    }
}
ScrollDispatcher.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
ScrollDispatcher.ctorParameters = () => [
    { type: NgZone, },
    { type: Platform, },
];
/**
 * @param {?} parentDispatcher
 * @param {?} ngZone
 * @param {?} platform
 * @return {?}
 */
function SCROLL_DISPATCHER_PROVIDER_FACTORY(parentDispatcher, ngZone, platform) {
    return parentDispatcher || new ScrollDispatcher(ngZone, platform);
}
const SCROLL_DISPATCHER_PROVIDER = {
    // If there is already a ScrollDispatcher available, use that. Otherwise, provide a new one.
    provide: ScrollDispatcher,
    deps: [[new Optional(), new SkipSelf(), ScrollDispatcher], NgZone, Platform],
    useFactory: SCROLL_DISPATCHER_PROVIDER_FACTORY
};

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Simple utility for getting the bounds of the browser viewport.
 * \@docs-private
 */
class ViewportRuler {
    /**
     * @param {?} scrollDispatcher
     */
    constructor(scrollDispatcher) {
        // Subscribe to scroll and resize events and update the document rectangle on changes.
        scrollDispatcher.scrolled(0, () => this._cacheViewportGeometry());
    }
    /**
     * Gets a ClientRect for the viewport's bounds.
     * @param {?=} documentRect
     * @return {?}
     */
    getViewportRect(documentRect = this._documentRect) {
        // Cache the document bounding rect so that we don't recompute it for multiple calls.
        if (!documentRect) {
            this._cacheViewportGeometry();
            documentRect = this._documentRect;
        }
        // Use the document element's bounding rect rather than the window scroll properties
        // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll
        // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different
        // conceptual viewports. Under most circumstances these viewports are equivalent, but they
        // can disagree when the page is pinch-zoomed (on devices that support touch).
        // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4
        // We use the documentElement instead of the body because, by default (without a css reset)
        // browsers typically give the document body an 8px margin, which is not included in
        // getBoundingClientRect().
        const /** @type {?} */ scrollPosition = this.getViewportScrollPosition(documentRect);
        const /** @type {?} */ height = window.innerHeight;
        const /** @type {?} */ width = window.innerWidth;
        return {
            top: scrollPosition.top,
            left: scrollPosition.left,
            bottom: scrollPosition.top + height,
            right: scrollPosition.left + width,
            height,
            width,
        };
    }
    /**
     * Gets the (top, left) scroll position of the viewport.
     * @param {?=} documentRect
     * @return {?}
     */
    getViewportScrollPosition(documentRect = this._documentRect) {
        // Cache the document bounding rect so that we don't recompute it for multiple calls.
        if (!documentRect) {
            this._cacheViewportGeometry();
            documentRect = this._documentRect;
        }
        // The top-left-corner of the viewport is determined by the scroll position of the document
        // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about
        // whether `document.body` or `document.documentElement` is the scrolled element, so reading
        // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of
        // `document.documentElement` works consistently, where the `top` and `left` values will
        // equal negative the scroll position.
        const /** @type {?} */ top = -documentRect.top || document.body.scrollTop || window.scrollY ||
            document.documentElement.scrollTop || 0;
        const /** @type {?} */ left = -documentRect.left || document.body.scrollLeft || window.scrollX ||
            document.documentElement.scrollLeft || 0;
        return { top, left };
    }
    /**
     * Caches the latest client rectangle of the document element.
     * @return {?}
     */
    _cacheViewportGeometry() {
        this._documentRect = document.documentElement.getBoundingClientRect();
    }
}
ViewportRuler.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
ViewportRuler.ctorParameters = () => [
    { type: ScrollDispatcher, },
];
/**
 * @param {?} parentRuler
 * @param {?} scrollDispatcher
 * @return {?}
 */
function VIEWPORT_RULER_PROVIDER_FACTORY(parentRuler, scrollDispatcher) {
    return parentRuler || new ViewportRuler(scrollDispatcher);
}
const VIEWPORT_RULER_PROVIDER = {
    // If there is already a ViewportRuler available, use that. Otherwise, provide a new one.
    provide: ViewportRuler,
    deps: [[new Optional(), new SkipSelf(), ViewportRuler], ScrollDispatcher],
    useFactory: VIEWPORT_RULER_PROVIDER_FACTORY
};

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/** Horizontal dimension of a connection point on the perimeter of the origin or overlay element. */
/**
 * The points of the origin element and the overlay element to connect.
 */
class ConnectionPositionPair {
    /**
     * @param {?} origin
     * @param {?} overlay
     */
    constructor(origin, overlay) {
        this.originX = origin.originX;
        this.originY = origin.originY;
        this.overlayX = overlay.overlayX;
        this.overlayY = overlay.overlayY;
    }
}
/**
 * Set of properties regarding the position of the origin and overlay relative to the viewport
 * with respect to the containing Scrollable elements.
 *
 * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the
 * bounds of any one of the strategy's Scrollable's bounding client rectangle.
 *
 * The overlay and origin are outside view if there is no overlap between their bounding client
 * rectangle and any one of the strategy's Scrollable's bounding client rectangle.
 *
 *       -----------                    -----------
 *       | outside |                    | clipped |
 *       |  view   |              --------------------------
 *       |         |              |     |         |        |
 *       ----------               |     -----------        |
 *  --------------------------    |                        |
 *  |                        |    |      Scrollable        |
 *  |                        |    |                        |
 *  |                        |     --------------------------
 *  |      Scrollable        |
 *  |                        |
 *  --------------------------
 */
class ScrollableViewProperties {
}
/**
 * The change event emitted by the strategy when a fallback position is used.
 */
class ConnectedOverlayPositionChange {
    /**
     * @param {?} connectionPair
     * @param {?} scrollableViewProperties
     */
    constructor(connectionPair, scrollableViewProperties) {
        this.connectionPair = connectionPair;
        this.scrollableViewProperties = scrollableViewProperties;
    }
}
/**
 * @nocollapse
 */
ConnectedOverlayPositionChange.ctorParameters = () => [
    { type: ConnectionPositionPair, },
    { type: ScrollableViewProperties, decorators: [{ type: Optional },] },
];

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * A strategy for positioning overlays. Using this strategy, an overlay is given an
 * implicit position relative some origin element. The relative position is defined in terms of
 * a point on the origin element that is connected to a point on the overlay element. For example,
 * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner
 * of the overlay.
 */
class ConnectedPositionStrategy {
    /**
     * @param {?} _connectedTo
     * @param {?} _originPos
     * @param {?} _overlayPos
     * @param {?} _viewportRuler
     */
    constructor(_connectedTo, _originPos, _overlayPos, _viewportRuler) {
        this._connectedTo = _connectedTo;
        this._originPos = _originPos;
        this._overlayPos = _overlayPos;
        this._viewportRuler = _viewportRuler;
        this._dir = 'ltr';
        /**
         * The offset in pixels for the overlay connection point on the x-axis
         */
        this._offsetX = 0;
        /**
         * The offset in pixels for the overlay connection point on the y-axis
         */
        this._offsetY = 0;
        /**
         * The Scrollable containers used to check scrollable view properties on position change.
         */
        this.scrollables = [];
        /**
         * Ordered list of preferred positions, from most to least desirable.
         */
        this._preferredPositions = [];
        this._onPositionChange = new Subject$1();
        this._origin = this._connectedTo.nativeElement;
        this.withFallbackPosition(_originPos, _overlayPos);
    }
    /**
     * Whether the we're dealing with an RTL context
     * @return {?}
     */
    get _isRtl() {
        return this._dir === 'rtl';
    }
    /**
     * Emits an event when the connection point changes.
     * @return {?}
     */
    get onPositionChange() {
        return this._onPositionChange.asObservable();
    }
    /**
     * Ordered list of preferred positions, from most to least desirable.
     * @return {?}
     */
    get positions() {
        return this._preferredPositions;
    }
    /**
     * To be used to for any cleanup after the element gets destroyed.
     * @return {?}
     */
    dispose() { }
    /**
     * Updates the position of the overlay element, using whichever preferred position relative
     * to the origin fits on-screen.
     * \@docs-private
     *
     * @param {?} element Element to which to apply the CSS styles.
     * @return {?} Resolves when the styles have been applied.
     */
    apply(element) {
        // Cache the overlay pane element in case re-calculating position is necessary
        this._pane = element;
        // We need the bounding rects for the origin and the overlay to determine how to position
        // the overlay relative to the origin.
        const /** @type {?} */ originRect = this._origin.getBoundingClientRect();
        const /** @type {?} */ overlayRect = element.getBoundingClientRect();
        // We use the viewport rect to determine whether a position would go off-screen.
        const /** @type {?} */ viewportRect = this._viewportRuler.getViewportRect();
        // Fallback point if none of the fallbacks fit into the viewport.
        let /** @type {?} */ fallbackPoint;
        let /** @type {?} */ fallbackPosition;
        // We want to place the overlay in the first of the preferred positions such that the
        // overlay fits on-screen.
        for (const /** @type {?} */ pos of this._preferredPositions) {
            // Get the (x, y) point of connection on the origin, and then use that to get the
            // (top, left) coordinate for the overlay at `pos`.
            const /** @type {?} */ originPoint = this._getOriginConnectionPoint(originRect, pos);
            const /** @type {?} */ overlayPoint = this._getOverlayPoint(originPoint, overlayRect, viewportRect, pos);
            // If the overlay in the calculated position fits on-screen, put it there and we're done.
            if (overlayPoint.fitsInViewport) {
                this._setElementPosition(element, overlayRect, overlayPoint, pos);
                // Save the last connected position in case the position needs to be re-calculated.
                this._lastConnectedPosition = pos;
                // Notify that the position has been changed along with its change properties.
                const /** @type {?} */ scrollableViewProperties = this.getScrollableViewProperties(element);
                const /** @type {?} */ positionChange = new ConnectedOverlayPositionChange(pos, scrollableViewProperties);
                this._onPositionChange.next(positionChange);
                return;
            }
            else if (!fallbackPoint || fallbackPoint.visibleArea < overlayPoint.visibleArea) {
                fallbackPoint = overlayPoint;
                fallbackPosition = pos;
            }
        }
        // If none of the preferred positions were in the viewport, take the one
        // with the largest visible area.
        this._setElementPosition(element, overlayRect, fallbackPoint, fallbackPosition);
    }
    /**
     * This re-aligns the overlay element with the trigger in its last calculated position,
     * even if a position higher in the "preferred positions" list would now fit. This
     * allows one to re-align the panel without changing the orientation of the panel.
     * @return {?}
     */
    recalculateLastPosition() {
        const /** @type {?} */ originRect = this._origin.getBoundingClientRect();
        const /** @type {?} */ overlayRect = this._pane.getBoundingClientRect();
        const /** @type {?} */ viewportRect = this._viewportRuler.getViewportRect();
        const /** @type {?} */ lastPosition = this._lastConnectedPosition || this._preferredPositions[0];
        const /** @type {?} */ originPoint = this._getOriginConnectionPoint(originRect, lastPosition);
        const /** @type {?} */ overlayPoint = this._getOverlayPoint(originPoint, overlayRect, viewportRect, lastPosition);
        this._setElementPosition(this._pane, overlayRect, overlayPoint, lastPosition);
    }
    /**
     * Sets the list of Scrollable containers that host the origin element so that
     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every
     * Scrollable must be an ancestor element of the strategy's origin element.
     * @param {?} scrollables
     * @return {?}
     */
    withScrollableContainers(scrollables) {
        this.scrollables = scrollables;
    }
    /**
     * Adds a new preferred fallback position.
     * @param {?} originPos
     * @param {?} overlayPos
     * @return {?}
     */
    withFallbackPosition(originPos, overlayPos) {
        this._preferredPositions.push(new ConnectionPositionPair(originPos, overlayPos));
        return this;
    }
    /**
     * Sets the layout direction so the overlay's position can be adjusted to match.
     * @param {?} dir New layout direction.
     * @return {?}
     */
    withDirection(dir) {
        this._dir = dir;
        return this;
    }
    /**
     * Sets an offset for the overlay's connection point on the x-axis
     * @param {?} offset New offset in the X axis.
     * @return {?}
     */
    withOffsetX(offset) {
        this._offsetX = offset;
        return this;
    }
    /**
     * Sets an offset for the overlay's connection point on the y-axis
     * @param {?} offset New offset in the Y axis.
     * @return {?}
     */
    withOffsetY(offset) {
        this._offsetY = offset;
        return this;
    }
    /**
     * Gets the horizontal (x) "start" dimension based on whether the overlay is in an RTL context.
     * @param {?} rect
     * @return {?}
     */
    _getStartX(rect) {
        return this._isRtl ? rect.right : rect.left;
    }
    /**
     * Gets the horizontal (x) "end" dimension based on whether the overlay is in an RTL context.
     * @param {?} rect
     * @return {?}
     */
    _getEndX(rect) {
        return this._isRtl ? rect.left : rect.right;
    }
    /**
     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.
     * @param {?} originRect
     * @param {?} pos
     * @return {?}
     */
    _getOriginConnectionPoint(originRect, pos) {
        const /** @type {?} */ originStartX = this._getStartX(originRect);
        const /** @type {?} */ originEndX = this._getEndX(originRect);
        let /** @type {?} */ x;
        if (pos.originX === 'center') {
            x = originStartX + (originRect.width / 2);
        }
        else {
            x = pos.originX === 'start' ? originStartX : originEndX;
        }
        let /** @type {?} */ y;
        if (pos.originY === 'center') {
            y = originRect.top + (originRect.height / 2);
        }
        else {
            y = pos.originY === 'top' ? originRect.top : originRect.bottom;
        }
        return { x, y };
    }
    /**
     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and
     * origin point to which the overlay should be connected, as well as how much of the element
     * would be inside the viewport at that position.
     * @param {?} originPoint
     * @param {?} overlayRect
     * @param {?} viewportRect
     * @param {?} pos
     * @return {?}
     */
    _getOverlayPoint(originPoint, overlayRect, viewportRect, pos) {
        // Calculate the (overlayStartX, overlayStartY), the start of the potential overlay position
        // relative to the origin point.
        let /** @type {?} */ overlayStartX;
        if (pos.overlayX === 'center') {
            overlayStartX = -overlayRect.width / 2;
        }
        else if (pos.overlayX === 'start') {
            overlayStartX = this._isRtl ? -overlayRect.width : 0;
        }
        else {
            overlayStartX = this._isRtl ? 0 : -overlayRect.width;
        }
        let /** @type {?} */ overlayStartY;
        if (pos.overlayY === 'center') {
            overlayStartY = -overlayRect.height / 2;
        }
        else {
            overlayStartY = pos.overlayY === 'top' ? 0 : -overlayRect.height;
        }
        // The (x, y) coordinates of the overlay.
        const /** @type {?} */ x = originPoint.x + overlayStartX + this._offsetX;
        const /** @type {?} */ y = originPoint.y + overlayStartY + this._offsetY;
        // How much the overlay would overflow at this position, on each side.
        const /** @type {?} */ leftOverflow = 0 - x;
        const /** @type {?} */ rightOverflow = (x + overlayRect.width) - viewportRect.width;
        const /** @type {?} */ topOverflow = 0 - y;
        const /** @type {?} */ bottomOverflow = (y + overlayRect.height) - viewportRect.height;
        // Visible parts of the element on each axis.
        const /** @type {?} */ visibleWidth = this._subtractOverflows(overlayRect.width, leftOverflow, rightOverflow);
        const /** @type {?} */ visibleHeight = this._subtractOverflows(overlayRect.height, topOverflow, bottomOverflow);
        // The area of the element that's within the viewport.
        const /** @type {?} */ visibleArea = visibleWidth * visibleHeight;
        const /** @type {?} */ fitsInViewport = (overlayRect.width * overlayRect.height) === visibleArea;
        return { x, y, fitsInViewport, visibleArea };
    }
    /**
     * Gets the view properties of the trigger and overlay, including whether they are clipped
     * or completely outside the view of any of the strategy's scrollables.
     * @param {?} overlay
     * @return {?}
     */
    getScrollableViewProperties(overlay) {
        const /** @type {?} */ originBounds = this._getElementBounds(this._origin);
        const /** @type {?} */ overlayBounds = this._getElementBounds(overlay);
        const /** @type {?} */ scrollContainerBounds = this.scrollables.map((scrollable) => {
            return this._getElementBounds(scrollable.getElementRef().nativeElement);
        });
        return {
            isOriginClipped: this.isElementClipped(originBounds, scrollContainerBounds),
            isOriginOutsideView: this.isElementOutsideView(originBounds, scrollContainerBounds),
            isOverlayClipped: this.isElementClipped(overlayBounds, scrollContainerBounds),
            isOverlayOutsideView: this.isElementOutsideView(overlayBounds, scrollContainerBounds),
        };
    }
    /**
     * Whether the element is completely out of the view of any of the containers.
     * @param {?} elementBounds
     * @param {?} containersBounds
     * @return {?}
     */
    isElementOutsideView(elementBounds, containersBounds) {
        return containersBounds.some((containerBounds) => {
            const /** @type {?} */ outsideAbove = elementBounds.bottom < containerBounds.top;
            const /** @type {?} */ outsideBelow = elementBounds.top > containerBounds.bottom;
            const /** @type {?} */ outsideLeft = elementBounds.right < containerBounds.left;
            const /** @type {?} */ outsideRight = elementBounds.left > containerBounds.right;
            return outsideAbove || outsideBelow || outsideLeft || outsideRight;
        });
    }
    /**
     * Whether the element is clipped by any of the containers.
     * @param {?} elementBounds
     * @param {?} containersBounds
     * @return {?}
     */
    isElementClipped(elementBounds, containersBounds) {
        return containersBounds.some((containerBounds) => {
            const /** @type {?} */ clippedAbove = elementBounds.top < containerBounds.top;
            const /** @type {?} */ clippedBelow = elementBounds.bottom > containerBounds.bottom;
            const /** @type {?} */ clippedLeft = elementBounds.left < containerBounds.left;
            const /** @type {?} */ clippedRight = elementBounds.right > containerBounds.right;
            return clippedAbove || clippedBelow || clippedLeft || clippedRight;
        });
    }
    /**
     * Physically positions the overlay element to the given coordinate.
     * @param {?} element
     * @param {?} overlayRect
     * @param {?} overlayPoint
     * @param {?} pos
     * @return {?}
     */
    _setElementPosition(element, overlayRect, overlayPoint, pos) {
        // We want to set either `top` or `bottom` based on whether the overlay wants to appear above
        // or below the origin and the direction in which the element will expand.
        const /** @type {?} */ verticalStyleProperty = pos.overlayY === 'bottom' ? 'bottom' : 'top';
        // When using `bottom`, we adjust the y position such that it is the distance
        // from the bottom of the viewport rather than the top.
        const /** @type {?} */ y = verticalStyleProperty === 'top' ?
            overlayPoint.y :
            document.documentElement.clientHeight - (overlayPoint.y + overlayRect.height);
        // We want to set either `left` or `right` based on whether the overlay wants to appear "before"
        // or "after" the origin, which determines the direction in which the element will expand.
        // For the horizontal axis, the meaning of "before" and "after" change based on whether the
        // page is in RTL or LTR.
        let /** @type {?} */ horizontalStyleProperty;
        if (this._dir === 'rtl') {
            horizontalStyleProperty = pos.overlayX === 'end' ? 'left' : 'right';
        }
        else {
            horizontalStyleProperty = pos.overlayX === 'end' ? 'right' : 'left';
        }
        // When we're setting `right`, we adjust the x position such that it is the distance
        // from the right edge of the viewport rather than the left edge.
        const /** @type {?} */ x = horizontalStyleProperty === 'left' ?
            overlayPoint.x :
            document.documentElement.clientWidth - (overlayPoint.x + overlayRect.width);
        // Reset any existing styles. This is necessary in case the preferred position has
        // changed since the last `apply`.
        ['top', 'bottom', 'left', 'right'].forEach(p => element.style[p] = null);
        element.style[verticalStyleProperty] = `${y}px`;
        element.style[horizontalStyleProperty] = `${x}px`;
    }
    /**
     * Returns the bounding positions of the provided element with respect to the viewport.
     * @param {?} element
     * @return {?}
     */
    _getElementBounds(element) {
        const /** @type {?} */ boundingClientRect = element.getBoundingClientRect();
        return {
            top: boundingClientRect.top,
            right: boundingClientRect.left + boundingClientRect.width,
            bottom: boundingClientRect.top + boundingClientRect.height,
            left: boundingClientRect.left
        };
    }
    /**
     * Subtracts the amount that an element is overflowing on an axis from it's length.
     * @param {?} length
     * @param {...?} overflows
     * @return {?}
     */
    _subtractOverflows(length, ...overflows) {
        return overflows.reduce((currentValue, currentOverflow) => {
            return currentValue - Math.max(currentOverflow, 0);
        }, length);
    }
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * A strategy for positioning overlays. Using this strategy, an overlay is given an
 * explicit position relative to the browser's viewport. We use flexbox, instead of
 * transforms, in order to avoid issues with subpixel rendering which can cause the
 * element to become blurry.
 */
class GlobalPositionStrategy {
    constructor() {
        this._cssPosition = 'static';
        this._topOffset = '';
        this._bottomOffset = '';
        this._leftOffset = '';
        this._rightOffset = '';
        this._alignItems = '';
        this._justifyContent = '';
        this._width = '';
        this._height = '';
        this._wrapper = null;
    }
    /**
     * Sets the top position of the overlay. Clears any previously set vertical position.
     * @param {?=} value New top offset.
     * @return {?}
     */
    top(value = '') {
        this._bottomOffset = '';
        this._topOffset = value;
        this._alignItems = 'flex-start';
        return this;
    }
    /**
     * Sets the left position of the overlay. Clears any previously set horizontal position.
     * @param {?=} value New left offset.
     * @return {?}
     */
    left(value = '') {
        this._rightOffset = '';
        this._leftOffset = value;
        this._justifyContent = 'flex-start';
        return this;
    }
    /**
     * Sets the bottom position of the overlay. Clears any previously set vertical position.
     * @param {?=} value New bottom offset.
     * @return {?}
     */
    bottom(value = '') {
        this._topOffset = '';
        this._bottomOffset = value;
        this._alignItems = 'flex-end';
        return this;
    }
    /**
     * Sets the right position of the overlay. Clears any previously set horizontal position.
     * @param {?=} value New right offset.
     * @return {?}
     */
    right(value = '') {
        this._leftOffset = '';
        this._rightOffset = value;
        this._justifyContent = 'flex-end';
        return this;
    }
    /**
     * Sets the overlay width and clears any previously set width.
     * @param {?=} value New width for the overlay
     * @return {?}
     */
    width(value = '') {
        this._width = value;
        // When the width is 100%, we should reset the `left` and the offset,
        // in order to ensure that the element is flush against the viewport edge.
        if (value === '100%') {
            this.left('0px');
        }
        return this;
    }
    /**
     * Sets the overlay height and clears any previously set height.
     * @param {?=} value New height for the overlay
     * @return {?}
     */
    height(value = '') {
        this._height = value;
        // When the height is 100%, we should reset the `top` and the offset,
        // in order to ensure that the element is flush against the viewport edge.
        if (value === '100%') {
            this.top('0px');
        }
        return this;
    }
    /**
     * Centers the overlay horizontally with an optional offset.
     * Clears any previously set horizontal position.
     *
     * @param {?=} offset Overlay offset from the horizontal center.
     * @return {?}
     */
    centerHorizontally(offset = '') {
        this.left(offset);
        this._justifyContent = 'center';
        return this;
    }
    /**
     * Centers the overlay vertically with an optional offset.
     * Clears any previously set vertical position.
     *
     * @param {?=} offset Overlay offset from the vertical center.
     * @return {?}
     */
    centerVertically(offset = '') {
        this.top(offset);
        this._alignItems = 'center';
        return this;
    }
    /**
     * Apply the position to the element.
     * \@docs-private
     *
     * @param {?} element Element to which to apply the CSS.
     * @return {?} Resolved when the styles have been applied.
     */
    apply(element) {
        if (!this._wrapper && element.parentNode) {
            this._wrapper = document.createElement('div');
            this._wrapper.classList.add('cdk-global-overlay-wrapper');
            element.parentNode.insertBefore(this._wrapper, element);
            this._wrapper.appendChild(element);
        }
        const /** @type {?} */ styles = element.style;
        const /** @type {?} */ parentStyles = ((element.parentNode)).style;
        styles.position = this._cssPosition;
        styles.marginTop = this._topOffset;
        styles.marginLeft = this._leftOffset;
        styles.marginBottom = this._bottomOffset;
        styles.marginRight = this._rightOffset;
        styles.width = this._width;
        styles.height = this._height;
        parentStyles.justifyContent = this._justifyContent;
        parentStyles.alignItems = this._alignItems;
    }
    /**
     * Removes the wrapper element from the DOM.
     * @return {?}
     */
    dispose() {
        if (this._wrapper && this._wrapper.parentNode) {
            this._wrapper.parentNode.removeChild(this._wrapper);
            this._wrapper = null;
        }
    }
}

/**
 * Free position strategy for overlay without origin
 * @author lingyi.zcs
 */
class FreePositionStrategy {
    /**
     * Apply the position to the element. (NOTE: normally will triggered by scrolling)
     * \@docs-private
     *
     * @param {?} element Element to which to apply the CSS.
     * @return {?} Resolved when the styles have been applied.
     */
    apply(element) {
        if (!this._wrapper) {
            this._wrapper = document.createElement('div');
            this._wrapper.classList.add('cdk-free-overlay-wrapper');
            element.parentNode.insertBefore(this._wrapper, element);
            this._wrapper.appendChild(element);
            // // Initialized style once
            // const style = element.style;
            // style.position = this._cssPosition;
            // style.top = this._top;
            // style.left = this._left;
            // style.width = this._width;
            // style.height = this._height;
        }
        // TODO: do somethings while triggered (eg. by scrolling)
    }
    /**
     * Removes the wrapper element from the DOM.
     * @return {?}
     */
    dispose() {
        if (this._wrapper && this._wrapper.parentNode) {
            this._wrapper.parentNode.removeChild(this._wrapper);
            this._wrapper = null;
        }
    }
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Builder for overlay position strategy.
 */
class OverlayPositionBuilder {
    /**
     * @param {?} _viewportRuler
     */
    constructor(_viewportRuler) {
        this._viewportRuler = _viewportRuler;
    }
    /**
     * Creates a free position strategy
     * @return {?}
     */
    free() {
        return new FreePositionStrategy();
    }
    /**
     * Creates a global position strategy.
     * @return {?}
     */
    global() {
        return new GlobalPositionStrategy();
    }
    /**
     * Creates a relative position strategy.
     * @param {?} elementRef
     * @param {?} originPos
     * @param {?} overlayPos
     * @return {?}
     */
    connectedTo(elementRef, originPos, overlayPos) {
        return new ConnectedPositionStrategy(elementRef, originPos, overlayPos, this._viewportRuler);
    }
}
OverlayPositionBuilder.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
OverlayPositionBuilder.ctorParameters = () => [
    { type: ViewportRuler, },
];

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * The OverlayContainer is the container in which all overlays will load.
 * It should be provided in the root component to ensure it is properly shared.
 */
class OverlayContainer {
    /**
     * Base theme to be applied to all overlay-based components.
     * @return {?}
     */
    get themeClass() { return this._themeClass; }
    /**
     * @param {?} value
     * @return {?}
     */
    set themeClass(value) {
        if (this._containerElement) {
            this._containerElement.classList.remove(this._themeClass);
            if (value) {
                this._containerElement.classList.add(value);
            }
        }
        this._themeClass = value;
    }
    /**
     * This method returns the overlay container element.  It will lazily
     * create the element the first time  it is called to facilitate using
     * the container in non-browser environments.
     * @return {?} the container element
     */
    getContainerElement() {
        if (!this._containerElement) {
            this._createContainer();
        }
        return this._containerElement;
    }
    /**
     * Create the overlay container element, which is simply a div
     * with the 'cdk-overlay-container' class on the document body.
     * @return {?}
     */
    _createContainer() {
        const /** @type {?} */ container = document.createElement('div');
        container.classList.add('nz-overlay-container');
        if (this._themeClass) {
            container.classList.add(this._themeClass);
        }
        document.body.appendChild(container);
        this._containerElement = container;
    }
}
OverlayContainer.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
OverlayContainer.ctorParameters = () => [];
/**
 * @param {?} parentContainer
 * @return {?}
 */
function OVERLAY_CONTAINER_PROVIDER_FACTORY(parentContainer) {
    return parentContainer || new OverlayContainer();
}
const OVERLAY_CONTAINER_PROVIDER = {
    // If there is already an OverlayContainer available, use that. Otherwise, provide a new one.
    provide: OverlayContainer,
    deps: [[new Optional(), new SkipSelf(), OverlayContainer]],
    useFactory: OVERLAY_CONTAINER_PROVIDER_FACTORY
};

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Sends an event when the directive's element is scrolled. Registers itself with the
 * ScrollDispatcher service to include itself as part of its collection of scrolling events that it
 * can be listened to through the service.
 */
class Scrollable {
    /**
     * @param {?} _elementRef
     * @param {?} _scroll
     * @param {?} _ngZone
     * @param {?} _renderer
     */
    constructor(_elementRef, _scroll, _ngZone, _renderer) {
        this._elementRef = _elementRef;
        this._scroll = _scroll;
        this._ngZone = _ngZone;
        this._renderer = _renderer;
        this._elementScrolled = new Subject$1();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._scrollListener = this._ngZone.runOutsideAngular(() => {
            return this._renderer.listen(this.getElementRef().nativeElement, 'scroll', (event) => {
                this._elementScrolled.next(event);
            });
        });
        this._scroll.register(this);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._scroll.deregister(this);
        if (this._scrollListener) {
            this._scrollListener();
            this._scrollListener = null;
        }
    }
    /**
     * Returns observable that emits when a scroll event is fired on the host element.
     * @return {?}
     */
    elementScrolled() {
        return this._elementScrolled.asObservable();
    }
    /**
     * @return {?}
     */
    getElementRef() {
        return this._elementRef;
    }
}
Scrollable.decorators = [
    { type: Directive, args: [{
                selector: '[cdk-scrollable], [cdkScrollable]'
            },] },
];
/**
 * @nocollapse
 */
Scrollable.ctorParameters = () => [
    { type: ElementRef, },
    { type: ScrollDispatcher, },
    { type: NgZone, },
    { type: Renderer2, },
];

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Describes a strategy that will be used by an overlay
 * to handle scroll events while it is open.
 * @abstract
 */

/**
 * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.
 * @return {?}
 */
function getMdScrollStrategyAlreadyAttachedError() {
    return Error(`Scroll strategy has already been attached.`);
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Strategy that will close the overlay as soon as the user starts scrolling.
 */
class CloseScrollStrategy {
    /**
     * @param {?} _scrollDispatcher
     */
    constructor(_scrollDispatcher) {
        this._scrollDispatcher = _scrollDispatcher;
        this._scrollSubscription = null;
    }
    /**
     * @param {?} overlayRef
     * @return {?}
     */
    attach(overlayRef) {
        if (this._overlayRef) {
            throw getMdScrollStrategyAlreadyAttachedError();
        }
        this._overlayRef = overlayRef;
    }
    /**
     * @return {?}
     */
    enable() {
        if (!this._scrollSubscription) {
            this._scrollSubscription = this._scrollDispatcher.scrolled(0, () => {
                if (this._overlayRef.hasAttached()) {
                    this._overlayRef.detach();
                }
                this.disable();
            });
        }
    }
    /**
     * @return {?}
     */
    disable() {
        if (this._scrollSubscription) {
            this._scrollSubscription.unsubscribe();
            this._scrollSubscription = null;
        }
    }
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Scroll strategy that doesn't do anything.
 */
class NoopScrollStrategy {
    /**
     * @return {?}
     */
    enable() { }
    /**
     * @return {?}
     */
    disable() { }
    /**
     * @return {?}
     */
    attach() { }
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Strategy that will prevent the user from scrolling while the overlay is visible.
 */
class BlockScrollStrategy {
    /**
     * @param {?} _viewportRuler
     */
    constructor(_viewportRuler) {
        this._viewportRuler = _viewportRuler;
        this._previousHTMLStyles = { top: '', left: '' };
        this._isEnabled = false;
    }
    /**
     * @return {?}
     */
    attach() { }
    /**
     * @return {?}
     */
    enable() {
        if (this._canBeEnabled()) {
            const /** @type {?} */ root = document.documentElement;
            this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();
            // Cache the previous inline styles in case the user had set them.
            this._previousHTMLStyles.left = root.style.left || '';
            this._previousHTMLStyles.top = root.style.top || '';
            // Note: we're using the `html` node, instead of the `body`, because the `body` may
            // have the user agent margin, whereas the `html` is guaranteed not to have one.
            root.style.left = `${-this._previousScrollPosition.left}px`;
            root.style.top = `${-this._previousScrollPosition.top}px`;
            root.classList.add('cdk-global-scrollblock');
            this._isEnabled = true;
        }
    }
    /**
     * @return {?}
     */
    disable() {
        if (this._isEnabled) {
            this._isEnabled = false;
            document.documentElement.style.left = this._previousHTMLStyles.left;
            document.documentElement.style.top = this._previousHTMLStyles.top;
            document.documentElement.classList.remove('cdk-global-scrollblock');
            window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);
        }
    }
    /**
     * @return {?}
     */
    _canBeEnabled() {
        // Since the scroll strategies can't be singletons, we have to use a global CSS class
        // (`cdk-global-scrollblock`) to make sure that we don't try to disable global
        // scrolling multiple times.
        if (document.documentElement.classList.contains('cdk-global-scrollblock') || this._isEnabled) {
            return false;
        }
        const /** @type {?} */ body = document.body;
        const /** @type {?} */ viewport = this._viewportRuler.getViewportRect();
        return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;
    }
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Strategy that will update the element position as the user is scrolling.
 */
class RepositionScrollStrategy {
    /**
     * @param {?} _scrollDispatcher
     * @param {?=} _config
     */
    constructor(_scrollDispatcher, _config) {
        this._scrollDispatcher = _scrollDispatcher;
        this._config = _config;
        this._scrollSubscription = null;
    }
    /**
     * @param {?} overlayRef
     * @return {?}
     */
    attach(overlayRef) {
        if (this._overlayRef) {
            throw getMdScrollStrategyAlreadyAttachedError();
        }
        this._overlayRef = overlayRef;
    }
    /**
     * @return {?}
     */
    enable() {
        if (!this._scrollSubscription) {
            const /** @type {?} */ throttle = this._config ? this._config.scrollThrottle : 0;
            this._scrollSubscription = this._scrollDispatcher.scrolled(throttle, () => {
                this._overlayRef.updatePosition();
            });
        }
    }
    /**
     * @return {?}
     */
    disable() {
        if (this._scrollSubscription) {
            this._scrollSubscription.unsubscribe();
            this._scrollSubscription = null;
        }
    }
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Options for how an overlay will handle scrolling.
 *
 * Users can provide a custom value for `ScrollStrategyOptions` to replace the default
 * behaviors. This class primarily acts as a factory for ScrollStrategy instances.
 */
class ScrollStrategyOptions {
    /**
     * @param {?} _scrollDispatcher
     * @param {?} _viewportRuler
     */
    constructor(_scrollDispatcher, _viewportRuler) {
        this._scrollDispatcher = _scrollDispatcher;
        this._viewportRuler = _viewportRuler;
        /**
         * Do nothing on scroll.
         */
        this.noop = () => new NoopScrollStrategy();
        /**
         * Close the overlay as soon as the user scrolls.
         */
        this.close = () => new CloseScrollStrategy(this._scrollDispatcher);
        /**
         * Block scrolling.
         */
        this.block = () => new BlockScrollStrategy(this._viewportRuler);
        /**
         * Update the overlay's position on scroll.
         * @param config Configuration to be used inside the scroll strategy.
         * Allows debouncing the reposition calls.
         */
        this.reposition = (config) => new RepositionScrollStrategy(this._scrollDispatcher, config);
    }
}
ScrollStrategyOptions.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
ScrollStrategyOptions.ctorParameters = () => [
    { type: ScrollDispatcher, },
    { type: ViewportRuler, },
];

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
class ScrollDispatchModule {
}
ScrollDispatchModule.decorators = [
    { type: NgModule, args: [{
                imports: [PlatformModule],
                exports: [Scrollable],
                declarations: [Scrollable],
                providers: [SCROLL_DISPATCHER_PROVIDER, ScrollStrategyOptions],
            },] },
];
/**
 * @nocollapse
 */
ScrollDispatchModule.ctorParameters = () => [];

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Next overlay unique ID.
 */
let nextUniqueId = 0;
/**
 * The default state for newly created overlays.
 */
const defaultState = new OverlayState();
/**
 * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be
 * used as a low-level building building block for other components. Dialogs, tooltips, menus,
 * selects, etc. can all be built using overlays. The service should primarily be used by authors
 * of re-usable components rather than developers building end-user applications.
 *
 * An overlay *is* a PortalHost, so any kind of Portal can be loaded into one.
 */
class Overlay {
    /**
     * @param {?} scrollStrategies
     * @param {?} _overlayContainer
     * @param {?} _componentFactoryResolver
     * @param {?} _positionBuilder
     * @param {?} _appRef
     * @param {?} _injector
     * @param {?} _ngZone
     */
    constructor(scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _appRef, _injector, _ngZone) {
        this.scrollStrategies = scrollStrategies;
        this._overlayContainer = _overlayContainer;
        this._componentFactoryResolver = _componentFactoryResolver;
        this._positionBuilder = _positionBuilder;
        this._appRef = _appRef;
        this._injector = _injector;
        this._ngZone = _ngZone;
    }
    /**
     * Creates an overlay.
     * @param {?=} state State to apply to the overlay.
     * @param {?=} paneClassName
     * @return {?} Reference to the created overlay.
     */
    create(state$$1 = defaultState, paneClassName) {
        return this._createOverlayRef(this._createPaneElement(paneClassName), state$$1);
    }
    /**
     * Returns a position builder that can be used, via fluent API,
     * to construct and configure a position strategy.
     * @return {?}
     */
    position() {
        return this._positionBuilder;
    }
    /**
     * Creates the DOM element for an overlay and appends it to the overlay container.
     * @param {?=} className
     * @return {?} Newly-created pane element
     */
    _createPaneElement(className) {
        const /** @type {?} */ pane = document.createElement('div');
        pane.id = `nz-overlay-${nextUniqueId++}`;
        pane.classList.add('nz-overlay-pane');
        if (className) {
            const /** @type {?} */ classList = className.split(' ');
            classList.forEach(c => {
                pane.classList.add(c);
            });
        }
        this._overlayContainer.getContainerElement().appendChild(pane);
        return pane;
    }
    /**
     * Create a DomPortalHost into which the overlay content can be loaded.
     * @param {?} pane The DOM element to turn into a portal host.
     * @return {?} A portal host for the given DOM element.
     */
    _createPortalHost(pane) {
        return new DomPortalHost(pane, this._componentFactoryResolver, this._appRef, this._injector);
    }
    /**
     * Creates an OverlayRef for an overlay in the given DOM element.
     * @param {?} pane DOM element for the overlay
     * @param {?} state
     * @return {?}
     */
    _createOverlayRef(pane, state$$1) {
        const /** @type {?} */ scrollStrategy = state$$1.scrollStrategy || this.scrollStrategies.noop();
        const /** @type {?} */ portalHost = this._createPortalHost(pane);
        return new OverlayRef(portalHost, pane, state$$1, scrollStrategy, this._ngZone);
    }
}
Overlay.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
Overlay.ctorParameters = () => [
    { type: ScrollStrategyOptions, },
    { type: OverlayContainer, },
    { type: ComponentFactoryResolver, },
    { type: OverlayPositionBuilder, },
    { type: ApplicationRef, },
    { type: Injector, },
    { type: NgZone, },
];

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Coerces a data-bound value (typically a string) to a boolean.
 * @param {?} value
 * @return {?}
 */
function coerceBooleanProperty(value) {
    return value != null && `${value}` !== 'false';
}
/**
 * Default set of positions for the overlay. Follows the behavior of a dropdown.
 */
const defaultPositionList = [
    new ConnectionPositionPair({ originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' }),
    new ConnectionPositionPair({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' }),
];
/**
 * Directive applied to an element to make it usable as an origin for an Overlay using a
 * ConnectedPositionStrategy.
 */
class OverlayOrigin {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
    }
}
OverlayOrigin.decorators = [
    { type: Directive, args: [{
                selector: '[nz-overlay-origin]',
                exportAs: 'nzOverlayOrigin',
            },] },
];
/**
 * @nocollapse
 */
OverlayOrigin.ctorParameters = () => [
    { type: ElementRef, },
];
/**
 * Directive to facilitate declarative creation of an Overlay using a ConnectedPositionStrategy.
 */
class ConnectedOverlayDirective {
    /**
     * @param {?} _overlay
     * @param {?} _renderer
     * @param {?} templateRef
     * @param {?} viewContainerRef
     * @param {?} _dir
     */
    constructor(_overlay, _renderer, templateRef, viewContainerRef, _dir) {
        this._overlay = _overlay;
        this._renderer = _renderer;
        this._dir = _dir;
        this._hasBackdrop = false;
        this._offsetX = 0;
        this._offsetY = 0;
        /**
         * Strategy to be used when handling scroll events while the overlay is open.
         */
        this.scrollStrategy = this._overlay.scrollStrategies.reposition();
        /**
         * Whether the overlay is open.
         */
        this.open = false;
        /**
         * Event emitted when the backdrop is clicked.
         */
        this.backdropClick = new EventEmitter();
        /**
         * Event emitted when the position has changed.
         */
        this.positionChange = new EventEmitter();
        /**
         * Event emitted when the overlay has been attached.
         */
        this.attach = new EventEmitter();
        /**
         * Event emitted when the overlay has been detached.
         */
        this.detach = new EventEmitter();
        this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);
    }
    /**
     * The offset in pixels for the overlay connection point on the x-axis
     * @return {?}
     */
    get offsetX() {
        return this._offsetX;
    }
    /**
     * @param {?} offsetX
     * @return {?}
     */
    set offsetX(offsetX) {
        this._offsetX = offsetX;
        if (this._position) {
            this._position.withOffsetX(offsetX);
        }
    }
    /**
     * The offset in pixels for the overlay connection point on the y-axis
     * @return {?}
     */
    get offsetY() {
        return this._offsetY;
    }
    /**
     * @param {?} offsetY
     * @return {?}
     */
    set offsetY(offsetY) {
        this._offsetY = offsetY;
        if (this._position) {
            this._position.withOffsetY(offsetY);
        }
    }
    /**
     * Whether or not the overlay should attach a backdrop.
     * @return {?}
     */
    get hasBackdrop() {
        return this._hasBackdrop;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set hasBackdrop(value) {
        this._hasBackdrop = coerceBooleanProperty(value);
    }
    /**
     * The associated overlay reference.
     * @return {?}
     */
    get overlayRef() {
        return this._overlayRef;
    }
    /**
     * The element's layout direction.
     * @return {?}
     */
    get dir() {
        return this._dir ? this._dir.value : 'ltr';
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._destroyOverlay();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes['open']) {
            this.open ? this._attachOverlay() : this._detachOverlay();
        }
    }
    /**
     * Creates an overlay
     * @return {?}
     */
    _createOverlay() {
        if (!this.positions || !this.positions.length) {
            this.positions = defaultPositionList;
        }
        this._overlayRef = this._overlay.create(this._buildConfig(), this.paneClass);
    }
    /**
     * Builds the overlay config based on the directive's inputs
     * @return {?}
     */
    _buildConfig() {
        const /** @type {?} */ overlayConfig = new OverlayState();
        if (this.width || this.width === 0) {
            overlayConfig.width = this.width;
        }
        if (this.height || this.height === 0) {
            overlayConfig.height = this.height;
        }
        if (this.minWidth || this.minWidth === 0) {
            overlayConfig.minWidth = this.minWidth;
        }
        if (this.minHeight || this.minHeight === 0) {
            overlayConfig.minHeight = this.minHeight;
        }
        overlayConfig.hasBackdrop = this.hasBackdrop;
        if (this.backdropClass) {
            overlayConfig.backdropClass = this.backdropClass;
        }
        this._position = (this._createPositionStrategy());
        overlayConfig.positionStrategy = this._position;
        overlayConfig.scrollStrategy = this.scrollStrategy;
        return overlayConfig;
    }
    /**
     * Returns the position strategy of the overlay to be set on the overlay config
     * @return {?}
     */
    _createPositionStrategy() {
        const /** @type {?} */ pos = this.positions[0];
        const /** @type {?} */ originPoint = { originX: pos.originX, originY: pos.originY };
        const /** @type {?} */ overlayPoint = { overlayX: pos.overlayX, overlayY: pos.overlayY };
        const /** @type {?} */ strategy = this._overlay.position()
            .connectedTo(this.origin.elementRef, originPoint, overlayPoint)
            .withOffsetX(this.offsetX)
            .withOffsetY(this.offsetY);
        this._handlePositionChanges(strategy);
        return strategy;
    }
    /**
     * @param {?} strategy
     * @return {?}
     */
    _handlePositionChanges(strategy) {
        for (let /** @type {?} */ i = 1; i < this.positions.length; i++) {
            strategy.withFallbackPosition({ originX: this.positions[i].originX, originY: this.positions[i].originY }, { overlayX: this.positions[i].overlayX, overlayY: this.positions[i].overlayY });
        }
        this._positionSubscription =
            strategy.onPositionChange.subscribe(pos => this.positionChange.emit(pos));
    }
    /**
     * Attaches the overlay and subscribes to backdrop clicks if backdrop exists
     * @return {?}
     */
    _attachOverlay() {
        if (!this._overlayRef) {
            this._createOverlay();
        }
        this._position.withDirection(this.dir);
        this._overlayRef.getState().direction = this.dir;
        this._initEscapeListener();
        if (!this._overlayRef.hasAttached()) {
            this._overlayRef.attach(this._templatePortal);
            this.attach.emit();
        }
        if (this.hasBackdrop) {
            this._backdropSubscription = this._overlayRef.backdropClick().subscribe(() => {
                this.backdropClick.emit();
            });
        }
    }
    /**
     * Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists
     * @return {?}
     */
    _detachOverlay() {
        if (this._overlayRef) {
            this._overlayRef.detach();
            this.detach.emit();
        }
        if (this._backdropSubscription) {
            this._backdropSubscription.unsubscribe();
            this._backdropSubscription = null;
        }
        if (this._escapeListener) {
            this._escapeListener();
        }
    }
    /**
     * Destroys the overlay created by this directive.
     * @return {?}
     */
    _destroyOverlay() {
        if (this._overlayRef) {
            this._overlayRef.dispose();
        }
        if (this._backdropSubscription) {
            this._backdropSubscription.unsubscribe();
        }
        if (this._positionSubscription) {
            this._positionSubscription.unsubscribe();
        }
        if (this._escapeListener) {
            this._escapeListener();
        }
    }
    /**
     * Sets the event listener that closes the overlay when pressing Escape.
     * @return {?}
     */
    _initEscapeListener() {
        this._escapeListener = this._renderer.listen('document', 'keydown', (event) => {
            if (event.keyCode === ESCAPE) {
                this._detachOverlay();
            }
        });
    }
}
ConnectedOverlayDirective.decorators = [
    { type: Directive, args: [{
                selector: '[nz-connected-overlay]',
                exportAs: 'nzConnectedOverlay'
            },] },
];
/**
 * @nocollapse
 */
ConnectedOverlayDirective.ctorParameters = () => [
    { type: Overlay, },
    { type: Renderer2, },
    { type: TemplateRef, },
    { type: ViewContainerRef, },
    { type: Directionality, decorators: [{ type: Optional },] },
];
ConnectedOverlayDirective.propDecorators = {
    'origin': [{ type: Input },],
    'positions': [{ type: Input },],
    'offsetX': [{ type: Input },],
    'offsetY': [{ type: Input },],
    'width': [{ type: Input },],
    'height': [{ type: Input },],
    'minWidth': [{ type: Input },],
    'minHeight': [{ type: Input },],
    'backdropClass': [{ type: Input },],
    'paneClass': [{ type: Input },],
    'scrollStrategy': [{ type: Input },],
    'open': [{ type: Input },],
    'hasBackdrop': [{ type: Input },],
    'backdropClick': [{ type: Output },],
    'positionChange': [{ type: Output },],
    'attach': [{ type: Output },],
    'detach': [{ type: Output },],
};

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * The FullscreenOverlayContainer is the alternative to OverlayContainer
 * that supports correct displaying of overlay elements in Fullscreen mode
 * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen
 * It should be provided in the root component that way:
 * providers: [
 *   {provide: OverlayContainer, useClass: FullscreenOverlayContainer}
 * ],
 */
class FullscreenOverlayContainer extends OverlayContainer {
    /**
     * @return {?}
     */
    _createContainer() {
        super._createContainer();
        this._adjustParentForFullscreenChange();
        this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());
    }
    /**
     * @return {?}
     */
    _adjustParentForFullscreenChange() {
        if (!this._containerElement) {
            return;
        }
        const /** @type {?} */ fullscreenElement = this.getFullscreenElement();
        const /** @type {?} */ parent = fullscreenElement || document.body;
        parent.appendChild(this._containerElement);
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    _addFullscreenChangeListener(fn) {
        if (document.fullscreenEnabled) {
            document.addEventListener('fullscreenchange', fn);
        }
        else if (document.webkitFullscreenEnabled) {
            document.addEventListener('webkitfullscreenchange', fn);
        }
        else if (((document)).mozFullScreenEnabled) {
            document.addEventListener('mozfullscreenchange', fn);
        }
        else if (((document)).msFullscreenEnabled) {
            document.addEventListener('MSFullscreenChange', fn);
        }
    }
    /**
     * When the page is put into fullscreen mode, a specific element is specified.
     * Only that element and its children are visible when in fullscreen mode.
     * @return {?}
     */
    getFullscreenElement() {
        return document.fullscreenElement ||
            document.webkitFullscreenElement ||
            ((document)).mozFullScreenElement ||
            ((document)).msFullscreenElement ||
            null;
    }
}
FullscreenOverlayContainer.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
FullscreenOverlayContainer.ctorParameters = () => [];

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
const OVERLAY_PROVIDERS = [
    Overlay,
    OverlayPositionBuilder,
    VIEWPORT_RULER_PROVIDER,
    OVERLAY_CONTAINER_PROVIDER,
];
class OverlayModule {
}
OverlayModule.decorators = [
    { type: NgModule, args: [{
                imports: [ScrollDispatchModule],
                exports: [ConnectedOverlayDirective, OverlayOrigin, ScrollDispatchModule],
                declarations: [ConnectedOverlayDirective, OverlayOrigin],
                providers: [OVERLAY_PROVIDERS],
            },] },
];
/**
 * @nocollapse
 */
OverlayModule.ctorParameters = () => [];

class NzOptionPipe {
    /**
     * @param {?} options
     * @param {?} value
     * @return {?}
     */
    transform(options, value) {
        if (value.searchText) {
            let /** @type {?} */ _options = options.filter(option => option.nzLabel && (option.nzLabel.toLowerCase().indexOf(value.searchText.toLowerCase()) !== -1));
            if (value.tags) {
                _options = options.filter(option => option.nzLabel && (option.nzLabel.toLowerCase() === value.searchText.toLowerCase()));
            }
            if (_options.length) {
                return _options;
            }
            else {
                return ([{
                        nzValue: value.value,
                        _value: value.value,
                        nzDisabled: value.disabled,
                        _disabled: value.disabled,
                        nzLabel: value.notFoundContent,
                        _label: value.notFoundContent,
                    }]);
            }
        }
        else {
            return options;
        }
    }
}
NzOptionPipe.decorators = [
    { type: Pipe, args: [{ name: 'nzOptionPipe' },] },
];
/**
 * @nocollapse
 */
NzOptionPipe.ctorParameters = () => [];

const DropDownAnimation = trigger('dropDownAnimation', [
    state('bottom', style({
        opacity: 1,
        transform: 'scaleY(1)',
        transformOrigin: '0% 0%'
    })),
    transition('void => bottom', [
        style({
            opacity: 0,
            transform: 'scaleY(0)',
            transformOrigin: '0% 0%'
        }),
        animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')
    ]),
    state('top', style({
        opacity: 1,
        transform: 'scaleY(1)',
        transformOrigin: '0% 100%'
    })),
    transition('void => top', [
        style({
            opacity: 0,
            transform: 'scaleY(0)',
            transformOrigin: '0% 100%'
        }),
        animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')
    ]),
    transition('* => void', [
        animate('250ms 100ms linear', style({ opacity: 0 }))
    ])
]);

const TagAnimation = trigger('tagAnimation', [
    state('*', style({ opacity: 1, transform: 'scale(1)' })),
    transition('void => *', [
        style({ opacity: 0, transform: 'scale(0)' }),
        animate('150ms linear')
    ]),
    state('void', style({ opacity: 0, transform: 'scale(0)' })),
    transition('* => void', [
        style({ opacity: 1, transform: 'scale(1)' }),
        animate('150ms linear')
    ])
]);

/**
 * complex but work well
 * TODO: rebuild latter
 */
class NzSelectComponent {
    /**
     * @param {?} _elementRef
     * @param {?} _renderer
     */
    constructor(_elementRef, _renderer) {
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this._prefixCls = 'ant-select';
        this._classList = [];
        this._dropDownPrefixCls = `${this._prefixCls}-dropdown`;
        this._selectionPrefixCls = `${this._prefixCls}-selection`;
        this._placeholder = 'Placeholder';
        this._notFoundContent = 'Not found';
        this._isOpen = false;
        this._disabled = false;
        this._showSearch = false;
        this._isTags = false;
        this._searchText = '';
        this._triggerWidth = 0;
        this._selectedOptions = new Set();
        this._options = [];
        this._cacheOptions = [];
        this._filterOptions = [];
        this._tagsOptions = [];
        this._isMultiInit = false;
        this._dropDownPosition = 'bottom';
        this._isMultiple = false;
        this._composing = false;
        this._keepUnListOptions = false;
        this._allowClear = false;
        // ngModel Access
        this.onChange = Function.prototype;
        this.onTouched = Function.prototype;
        this.nzSearchChange = new EventEmitter();
        this.nzOpenChange = new EventEmitter();
        this.nzFilter = true;
        this.nzMaxMultiple = Infinity;
        /**
         * new nz-option insert or new tags insert
         */
        this.addOption = (option) => {
            this._options.push(option);
            if (!this._isTags) {
                this.forceUpdateSelectedOption(this._value);
            }
        };
        /**
         * cancel select multiple option
         */
        this.unSelectMultipleOption = (option, $event, emitChange = true) => {
            this._operatingMultipleOption = option;
            this._selectedOptions.delete(option);
            if (emitChange) {
                this.emitMultipleOptions();
            }
            // 对Tag进行特殊处理
            if (this._isTags && (this._options.indexOf(option) !== -1) && (this._tagsOptions.indexOf(option) !== -1)) {
                this.removeOption(option);
                this._tagsOptions.splice(this._tagsOptions.indexOf(option), 1);
            }
            if ($event) {
                $event.preventDefault();
                $event.stopPropagation();
            }
        };
        this._el = this._elementRef.nativeElement;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzAllowClear(value) {
        if (value === '') {
            this._allowClear = true;
        }
        else {
            this._allowClear = (value);
        }
    }
    /**
     * @return {?}
     */
    get nzAllowClear() {
        return this._allowClear;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzKeepUnListOptions(value) {
        if (value === '') {
            this._keepUnListOptions = true;
        }
        else {
            this._keepUnListOptions = (value);
        }
    }
    /**
     * @return {?}
     */
    get nzKeepUnListOptions() {
        return this._keepUnListOptions;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzMode(value) {
        this._mode = value;
        if (this._mode === 'multiple') {
            this.nzMultiple = true;
        }
        else if (this._mode === 'tags') {
            this.nzTags = true;
        }
        else if (this._mode === 'combobox') {
            this.nzShowSearch = true;
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzMultiple(value) {
        this._isMultiple = value;
        if (this._isMultiple) {
            this.nzShowSearch = true;
        }
    }
    /**
     * @return {?}
     */
    get nzMultiple() {
        return this._isMultiple;
    }
    /**
     * @return {?}
     */
    get nzPlaceHolder() {
        return this._placeholder;
    }
    ;
    /**
     * @param {?} value
     * @return {?}
     */
    set nzPlaceHolder(value) {
        this._placeholder = value;
    }
    /**
     * @return {?}
     */
    get nzNotFoundContent() {
        return this._notFoundContent;
    }
    ;
    /**
     * @param {?} value
     * @return {?}
     */
    set nzNotFoundContent(value) {
        this._notFoundContent = value;
    }
    /**
     * @return {?}
     */
    get nzSize() {
        return this._size;
    }
    ;
    /**
     * @param {?} value
     * @return {?}
     */
    set nzSize(value) {
        this._size = { large: 'lg', small: 'sm' }[value];
        this.setClassMap();
    }
    /**
     * @return {?}
     */
    get nzShowSearch() {
        return this._showSearch;
    }
    ;
    /**
     * @param {?} value
     * @return {?}
     */
    set nzShowSearch(value) {
        this._showSearch = value;
    }
    /**
     * @return {?}
     */
    get nzTags() {
        return this._isTags;
    }
    ;
    /**
     * @param {?} value
     * @return {?}
     */
    set nzTags(value) {
        this._isTags = value;
        this.nzMultiple = value;
    }
    /**
     * @return {?}
     */
    get nzDisabled() {
        return this._disabled;
    }
    ;
    /**
     * @param {?} value
     * @return {?}
     */
    set nzDisabled(value) {
        this._disabled = value;
        this.closeDropDown();
        this.setClassMap();
    }
    /**
     * @return {?}
     */
    get nzOpen() {
        return this._isOpen;
    }
    ;
    /**
     * @param {?} value
     * @return {?}
     */
    set nzOpen(value) {
        if (this._isOpen === value) {
            return;
        }
        if (value === true) {
            this.scrollToActive();
            if (!this._triggerWidth) {
                this._setTriggerWidth();
            }
        }
        this._isOpen = value;
        this.nzOpenChange.emit(this._isOpen);
        this.setClassMap();
    }
    /**
     * nz-option remove or tags remove
     * @param {?} option
     * @return {?}
     */
    removeOption(option) {
        this._options.splice(this._options.indexOf(option), 1);
        if (!this._isTags) {
            this.forceUpdateSelectedOption(this._value);
        }
    }
    /**
     * dropdown position changed
     * @param {?} position
     * @return {?}
     */
    onPositionChange(position) {
        this._dropDownPosition = position.connectionPair.originY;
    }
    /**
     * @return {?}
     */
    compositionStart() {
        this._composing = true;
    }
    /**
     * @return {?}
     */
    compositionEnd() {
        this._composing = false;
    }
    /**
     * clear single selected option
     * @param {?=} $event
     * @return {?}
     */
    clearSelect($event) {
        if ($event) {
            $event.preventDefault();
            $event.stopPropagation();
        }
        this._selectedOption = null;
        this.nzValue = null;
        this.onChange(null);
    }
    /**
     * click dropdown option by user
     * @param {?} option
     * @param {?=} $event
     * @return {?}
     */
    clickOption(option, $event) {
        if (!option) {
            return;
        }
        this.chooseOption(option, true, $event);
        this.clearSearchText();
        if (!this._isMultiple) {
            this.nzOpen = false;
        }
    }
    /**
     * choose option
     * @param {?} option
     * @param {?=} isUserClick
     * @param {?=} $event
     * @return {?}
     */
    chooseOption(option, isUserClick = false, $event) {
        if ($event) {
            $event.preventDefault();
            $event.stopPropagation();
        }
        this._activeFilterOption = option;
        if (option && !option.nzDisabled) {
            if (!this.nzMultiple) {
                this._selectedOption = option;
                this._value = option.nzValue;
                if (isUserClick) {
                    this.onChange(option.nzValue);
                }
            }
            else {
                if (isUserClick) {
                    this.isInSet(this._selectedOptions, option) ? this.unSelectMultipleOption(option) : this.selectMultipleOption(option);
                }
            }
        }
    }
    /**
     * @param {?} element
     * @param {?} text
     * @return {?}
     */
    updateWidth(element, text) {
        if (text) {
            /** wait for scroll width change */
            setTimeout(_ => {
                this._renderer.setStyle(element, 'width', `${element.scrollWidth}px`);
            });
        }
        else {
            this._renderer.removeStyle(element, 'width');
        }
    }
    /**
     * determine if option in set
     * @param {?} set
     * @param {?} option
     * @return {?}
     */
    isInSet(set, option) {
        return (((Array.from(set))).find((data) => data.nzValue === option.nzValue));
    }
    /**
     * select multiple option
     * @param {?} option
     * @param {?=} $event
     * @return {?}
     */
    selectMultipleOption(option, $event) {
        /** if tags do push to tag option */
        if (this._isTags && (this._options.indexOf(option) === -1) && (this._tagsOptions.indexOf(option) === -1)) {
            this.addOption(option);
            this._tagsOptions.push(option);
        }
        this._operatingMultipleOption = option;
        if (this._selectedOptions.size < this.nzMaxMultiple) {
            this._selectedOptions.add(option);
        }
        this.emitMultipleOptions();
        if ($event) {
            $event.preventDefault();
            $event.stopPropagation();
        }
    }
    /**
     * emit multiple options
     * @return {?}
     */
    emitMultipleOptions() {
        if (this._isMultiInit) {
            return;
        }
        const /** @type {?} */ arrayOptions = (Array.from(this._selectedOptions));
        this.onChange(arrayOptions.map(item => item.nzValue));
    }
    /**
     * update selected option when add remove option etc
     * @param {?} currentModelValue
     * @param {?=} triggerByNgModel
     * @return {?}
     */
    updateSelectedOption(currentModelValue, triggerByNgModel = false) {
        if (currentModelValue === null || currentModelValue === undefined) {
            return;
        }
        if (this.nzMultiple) {
            const /** @type {?} */ selectedOptions = this._options.filter((item) => {
                return ((item !== null) && (item !== undefined)) && (currentModelValue.indexOf(item.nzValue) !== -1);
            });
            if ((this.nzKeepUnListOptions || this.nzTags) && (!triggerByNgModel)) {
                selectedOptions.forEach(option => {
                    if (!this._selectedOptions.has(option)) {
                        this._selectedOptions.add(option);
                    }
                });
            }
            else {
                this._selectedOptions = new Set();
                selectedOptions.forEach(option => {
                    this._selectedOptions.add(option);
                });
            }
        }
        else {
            const /** @type {?} */ selectedOption = this._options.filter((item) => {
                return (item !== null) && (item.nzValue === currentModelValue);
            });
            this.chooseOption(selectedOption[0]);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    forceUpdateSelectedOption(value) {
        /** trigger dirty check */
        setTimeout(_ => {
            this.updateSelectedOption(value);
        });
    }
    /**
     * @return {?}
     */
    get nzValue() {
        return this._value;
    }
    ;
    /**
     * @param {?} value
     * @return {?}
     */
    set nzValue(value) {
        this._updateValue(value);
    }
    /**
     * @param {?=} emitChange
     * @return {?}
     */
    clearAllSelectedOption(emitChange = true) {
        this._selectedOptions.forEach(item => {
            this.unSelectMultipleOption(item, null, emitChange);
        });
    }
    /**
     * @param {?} event
     * @return {?}
     */
    handleKeyEnterEvent(event) {
        /** when composing end */
        if (!this._composing) {
            event.preventDefault();
            this.updateFilterOption(false);
            this.clickOption(this._activeFilterOption);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    handleKeyBackspaceEvent(event) {
        if ((!this._searchText) && (!this._composing) && (this._isMultiple)) {
            event.preventDefault();
            const /** @type {?} */ lastOption = Array.from(this._selectedOptions).pop();
            this.unSelectMultipleOption(lastOption);
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    handleKeyDownEvent($event) {
        if (this._isOpen) {
            $event.preventDefault();
            $event.stopPropagation();
            this._activeFilterOption = this.nextOption(this._activeFilterOption, this._filterOptions);
            this.scrollToActive();
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    handleKeyUpEvent($event) {
        if (this._isOpen) {
            $event.preventDefault();
            $event.stopPropagation();
            this._activeFilterOption = this.preOption(this._activeFilterOption, this._filterOptions);
            this.scrollToActive();
        }
    }
    /**
     * @param {?} option
     * @param {?} options
     * @return {?}
     */
    preOption(option, options) {
        return options[options.indexOf(option) - 1] || options[options.length - 1];
    }
    /**
     * @param {?} option
     * @param {?} options
     * @return {?}
     */
    nextOption(option, options) {
        return options[options.indexOf(option) + 1] || options[0];
    }
    /**
     * @return {?}
     */
    clearSearchText() {
        this._searchText = '';
        this.updateFilterOption();
    }
    /**
     * @param {?=} updateActiveFilter
     * @return {?}
     */
    updateFilterOption(updateActiveFilter = true) {
        if (this.nzFilter) {
            this._filterOptions = new NzOptionPipe().transform(this._options, {
                'searchText': this._searchText,
                'tags': this._isTags,
                'notFoundContent': this._isTags ? this._searchText : this._notFoundContent,
                'disabled': !this._isTags,
                'value': this._isTags ? this._searchText : 'disabled'
            });
        }
        else {
            this._filterOptions = this._options;
        }
        /** TODO: cause pre & next key selection not work */
        if (updateActiveFilter && !this._selectedOption) {
            this._activeFilterOption = this._filterOptions[0];
        }
    }
    /**
     * @param {?} searchValue
     * @return {?}
     */
    onSearchChange(searchValue) {
        this.nzSearchChange.emit(searchValue);
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onClick(e) {
        e.preventDefault();
        if (!this._disabled) {
            this.nzOpen = !this.nzOpen;
            if (this.nzShowSearch) {
                /** wait for search display */
                setTimeout(_ => {
                    this.searchInputElementRef.nativeElement.focus();
                });
            }
        }
    }
    /**
     * @return {?}
     */
    closeDropDown() {
        if (!this.nzOpen) {
            return;
        }
        this.onTouched();
        if (this.nzMultiple) {
            this._renderer.removeStyle(this.searchInputElementRef.nativeElement, 'width');
        }
        this.clearSearchText();
        this.nzOpen = false;
    }
    /**
     * @return {?}
     */
    setClassMap() {
        this._classList.forEach(_className => {
            this._renderer.removeClass(this._el, _className);
        });
        this._classList = [
            this._prefixCls,
            (this._mode === 'combobox') && `${this._prefixCls}-combobox`,
            (!this._disabled) && `${this._prefixCls}-enabled`,
            (this._disabled) && `${this._prefixCls}-disabled`,
            this._isOpen && `${this._prefixCls}-open`,
            this._showSearch && `${this._prefixCls}-show-search`,
            this._size && `${this._prefixCls}-${this._size}`
        ].filter((item) => {
            return !!item;
        });
        this._classList.forEach(_className => {
            this._renderer.addClass(this._el, _className);
        });
        this._selectionClassMap = {
            [this._selectionPrefixCls]: true,
            [`${this._selectionPrefixCls}--single`]: !this.nzMultiple,
            [`${this._selectionPrefixCls}--multiple`]: this.nzMultiple
        };
    }
    /**
     * @return {?}
     */
    setDropDownClassMap() {
        this._dropDownClassMap = {
            [this._dropDownPrefixCls]: true,
            ['component-select']: this._mode === 'combobox',
            [`${this._dropDownPrefixCls}--single`]: !this.nzMultiple,
            [`${this._dropDownPrefixCls}--multiple`]: this.nzMultiple,
            [`${this._dropDownPrefixCls}-placement-bottomLeft`]: this._dropDownPosition === 'bottom',
            [`${this._dropDownPrefixCls}-placement-topLeft`]: this._dropDownPosition === 'top'
        };
    }
    /**
     * @return {?}
     */
    scrollToActive() {
        /** wait for dropdown display */
        setTimeout(_ => {
            if (this._activeFilterOption && this._activeFilterOption.nzValue) {
                const /** @type {?} */ index = this._filterOptions.findIndex(option => option.nzValue === this._activeFilterOption.nzValue);
                try {
                    const /** @type {?} */ scrollPane = this.dropdownUl.nativeElement.children[index];
                    scrollPane.scrollIntoViewIfNeeded(false);
                }
                catch (e) {
                }
            }
        });
    }
    /**
     * @return {?}
     */
    flushComponentState() {
        this.updateFilterOption();
        if (!this.nzMultiple) {
            this.updateSelectedOption(this._value);
        }
        else {
            if (this._value) {
                this.updateSelectedOption(this._value);
            }
        }
    }
    /**
     * @return {?}
     */
    _setTriggerWidth() {
        this._triggerWidth = this._getTriggerRect().width;
    }
    /**
     * @return {?}
     */
    _getTriggerRect() {
        return this.trigger.nativeElement.getBoundingClientRect();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        // this.nzValue = value;
        this._updateValue(value, false);
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.nzDisabled = isDisabled;
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        if (this._value != null) {
            this.flushComponentState();
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.updateFilterOption();
        this.setClassMap();
        this.setDropDownClassMap();
    }
    /**
     * @return {?}
     */
    ngAfterContentChecked() {
        if (this._cacheOptions !== this._options) {
            /** update filter option after every content check cycle */
            this.updateFilterOption();
            this._cacheOptions = this._options;
        }
        else {
            this.updateFilterOption(false);
        }
    }
    /**
     * @param {?} value
     * @param {?=} emitChange
     * @return {?}
     */
    _updateValue(value, emitChange = true) {
        if (this._value === value) {
            return;
        }
        if ((value === null) && this.nzMultiple) {
            this._value = [];
        }
        else {
            this._value = value;
        }
        if (!this.nzMultiple) {
            if (value === null) {
                this._selectedOption = null;
            }
            else {
                this.updateSelectedOption(value);
            }
        }
        else {
            if (value) {
                if (value.length === 0) {
                    this.clearAllSelectedOption(emitChange);
                }
                else {
                    this.updateSelectedOption(value, true);
                }
            }
            else if (value === null) {
                this.clearAllSelectedOption(emitChange);
            }
        }
    }
}
NzSelectComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-select',
                encapsulation: ViewEncapsulation.None,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => NzSelectComponent),
                        multi: true
                    }
                ],
                animations: [
                    DropDownAnimation,
                    TagAnimation
                ],
                template: `
    <div
      #trigger
      nz-overlay-origin
      #origin="nzOverlayOrigin"
      [ngClass]="_selectionClassMap"
      (keydown.Enter)="handleKeyEnterEvent($event)"
      (keydown.Backspace)="handleKeyBackspaceEvent($event)"
      (keydown.ArrowUp)="handleKeyUpEvent($event)"
      (keydown.ArrowDown)="handleKeyDownEvent($event)">
      <div class="ant-select-selection__rendered" *ngIf="!nzShowSearch">
        <div class="ant-select-selection-selected-value">
          {{_selectedOption?.nzLabel}}
        </div>
      </div>
      <div class="ant-select-selection__rendered" *ngIf="nzShowSearch">
        <div
          [hidden]="_searchText||(!nzOpen&&_selectedOption)||_selectedOptions.size"
          class="ant-select-selection__placeholder">
          <ng-template [ngIf]="(!_composing)&&_selectedOption">
            {{_selectedOption.nzLabel}}
          </ng-template>
          <ng-template [ngIf]="(!_composing)&&(!_selectedOption)">
            {{nzPlaceHolder}}
          </ng-template>
        </div>
        <ul *ngIf="nzMultiple">
          <li
            *ngFor="let option of _selectedOptions"
            [@tagAnimation] [attr.title]="option?.nzValue"
            class="ant-select-selection__choice" style="-webkit-user-select: none;">
            <div class="ant-select-selection__choice__content">{{option?.nzLabel}}</div><!----><span class="ant-select-selection__choice__remove" (click)="unSelectMultipleOption(option,$event)"></span>
          </li>
          <li class="ant-select-search ant-select-search--inline">
            <div class="ant-select-search__field__wrap">
              <input
                class="ant-select-search__field"
                (compositionstart)="compositionStart()"
                (compositionend)="compositionEnd();updateWidth(searchInput,_searchText);"
                [(ngModel)]="_searchText"
                (ngModelChange)="updateFilterOption();onSearchChange($event);"
                (keydown)="updateWidth(searchInput,_searchText)"
                (blur)="onTouched()"
                #searchInput>
              <span class="ant-select-search__field__mirror"></span></div>
          </li>
        </ul>
        <div
          *ngIf="!nzMultiple"
          class="ant-select-selection-selected-value"
          [hidden]="!(_selectedOption?.nzLabel)||nzOpen">
          {{_selectedOption?.nzLabel}}
        </div>
        <div *ngIf="!nzMultiple" [hidden]="!nzOpen" class="ant-select-search ant-select-search--inline">
          <div class="ant-select-search__field__wrap">
            <input
              class="ant-select-search__field"
              (blur)="onTouched()"
              (compositionstart)="compositionStart()"
              (compositionend)="compositionEnd()"
              [(ngModel)]="_searchText"
              (ngModelChange)="updateFilterOption();onSearchChange($event);"
              #searchInput>
            <span class="ant-select-search__field__mirror"></span>
          </div>
        </div>
      </div>
      <span
        (click)="onTouched();clearSelect($event)"
        class="ant-select-selection__clear"
        style="-webkit-user-select: none;"
        *ngIf="_selectedOption?.nzLabel&&nzAllowClear&&!nzMultiple">
      </span>
      <span class="ant-select-arrow"><b></b></span></div>
    <ng-template
      nz-connected-overlay
      hasBackdrop
      [origin]="origin"
      (backdropClick)="closeDropDown()"
      (detach)="closeDropDown()"
      (positionChange)="onPositionChange($event)"
      [width]="_triggerWidth"
      [open]="_isOpen">
      <div
        [ngClass]="_dropDownClassMap" [@dropDownAnimation]="_dropDownPosition">
        <div style="overflow: auto;">
          <ul class="ant-select-dropdown-menu ant-select-dropdown-menu-vertical ant-select-dropdown-menu-root" #dropdownUl>
            <li
              *ngFor="let option of _filterOptions"
              [class.ant-select-dropdown-menu-item-disabled]="option.nzDisabled"
              [class.ant-select-dropdown-menu-item-active]="option.nzValue == _activeFilterOption?.nzValue"
              [class.ant-select-dropdown-menu-item-selected]="(option.nzValue==(_selectedOption?.nzValue))||(isInSet(_selectedOptions,option))"
              class="ant-select-dropdown-menu-item"
              (click)="clickOption(option,$event)">
              {{option.nzLabel}}
            </li>
          </ul>
        </div>
      </div>
    </ng-template>`,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-select {
  box-sizing: border-box;
  display: inline-block;
  position: relative;
  color: rgba(0, 0, 0, 0.65);
  font-size: 12px;
}
.ant-select > ul > li > a {
  padding: 0;
  background-color: #fff;
}
.ant-select-arrow {
  font-style: normal;
  vertical-align: baseline;
  text-align: center;
  text-transform: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  position: absolute;
  top: 50%;
  right: 8px;
  line-height: 1;
  margin-top: -6px;
  display: inline-block;
  font-size: 12px;
  font-size: 9px \9;
  transform: scale(0.75) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
}
.ant-select-arrow:before {
  display: block;
  font-family: "anticon" !important;
}
:root .ant-select-arrow {
  filter: none;
}
:root .ant-select-arrow {
  font-size: 12px;
}
.ant-select-arrow * {
  display: none;
}
.ant-select-arrow:before {
  content: '\\e61d';
  transition: transform 0.2s ease;
}
.ant-select-selection {
  outline: none;
  user-select: none;
  box-sizing: border-box;
  display: block;
  background-color: #fff;
  border-radius: 4px;
  border: 1px solid #d9d9d9;
  transition: all 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
}
.ant-select-selection:hover {
  border-color: #6ddab5;
}
.ant-select-focused .ant-select-selection,
.ant-select-selection:focus,
.ant-select-selection:active {
  border-color: #6ddab5;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(63, 206, 158, 0.2);
}
.ant-select-selection__clear {
  display: inline-block;
  font-style: normal;
  vertical-align: baseline;
  text-align: center;
  text-transform: none;
  text-rendering: auto;
  opacity: 0;
  position: absolute;
  right: 8px;
  z-index: 1;
  background: #fff;
  top: 50%;
  font-size: 12px;
  color: rgba(0, 0, 0, 0.25);
  width: 12px;
  height: 12px;
  margin-top: -6px;
  line-height: 12px;
  cursor: pointer;
  transition: color 0.3s ease, opacity 0.15s ease;
}
.ant-select-selection__clear:before {
  display: block;
  font-family: 'anticon';
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  content: "\\e62e";
}
.ant-select-selection__clear:hover {
  color: rgba(0, 0, 0, 0.43);
}
.ant-select-selection:hover .ant-select-selection__clear {
  opacity: 1;
}
.ant-select-selection-selected-value {
  float: left;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  max-width: 100%;
  padding-right: 14px;
}
.ant-select-disabled {
  color: rgba(0, 0, 0, 0.25);
}
.ant-select-disabled .ant-select-selection {
  background: #f7f7f7;
  cursor: not-allowed;
}
.ant-select-disabled .ant-select-selection:hover,
.ant-select-disabled .ant-select-selection:focus,
.ant-select-disabled .ant-select-selection:active {
  border-color: #d9d9d9;
  box-shadow: none;
}
.ant-select-disabled .ant-select-selection__clear {
  display: none;
  visibility: hidden;
  pointer-events: none;
}
.ant-select-disabled .ant-select-selection--multiple .ant-select-selection__choice {
  background: #eee;
  color: #aaa;
  padding-right: 10px;
}
.ant-select-disabled .ant-select-selection--multiple .ant-select-selection__choice__remove {
  display: none;
}
.ant-select-selection--single {
  height: 28px;
  position: relative;
  cursor: pointer;
}
.ant-select-selection__rendered {
  display: block;
  margin-left: 7px;
  margin-right: 7px;
  position: relative;
  line-height: 26px;
}
.ant-select-selection__rendered:after {
  content: '.';
  visibility: hidden;
  pointer-events: none;
  display: inline-block;
  width: 0;
}
.ant-select-lg .ant-select-selection--single {
  height: 32px;
}
.ant-select-lg .ant-select-selection__rendered {
  line-height: 30px;
}
.ant-select-lg .ant-select-selection--multiple {
  min-height: 32px;
}
.ant-select-lg .ant-select-selection--multiple .ant-select-selection__rendered li {
  height: 24px;
  line-height: 24px;
}
.ant-select-lg .ant-select-selection--multiple .ant-select-selection__clear {
  top: 16px;
}
.ant-select-sm .ant-select-selection--single {
  height: 22px;
}
.ant-select-sm .ant-select-selection__rendered {
  line-height: 20px;
}
.ant-select-sm .ant-select-selection--multiple {
  min-height: 22px;
}
.ant-select-sm .ant-select-selection--multiple .ant-select-selection__rendered li {
  height: 14px;
  line-height: 14px;
}
.ant-select-sm .ant-select-selection--multiple .ant-select-selection__clear {
  top: 11px;
}
.ant-select-disabled .ant-select-selection__choice__remove {
  color: rgba(0, 0, 0, 0.25);
  cursor: default;
}
.ant-select-disabled .ant-select-selection__choice__remove:hover {
  color: rgba(0, 0, 0, 0.25);
}
.ant-select-search__field__wrap {
  display: inline-block;
  position: relative;
}
.ant-select-selection__placeholder,
.ant-select-search__field__placeholder {
  position: absolute;
  top: 50%;
  left: 0;
  right: 9px;
  color: rgba(0, 0, 0, 0.25);
  line-height: 20px;
  height: 20px;
  max-width: 100%;
  margin-top: -10px;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  text-align: left;
}
.ant-select-search__field__placeholder {
  left: 8px;
}
.ant-select-search--inline {
  position: absolute;
  height: 100%;
  width: 100%;
}
.ant-select-selection--multiple .ant-select-search--inline {
  float: left;
  position: static;
}
.ant-select-search--inline .ant-select-search__field__wrap {
  width: 100%;
  height: 100%;
}
.ant-select-search--inline .ant-select-search__field {
  border-width: 0;
  font-size: 100%;
  height: 100%;
  width: 100%;
  background: transparent;
  outline: 0;
  border-radius: 4px;
}
.ant-select-search--inline .ant-select-search__field__mirror {
  position: absolute;
  top: 0;
  left: -9999px;
  white-space: pre;
  pointer-events: none;
}
.ant-select-search--inline > i {
  float: right;
}
.ant-select-selection--multiple {
  min-height: 28px;
  cursor: text;
  padding-bottom: 3px;
  zoom: 1;
}
.ant-select-selection--multiple:before,
.ant-select-selection--multiple:after {
  content: " ";
  display: table;
}
.ant-select-selection--multiple:after {
  clear: both;
  visibility: hidden;
  font-size: 0;
  height: 0;
}
.ant-select-selection--multiple .ant-select-search--inline {
  width: auto;
  padding: 0;
  max-width: 100%;
}
.ant-select-selection--multiple .ant-select-search--inline .ant-select-search__field {
  max-width: 100%;
  width: 0.75em;
}
.ant-select-selection--multiple .ant-select-selection__rendered {
  margin-left: 5px;
  margin-bottom: -3px;
  height: auto;
}
.ant-select-selection--multiple > ul > li,
.ant-select-selection--multiple .ant-select-selection__rendered > ul > li {
  margin-top: 3px;
  height: 20px;
  line-height: 20px;
}
.ant-select-selection--multiple .ant-select-selection__choice {
  color: rgba(0, 0, 0, 0.65);
  background-color: #f3f3f3;
  border-radius: 4px;
  cursor: default;
  float: left;
  margin-right: 4px;
  max-width: 99%;
  position: relative;
  overflow: hidden;
  transition: padding 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
  padding: 0 20px 0 10px;
}
.ant-select-selection--multiple .ant-select-selection__choice__disabled {
  padding: 0 10px;
}
.ant-select-selection--multiple .ant-select-selection__choice__content {
  display: inline-block;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  max-width: 100%;
  transition: margin 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
}
.ant-select-selection--multiple .ant-select-selection__choice__remove {
  font-style: normal;
  vertical-align: baseline;
  text-align: center;
  text-transform: none;
  line-height: 1;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  color: rgba(0, 0, 0, 0.43);
  line-height: inherit;
  cursor: pointer;
  font-weight: bold;
  transition: all 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
  display: inline-block;
  font-size: 12px;
  font-size: 8px \9;
  transform: scale(0.66666667) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
  position: absolute;
  right: 4px;
  padding: 0 0 0 8px;
}
.ant-select-selection--multiple .ant-select-selection__choice__remove:before {
  display: block;
  font-family: "anticon" !important;
}
:root .ant-select-selection--multiple .ant-select-selection__choice__remove {
  filter: none;
}
:root .ant-select-selection--multiple .ant-select-selection__choice__remove {
  font-size: 12px;
}
.ant-select-selection--multiple .ant-select-selection__choice__remove:hover {
  color: #404040;
}
.ant-select-selection--multiple .ant-select-selection__choice__remove:before {
  content: "\\e633";
}
.ant-select-selection--multiple .ant-select-selection__clear {
  top: 14px;
}
.ant-select-allow-clear .ant-select-selection--multiple .ant-select-selection__rendered {
  margin-right: 20px;
}
.ant-select-open .ant-select-arrow {
  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=2)";
  -ms-transform: rotate(180deg);
}
.ant-select-open .ant-select-arrow:before {
  transform: rotate(180deg);
}
.ant-select-open .ant-select-selection {
  border-color: #6ddab5;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(63, 206, 158, 0.2);
}
.ant-select-combobox .ant-select-arrow {
  display: none;
}
.ant-select-combobox .ant-select-search--inline {
  height: 100%;
  width: 100%;
  float: none;
}
.ant-select-combobox .ant-select-search__field__wrap {
  width: 100%;
  height: 100%;
}
.ant-select-combobox .ant-select-search__field {
  width: 100%;
  height: 100%;
  position: relative;
  z-index: 1;
  transition: all 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
  box-shadow: none;
}
.ant-select-combobox.ant-select-allow-clear .ant-select-selection:hover .ant-select-selection__rendered {
  margin-right: 20px;
}
.ant-select-dropdown {
  background-color: #fff;
  box-shadow: 0 1px 6px rgba(0, 0, 0, 0.2);
  border-radius: 4px;
  box-sizing: border-box;
  z-index: 1050;
  left: -9999px;
  top: -9999px;
  position: absolute;
  outline: none;
  overflow: hidden;
  font-size: 12px;
}
.ant-select-dropdown.slide-up-enter.slide-up-enter-active.ant-select-dropdown-placement-bottomLeft,
.ant-select-dropdown.slide-up-appear.slide-up-appear-active.ant-select-dropdown-placement-bottomLeft {
  animation-name: antSlideUpIn;
}
.ant-select-dropdown.slide-up-enter.slide-up-enter-active.ant-select-dropdown-placement-topLeft,
.ant-select-dropdown.slide-up-appear.slide-up-appear-active.ant-select-dropdown-placement-topLeft {
  animation-name: antSlideDownIn;
}
.ant-select-dropdown.slide-up-leave.slide-up-leave-active.ant-select-dropdown-placement-bottomLeft {
  animation-name: antSlideUpOut;
}
.ant-select-dropdown.slide-up-leave.slide-up-leave-active.ant-select-dropdown-placement-topLeft {
  animation-name: antSlideDownOut;
}
.ant-select-dropdown-hidden {
  display: none;
}
.ant-select-dropdown-menu {
  outline: none;
  margin-bottom: 0;
  padding-left: 0;
  list-style: none;
  max-height: 250px;
  overflow: auto;
}
.ant-select-dropdown-menu-item-group-list {
  margin: 0;
  padding: 0;
}
.ant-select-dropdown-menu-item-group-list > .ant-select-dropdown-menu-item {
  padding-left: 16px;
}
.ant-select-dropdown-menu-item-group-title {
  color: rgba(0, 0, 0, 0.43);
  line-height: 1.5;
  padding: 8px;
}
.ant-select-dropdown-menu-item {
  position: relative;
  display: block;
  padding: 7px 8px;
  font-weight: normal;
  color: rgba(0, 0, 0, 0.65);
  white-space: nowrap;
  cursor: pointer;
  overflow: hidden;
  transition: background 0.3s ease;
}
.ant-select-dropdown-menu-item:hover {
  background-color: #f0fbf7;
}
.ant-select-dropdown-menu-item-active {
  background-color: #f0fbf7;
}
.ant-select-dropdown-menu-item-disabled {
  color: rgba(0, 0, 0, 0.25);
  cursor: not-allowed;
}
.ant-select-dropdown-menu-item-disabled:hover {
  color: rgba(0, 0, 0, 0.25);
  background-color: #fff;
  cursor: not-allowed;
}
.ant-select-dropdown-menu-item-selected,
.ant-select-dropdown-menu-item-selected:hover {
  background-color: #f7f7f7;
  font-weight: bold;
  color: rgba(0, 0, 0, 0.65);
}
.ant-select-dropdown-menu-item-divider {
  height: 1px;
  margin: 1px 0;
  overflow: hidden;
  background-color: #e5e5e5;
  line-height: 0;
}
.ant-select-dropdown.ant-select-dropdown--multiple .ant-select-dropdown-menu-item:after {
  font-family: 'anticon';
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  content: "\\e632";
  color: transparent;
  display: inline-block;
  font-size: 12px;
  font-size: 10px \9;
  transform: scale(0.83333333) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
  transition: all 0.2s ease;
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  right: 8px;
  font-weight: bold;
  text-shadow: 0 0.1px 0, 0.1px 0 0, 0 -0.1px 0, -0.1px 0;
}
:root .ant-select-dropdown.ant-select-dropdown--multiple .ant-select-dropdown-menu-item:after {
  filter: none;
}
:root .ant-select-dropdown.ant-select-dropdown--multiple .ant-select-dropdown-menu-item:after {
  font-size: 12px;
}
.ant-select-dropdown.ant-select-dropdown--multiple .ant-select-dropdown-menu-item:hover:after {
  color: #ddd;
}
.ant-select-dropdown.ant-select-dropdown--multiple .ant-select-dropdown-menu-item-disabled:after {
  display: none;
}
.ant-select-dropdown.ant-select-dropdown--multiple .ant-select-dropdown-menu-item-selected:after,
.ant-select-dropdown.ant-select-dropdown--multiple .ant-select-dropdown-menu-item-selected:hover:after {
  color: #3FCE9E;
  display: inline-block;
}
.ant-select-dropdown-container-open .ant-select-dropdown,
.ant-select-dropdown-open .ant-select-dropdown {
  display: block;
}
`,
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-select {
  box-sizing: border-box;
  display: inline-block;
  position: relative;
  color: rgba(0, 0, 0, 0.65);
  font-size: 12px;
}
.ant-select > ul > li > a {
  padding: 0;
  background-color: #fff;
}
.ant-select-arrow {
  font-style: normal;
  vertical-align: baseline;
  text-align: center;
  text-transform: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  position: absolute;
  top: 50%;
  right: 8px;
  line-height: 1;
  margin-top: -6px;
  display: inline-block;
  font-size: 12px;
  font-size: 9px \9;
  transform: scale(0.75) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
}
.ant-select-arrow:before {
  display: block;
  font-family: "anticon" !important;
}
:root .ant-select-arrow {
  filter: none;
}
:root .ant-select-arrow {
  font-size: 12px;
}
.ant-select-arrow * {
  display: none;
}
.ant-select-arrow:before {
  content: '\\e61d';
  transition: transform 0.2s ease;
}
.ant-select-selection {
  outline: none;
  user-select: none;
  box-sizing: border-box;
  display: block;
  background-color: #fff;
  border-radius: 4px;
  border: 1px solid #d9d9d9;
  transition: all 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
}
.ant-select-selection:hover {
  border-color: #6ddab5;
}
.ant-select-focused .ant-select-selection,
.ant-select-selection:focus,
.ant-select-selection:active {
  border-color: #6ddab5;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(63, 206, 158, 0.2);
}
.ant-select-selection__clear {
  display: inline-block;
  font-style: normal;
  vertical-align: baseline;
  text-align: center;
  text-transform: none;
  text-rendering: auto;
  opacity: 0;
  position: absolute;
  right: 8px;
  z-index: 1;
  background: #fff;
  top: 50%;
  font-size: 12px;
  color: rgba(0, 0, 0, 0.25);
  width: 12px;
  height: 12px;
  margin-top: -6px;
  line-height: 12px;
  cursor: pointer;
  transition: color 0.3s ease, opacity 0.15s ease;
}
.ant-select-selection__clear:before {
  display: block;
  font-family: 'anticon';
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  content: "\\e62e";
}
.ant-select-selection__clear:hover {
  color: rgba(0, 0, 0, 0.43);
}
.ant-select-selection:hover .ant-select-selection__clear {
  opacity: 1;
}
.ant-select-selection-selected-value {
  float: left;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  max-width: 100%;
  padding-right: 14px;
}
.ant-select-disabled {
  color: rgba(0, 0, 0, 0.25);
}
.ant-select-disabled .ant-select-selection {
  background: #f7f7f7;
  cursor: not-allowed;
}
.ant-select-disabled .ant-select-selection:hover,
.ant-select-disabled .ant-select-selection:focus,
.ant-select-disabled .ant-select-selection:active {
  border-color: #d9d9d9;
  box-shadow: none;
}
.ant-select-disabled .ant-select-selection__clear {
  display: none;
  visibility: hidden;
  pointer-events: none;
}
.ant-select-disabled .ant-select-selection--multiple .ant-select-selection__choice {
  background: #eee;
  color: #aaa;
  padding-right: 10px;
}
.ant-select-disabled .ant-select-selection--multiple .ant-select-selection__choice__remove {
  display: none;
}
.ant-select-selection--single {
  height: 28px;
  position: relative;
  cursor: pointer;
}
.ant-select-selection__rendered {
  display: block;
  margin-left: 7px;
  margin-right: 7px;
  position: relative;
  line-height: 26px;
}
.ant-select-selection__rendered:after {
  content: '.';
  visibility: hidden;
  pointer-events: none;
  display: inline-block;
  width: 0;
}
.ant-select-lg .ant-select-selection--single {
  height: 32px;
}
.ant-select-lg .ant-select-selection__rendered {
  line-height: 30px;
}
.ant-select-lg .ant-select-selection--multiple {
  min-height: 32px;
}
.ant-select-lg .ant-select-selection--multiple .ant-select-selection__rendered li {
  height: 24px;
  line-height: 24px;
}
.ant-select-lg .ant-select-selection--multiple .ant-select-selection__clear {
  top: 16px;
}
.ant-select-sm .ant-select-selection--single {
  height: 22px;
}
.ant-select-sm .ant-select-selection__rendered {
  line-height: 20px;
}
.ant-select-sm .ant-select-selection--multiple {
  min-height: 22px;
}
.ant-select-sm .ant-select-selection--multiple .ant-select-selection__rendered li {
  height: 14px;
  line-height: 14px;
}
.ant-select-sm .ant-select-selection--multiple .ant-select-selection__clear {
  top: 11px;
}
.ant-select-disabled .ant-select-selection__choice__remove {
  color: rgba(0, 0, 0, 0.25);
  cursor: default;
}
.ant-select-disabled .ant-select-selection__choice__remove:hover {
  color: rgba(0, 0, 0, 0.25);
}
.ant-select-search__field__wrap {
  display: inline-block;
  position: relative;
}
.ant-select-selection__placeholder,
.ant-select-search__field__placeholder {
  position: absolute;
  top: 50%;
  left: 0;
  right: 9px;
  color: rgba(0, 0, 0, 0.25);
  line-height: 20px;
  height: 20px;
  max-width: 100%;
  margin-top: -10px;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  text-align: left;
}
.ant-select-search__field__placeholder {
  left: 8px;
}
.ant-select-search--inline {
  position: absolute;
  height: 100%;
  width: 100%;
}
.ant-select-selection--multiple .ant-select-search--inline {
  float: left;
  position: static;
}
.ant-select-search--inline .ant-select-search__field__wrap {
  width: 100%;
  height: 100%;
}
.ant-select-search--inline .ant-select-search__field {
  border-width: 0;
  font-size: 100%;
  height: 100%;
  width: 100%;
  background: transparent;
  outline: 0;
  border-radius: 4px;
}
.ant-select-search--inline .ant-select-search__field__mirror {
  position: absolute;
  top: 0;
  left: -9999px;
  white-space: pre;
  pointer-events: none;
}
.ant-select-search--inline > i {
  float: right;
}
.ant-select-selection--multiple {
  min-height: 28px;
  cursor: text;
  padding-bottom: 3px;
  zoom: 1;
}
.ant-select-selection--multiple:before,
.ant-select-selection--multiple:after {
  content: " ";
  display: table;
}
.ant-select-selection--multiple:after {
  clear: both;
  visibility: hidden;
  font-size: 0;
  height: 0;
}
.ant-select-selection--multiple .ant-select-search--inline {
  width: auto;
  padding: 0;
  max-width: 100%;
}
.ant-select-selection--multiple .ant-select-search--inline .ant-select-search__field {
  max-width: 100%;
  width: 0.75em;
}
.ant-select-selection--multiple .ant-select-selection__rendered {
  margin-left: 5px;
  margin-bottom: -3px;
  height: auto;
}
.ant-select-selection--multiple > ul > li,
.ant-select-selection--multiple .ant-select-selection__rendered > ul > li {
  margin-top: 3px;
  height: 20px;
  line-height: 20px;
}
.ant-select-selection--multiple .ant-select-selection__choice {
  color: rgba(0, 0, 0, 0.65);
  background-color: #f3f3f3;
  border-radius: 4px;
  cursor: default;
  float: left;
  margin-right: 4px;
  max-width: 99%;
  position: relative;
  overflow: hidden;
  transition: padding 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
  padding: 0 20px 0 10px;
}
.ant-select-selection--multiple .ant-select-selection__choice__disabled {
  padding: 0 10px;
}
.ant-select-selection--multiple .ant-select-selection__choice__content {
  display: inline-block;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  max-width: 100%;
  transition: margin 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
}
.ant-select-selection--multiple .ant-select-selection__choice__remove {
  font-style: normal;
  vertical-align: baseline;
  text-align: center;
  text-transform: none;
  line-height: 1;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  color: rgba(0, 0, 0, 0.43);
  line-height: inherit;
  cursor: pointer;
  font-weight: bold;
  transition: all 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
  display: inline-block;
  font-size: 12px;
  font-size: 8px \9;
  transform: scale(0.66666667) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
  position: absolute;
  right: 4px;
  padding: 0 0 0 8px;
}
.ant-select-selection--multiple .ant-select-selection__choice__remove:before {
  display: block;
  font-family: "anticon" !important;
}
:root .ant-select-selection--multiple .ant-select-selection__choice__remove {
  filter: none;
}
:root .ant-select-selection--multiple .ant-select-selection__choice__remove {
  font-size: 12px;
}
.ant-select-selection--multiple .ant-select-selection__choice__remove:hover {
  color: #404040;
}
.ant-select-selection--multiple .ant-select-selection__choice__remove:before {
  content: "\\e633";
}
.ant-select-selection--multiple .ant-select-selection__clear {
  top: 14px;
}
.ant-select-allow-clear .ant-select-selection--multiple .ant-select-selection__rendered {
  margin-right: 20px;
}
.ant-select-open .ant-select-arrow {
  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=2)";
  -ms-transform: rotate(180deg);
}
.ant-select-open .ant-select-arrow:before {
  transform: rotate(180deg);
}
.ant-select-open .ant-select-selection {
  border-color: #6ddab5;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(63, 206, 158, 0.2);
}
.ant-select-combobox .ant-select-arrow {
  display: none;
}
.ant-select-combobox .ant-select-search--inline {
  height: 100%;
  width: 100%;
  float: none;
}
.ant-select-combobox .ant-select-search__field__wrap {
  width: 100%;
  height: 100%;
}
.ant-select-combobox .ant-select-search__field {
  width: 100%;
  height: 100%;
  position: relative;
  z-index: 1;
  transition: all 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
  box-shadow: none;
}
.ant-select-combobox.ant-select-allow-clear .ant-select-selection:hover .ant-select-selection__rendered {
  margin-right: 20px;
}
.ant-select-dropdown {
  background-color: #fff;
  box-shadow: 0 1px 6px rgba(0, 0, 0, 0.2);
  border-radius: 4px;
  box-sizing: border-box;
  z-index: 1050;
  left: -9999px;
  top: -9999px;
  position: absolute;
  outline: none;
  overflow: hidden;
  font-size: 12px;
}
.ant-select-dropdown.slide-up-enter.slide-up-enter-active.ant-select-dropdown-placement-bottomLeft,
.ant-select-dropdown.slide-up-appear.slide-up-appear-active.ant-select-dropdown-placement-bottomLeft {
  animation-name: antSlideUpIn;
}
.ant-select-dropdown.slide-up-enter.slide-up-enter-active.ant-select-dropdown-placement-topLeft,
.ant-select-dropdown.slide-up-appear.slide-up-appear-active.ant-select-dropdown-placement-topLeft {
  animation-name: antSlideDownIn;
}
.ant-select-dropdown.slide-up-leave.slide-up-leave-active.ant-select-dropdown-placement-bottomLeft {
  animation-name: antSlideUpOut;
}
.ant-select-dropdown.slide-up-leave.slide-up-leave-active.ant-select-dropdown-placement-topLeft {
  animation-name: antSlideDownOut;
}
.ant-select-dropdown-hidden {
  display: none;
}
.ant-select-dropdown-menu {
  outline: none;
  margin-bottom: 0;
  padding-left: 0;
  list-style: none;
  max-height: 250px;
  overflow: auto;
}
.ant-select-dropdown-menu-item-group-list {
  margin: 0;
  padding: 0;
}
.ant-select-dropdown-menu-item-group-list > .ant-select-dropdown-menu-item {
  padding-left: 16px;
}
.ant-select-dropdown-menu-item-group-title {
  color: rgba(0, 0, 0, 0.43);
  line-height: 1.5;
  padding: 8px;
}
.ant-select-dropdown-menu-item {
  position: relative;
  display: block;
  padding: 7px 8px;
  font-weight: normal;
  color: rgba(0, 0, 0, 0.65);
  white-space: nowrap;
  cursor: pointer;
  overflow: hidden;
  transition: background 0.3s ease;
}
.ant-select-dropdown-menu-item:hover {
  background-color: #f0fbf7;
}
.ant-select-dropdown-menu-item-active {
  background-color: #f0fbf7;
}
.ant-select-dropdown-menu-item-disabled {
  color: rgba(0, 0, 0, 0.25);
  cursor: not-allowed;
}
.ant-select-dropdown-menu-item-disabled:hover {
  color: rgba(0, 0, 0, 0.25);
  background-color: #fff;
  cursor: not-allowed;
}
.ant-select-dropdown-menu-item-selected,
.ant-select-dropdown-menu-item-selected:hover {
  background-color: #f7f7f7;
  font-weight: bold;
  color: rgba(0, 0, 0, 0.65);
}
.ant-select-dropdown-menu-item-divider {
  height: 1px;
  margin: 1px 0;
  overflow: hidden;
  background-color: #e5e5e5;
  line-height: 0;
}
.ant-select-dropdown.ant-select-dropdown--multiple .ant-select-dropdown-menu-item:after {
  font-family: 'anticon';
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  content: "\\e632";
  color: transparent;
  display: inline-block;
  font-size: 12px;
  font-size: 10px \9;
  transform: scale(0.83333333) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
  transition: all 0.2s ease;
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  right: 8px;
  font-weight: bold;
  text-shadow: 0 0.1px 0, 0.1px 0 0, 0 -0.1px 0, -0.1px 0;
}
:root .ant-select-dropdown.ant-select-dropdown--multiple .ant-select-dropdown-menu-item:after {
  filter: none;
}
:root .ant-select-dropdown.ant-select-dropdown--multiple .ant-select-dropdown-menu-item:after {
  font-size: 12px;
}
.ant-select-dropdown.ant-select-dropdown--multiple .ant-select-dropdown-menu-item:hover:after {
  color: #ddd;
}
.ant-select-dropdown.ant-select-dropdown--multiple .ant-select-dropdown-menu-item-disabled:after {
  display: none;
}
.ant-select-dropdown.ant-select-dropdown--multiple .ant-select-dropdown-menu-item-selected:after,
.ant-select-dropdown.ant-select-dropdown--multiple .ant-select-dropdown-menu-item-selected:hover:after {
  color: #3FCE9E;
  display: inline-block;
}
.ant-select-dropdown-container-open .ant-select-dropdown,
.ant-select-dropdown-open .ant-select-dropdown {
  display: block;
}
nz-select .ant-select {
  width: 100%;
}
.ant-select-dropdown {
  top: 100%;
  left: 0;
  position: relative;
  width: 100%;
  margin-top: 4px;
  margin-bottom: 4px;
}
.ant-select-dropdown.ant-select-dropdown-placement-topLeft {
  top: -100%;
  transform: translateY(-100%) !important;
}
.ant-select-dropdown-menu-item {
  line-height: 1.5;
}
`
                ]
            },] },
];
/**
 * @nocollapse
 */
NzSelectComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
];
NzSelectComponent.propDecorators = {
    'searchInputElementRef': [{ type: ViewChild, args: ['searchInput',] },],
    'trigger': [{ type: ViewChild, args: ['trigger',] },],
    'dropdownUl': [{ type: ViewChild, args: ['dropdownUl',] },],
    'nzSearchChange': [{ type: Output },],
    'nzOpenChange': [{ type: Output },],
    'nzFilter': [{ type: Input },],
    'nzMaxMultiple': [{ type: Input },],
    'nzAllowClear': [{ type: Input },],
    'nzKeepUnListOptions': [{ type: Input },],
    'nzMode': [{ type: Input },],
    'nzMultiple': [{ type: Input },],
    'nzPlaceHolder': [{ type: Input },],
    'nzNotFoundContent': [{ type: Input },],
    'nzSize': [{ type: Input },],
    'nzShowSearch': [{ type: Input },],
    'nzTags': [{ type: Input },],
    'nzDisabled': [{ type: Input },],
    'nzOpen': [{ type: Input },],
    'onClick': [{ type: HostListener, args: ['click', ['$event'],] },],
};

class NzOptionComponent {
    /**
     * @param {?} _nzSelect
     */
    constructor(_nzSelect) {
        this._nzSelect = _nzSelect;
        this._disabled = false;
        this._nzSelect.addOption(this);
    }
    /**
     * @return {?}
     */
    get nzValue() {
        return this._value;
    }
    ;
    /**
     * @param {?} value
     * @return {?}
     */
    set nzValue(value) {
        if (this._value === value) {
            return;
        }
        this._value = value;
    }
    /**
     * @return {?}
     */
    get nzLabel() {
        return this._label;
    }
    ;
    /**
     * @param {?} value
     * @return {?}
     */
    set nzLabel(value) {
        if (this._label === value) {
            return;
        }
        this._label = value;
    }
    /**
     * @return {?}
     */
    get nzDisabled() {
        return this._disabled;
    }
    ;
    /**
     * @param {?} value
     * @return {?}
     */
    set nzDisabled(value) {
        this._disabled = value;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._nzSelect.removeOption(this);
    }
}
NzOptionComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-option',
                encapsulation: ViewEncapsulation.None,
                template: `
    <ng-content></ng-content>
  `,
                styles: []
            },] },
];
/**
 * @nocollapse
 */
NzOptionComponent.ctorParameters = () => [
    { type: NzSelectComponent, },
];
NzOptionComponent.propDecorators = {
    'nzValue': [{ type: Input },],
    'nzLabel': [{ type: Input },],
    'nzDisabled': [{ type: Input },],
};

class NzSelectModule {
}
NzSelectModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, FormsModule, OverlayModule],
                declarations: [NzOptionPipe, NzOptionComponent, NzSelectComponent],
                exports: [NzOptionPipe, NzOptionComponent, NzSelectComponent]
            },] },
];
/**
 * @nocollapse
 */
NzSelectModule.ctorParameters = () => [];

class NzRadioGroupComponent {
    /**
     * @param {?} _elementRef
     * @param {?} _render
     */
    constructor(_elementRef, _render) {
        this._elementRef = _elementRef;
        this._render = _render;
        this._prefixCls = 'ant-radio-group';
        // ngModel Access
        this.onChange = Function.prototype;
        this.onTouched = Function.prototype;
        this.radios = [];
        this._el = this._elementRef.nativeElement;
    }
    /**
     * @return {?}
     */
    get nzSize() {
        return this._size;
    }
    ;
    /**
     * @param {?} value
     * @return {?}
     */
    set nzSize(value) {
        this._size = value;
    }
    /**
     * @return {?}
     */
    get isLarge() {
        return this._size === 'large';
    }
    ;
    /**
     * @return {?}
     */
    get isSmall() {
        return this._size === 'small';
    }
    ;
    /**
     * @param {?} radio
     * @return {?}
     */
    addRadio(radio) {
        this.radios.push(radio);
    }
    /**
     * @param {?} radio
     * @return {?}
     */
    selectRadio(radio) {
        this.updateValue(radio.nzValue);
        this.onChange(radio.nzValue);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    updateValue(value) {
        if (this._value === value) {
            return;
        }
        this._value = value;
        this.radios.forEach((item) => {
            item.nzChecked = item.nzValue === this._value;
        });
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.radios.forEach((item) => {
            item.nzChecked = item.nzValue === this._value;
        });
        /** trim text node between radio button */
        Array.from(this._el.childNodes).forEach(node => {
            if (node.nodeType === 3) {
                this._el.removeChild(node);
            }
        });
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.updateValue(value);
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.radios.forEach((radio) => {
            radio.nzDisabled = isDisabled;
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._render.setElementClass(this._el, `${this._prefixCls}`, true);
    }
}
NzRadioGroupComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-radio-group',
                encapsulation: ViewEncapsulation.None,
                template: `
    <ng-content></ng-content>`,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => NzRadioGroupComponent),
                        multi: true
                    }
                ],
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-radio-group {
  display: inline-block;
  font-size: 12px;
}
.ant-radio-wrapper {
  font-size: 12px;
  display: inline-block;
  position: relative;
  white-space: nowrap;
  margin-right: 8px;
  cursor: pointer;
}
.ant-radio {
  white-space: nowrap;
  outline: none;
  display: inline-block;
  position: relative;
  line-height: 1;
  vertical-align: text-bottom;
  cursor: pointer;
}
.ant-radio-wrapper:hover .ant-radio .ant-radio-inner,
.ant-radio:hover .ant-radio-inner,
.ant-radio-focused .ant-radio-inner {
  border-color: #3FCE9E;
}
.ant-radio-checked:after {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  border-radius: 50%;
  border: 1px solid #3FCE9E;
  content: '';
  animation: antRadioEffect 0.36s ease-in-out;
  animation-fill-mode: both;
  visibility: hidden;
}
.ant-radio:hover:after,
.ant-radio-wrapper:hover .ant-radio:after {
  visibility: visible;
}
.ant-radio-inner {
  position: relative;
  top: 0;
  left: 0;
  display: block;
  width: 14px;
  height: 14px;
  border-width: 1px;
  border-style: solid;
  border-radius: 14px;
  border-color: #d9d9d9;
  background-color: #fff;
  transition: all 0.3s;
}
.ant-radio-inner:after {
  position: absolute;
  width: 6px;
  height: 6px;
  left: 3px;
  top: 3px;
  border-radius: 4px;
  display: table;
  border-top: 0;
  border-left: 0;
  content: ' ';
  background-color: #3FCE9E;
  opacity: 0;
  transform: scale(0);
  transition: all 0.3s cubic-bezier(0.78, 0.14, 0.15, 0.86);
}
.ant-radio-input {
  position: absolute;
  left: 0;
  z-index: 1;
  cursor: pointer;
  opacity: 0;
  top: 0;
  bottom: 0;
  right: 0;
}
.ant-radio-checked .ant-radio-inner {
  border-color: #3FCE9E;
}
.ant-radio-checked .ant-radio-inner:after {
  transform: scale(1);
  opacity: 1;
  transition: all 0.3s cubic-bezier(0.78, 0.14, 0.15, 0.86);
}
.ant-radio-disabled .ant-radio-inner {
  border-color: #d9d9d9 !important;
  background-color: #f7f7f7;
}
.ant-radio-disabled .ant-radio-inner:after {
  background-color: #ccc;
}
.ant-radio-disabled .ant-radio-input {
  cursor: not-allowed;
}
.ant-radio-disabled + span {
  color: rgba(0, 0, 0, 0.25);
  cursor: not-allowed;
}
span.ant-radio + * {
  padding-left: 8px;
  padding-right: 8px;
}
.ant-radio-button-wrapper {
  margin: 0;
  height: 28px;
  line-height: 26px;
  color: rgba(0, 0, 0, 0.65);
  display: inline-block;
  transition: all 0.3s ease;
  cursor: pointer;
  border: 1px solid #d9d9d9;
  border-left: 0;
  background: #fff;
  padding: 0 16px;
  position: relative;
}
.ant-radio-button-wrapper a {
  color: rgba(0, 0, 0, 0.65);
}
.ant-radio-button-wrapper > .ant-radio-button {
  margin-left: 0;
  display: block;
  width: 0;
  height: 0;
}
.ant-radio-group-large .ant-radio-button-wrapper {
  height: 32px;
  line-height: 30px;
}
.ant-radio-group-small .ant-radio-button-wrapper {
  height: 22px;
  line-height: 20px;
  padding: 0 12px;
}
.ant-radio-group-small .ant-radio-button-wrapper:first-child {
  border-radius: 2px 0 0 2px;
}
.ant-radio-group-small .ant-radio-button-wrapper:last-child {
  border-radius: 0 2px 2px 0;
}
.ant-radio-button-wrapper:not(:first-child)::before {
  content: "";
  display: block;
  top: 0;
  left: -1px;
  width: 1px;
  height: 100%;
  position: absolute;
  background-color: #d9d9d9;
}
.ant-radio-button-wrapper:first-child {
  border-radius: 4px 0 0 4px;
  border-left: 1px solid #d9d9d9;
}
.ant-radio-button-wrapper:last-child {
  border-radius: 0 4px 4px 0;
}
.ant-radio-button-wrapper:first-child:last-child {
  border-radius: 4px;
}
.ant-radio-button-wrapper:hover,
.ant-radio-button-wrapper-focused {
  color: #3FCE9E;
  position: relative;
}
.ant-radio-button-wrapper .ant-radio-inner,
.ant-radio-button-wrapper input[type="checkbox"],
.ant-radio-button-wrapper input[type="radio"] {
  opacity: 0;
  filter: alpha(opacity=0);
  width: 0;
  height: 0;
}
.ant-radio-button-wrapper-checked {
  background: #fff;
  border-color: #3FCE9E;
  color: #3FCE9E;
  box-shadow: -1px 0 0 0 #3FCE9E;
  z-index: 1;
}
.ant-radio-button-wrapper-checked::before {
  background-color: #3FCE9E !important;
  opacity: 0.1;
}
.ant-radio-button-wrapper-checked:first-child {
  border-color: #3FCE9E;
  box-shadow: none !important;
}
.ant-radio-button-wrapper-checked:hover {
  border-color: #6ddab5;
  box-shadow: -1px 0 0 0 #6ddab5;
  color: #6ddab5;
}
.ant-radio-button-wrapper-checked:active {
  border-color: #36b38c;
  box-shadow: -1px 0 0 0 #36b38c;
  color: #36b38c;
}
.ant-radio-button-wrapper-disabled {
  border-color: #d9d9d9;
  background-color: #f7f7f7;
  cursor: not-allowed;
  color: rgba(0, 0, 0, 0.25);
}
.ant-radio-button-wrapper-disabled:first-child,
.ant-radio-button-wrapper-disabled:hover {
  border-color: #d9d9d9;
  background-color: #f7f7f7;
  color: rgba(0, 0, 0, 0.25);
}
.ant-radio-button-wrapper-disabled:first-child {
  border-left-color: #d9d9d9;
}
.ant-radio-button-wrapper-disabled.ant-radio-button-wrapper-checked {
  color: #fff;
  background-color: #e6e6e6;
  border-color: #d9d9d9;
  box-shadow: none;
}
@keyframes antRadioEffect {
  0% {
    transform: scale(1);
    opacity: 0.5;
  }
  100% {
    transform: scale(1.6);
    opacity: 0;
  }
}
`
                ]
            },] },
];
/**
 * @nocollapse
 */
NzRadioGroupComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer, },
];
NzRadioGroupComponent.propDecorators = {
    'nzSize': [{ type: Input },],
    'isLarge': [{ type: HostBinding, args: ['class.ant-radio-group-large',] },],
    'isSmall': [{ type: HostBinding, args: ['class.ant-radio-group-small',] },],
};

class NzRadioComponent {
    /**
     * @param {?} _elementRef
     * @param {?} _renderer
     * @param {?} _nzRadioGroup
     */
    constructor(_elementRef, _renderer, _nzRadioGroup) {
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this._nzRadioGroup = _nzRadioGroup;
        this._prefixCls = 'ant-radio';
        this._innerPrefixCls = `${this._prefixCls}-inner`;
        this._inputPrefixCls = `${this._prefixCls}-input`;
        this._checked = false;
        this._focused = false;
        this._disabled = false;
        this._el = this._elementRef.nativeElement;
        this._nzRadioGroup.addRadio(this);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzChecked(value) {
        this._checked = value;
        this.setClassMap();
    }
    /**
     * @return {?}
     */
    get nzChecked() {
        return this._checked;
    }
    ;
    /**
     * @return {?}
     */
    get nzValue() {
        return this._value;
    }
    ;
    /**
     * @param {?} value
     * @return {?}
     */
    set nzValue(value) {
        if (this._value === value) {
            return;
        }
        this._value = value;
    }
    /**
     * @return {?}
     */
    get nzDisabled() {
        return this._disabled;
    }
    ;
    /**
     * @param {?} value
     * @return {?}
     */
    set nzDisabled(value) {
        this._disabled = value;
        this.setClassMap();
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onClick(e) {
        e.preventDefault();
        if (!this._disabled) {
            this._checked = true;
            this.setClassMap();
            this._nzRadioGroup.selectRadio(this);
        }
    }
    /**
     * @return {?}
     */
    nzFocus() {
        this._focused = true;
        this.setClassMap();
    }
    /**
     * @return {?}
     */
    nzBlur() {
        this._focused = false;
        this.setClassMap();
        this._nzRadioGroup.onTouched();
    }
    /**
     * @return {?}
     */
    setClassMap() {
        this._classMap = {
            [this._prefixCls]: true,
            [`${this._prefixCls}-checked`]: this._checked,
            [`${this._prefixCls}-focused`]: this._focused,
            [`${this._prefixCls}-disabled`]: this._disabled
        };
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._renderer.addClass(this._el, `${this._prefixCls}-wrapper`);
        this.setClassMap();
    }
}
NzRadioComponent.decorators = [
    { type: Component, args: [{
                selector: '[nz-radio]',
                encapsulation: ViewEncapsulation.None,
                template: `
    <span [ngClass]="_classMap">
      <span [ngClass]="_innerPrefixCls"></span>
      <input type="radio" [ngClass]="_inputPrefixCls" [(ngModel)]="nzChecked" (focus)="nzFocus()" (blur)="nzBlur()">
    </span>
    <ng-content></ng-content>
  `,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-radio-group {
  display: inline-block;
  font-size: 12px;
}
.ant-radio-wrapper {
  font-size: 12px;
  display: inline-block;
  position: relative;
  white-space: nowrap;
  margin-right: 8px;
  cursor: pointer;
}
.ant-radio {
  white-space: nowrap;
  outline: none;
  display: inline-block;
  position: relative;
  line-height: 1;
  vertical-align: text-bottom;
  cursor: pointer;
}
.ant-radio-wrapper:hover .ant-radio .ant-radio-inner,
.ant-radio:hover .ant-radio-inner,
.ant-radio-focused .ant-radio-inner {
  border-color: #3FCE9E;
}
.ant-radio-checked:after {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  border-radius: 50%;
  border: 1px solid #3FCE9E;
  content: '';
  animation: antRadioEffect 0.36s ease-in-out;
  animation-fill-mode: both;
  visibility: hidden;
}
.ant-radio:hover:after,
.ant-radio-wrapper:hover .ant-radio:after {
  visibility: visible;
}
.ant-radio-inner {
  position: relative;
  top: 0;
  left: 0;
  display: block;
  width: 14px;
  height: 14px;
  border-width: 1px;
  border-style: solid;
  border-radius: 14px;
  border-color: #d9d9d9;
  background-color: #fff;
  transition: all 0.3s;
}
.ant-radio-inner:after {
  position: absolute;
  width: 6px;
  height: 6px;
  left: 3px;
  top: 3px;
  border-radius: 4px;
  display: table;
  border-top: 0;
  border-left: 0;
  content: ' ';
  background-color: #3FCE9E;
  opacity: 0;
  transform: scale(0);
  transition: all 0.3s cubic-bezier(0.78, 0.14, 0.15, 0.86);
}
.ant-radio-input {
  position: absolute;
  left: 0;
  z-index: 1;
  cursor: pointer;
  opacity: 0;
  top: 0;
  bottom: 0;
  right: 0;
}
.ant-radio-checked .ant-radio-inner {
  border-color: #3FCE9E;
}
.ant-radio-checked .ant-radio-inner:after {
  transform: scale(1);
  opacity: 1;
  transition: all 0.3s cubic-bezier(0.78, 0.14, 0.15, 0.86);
}
.ant-radio-disabled .ant-radio-inner {
  border-color: #d9d9d9 !important;
  background-color: #f7f7f7;
}
.ant-radio-disabled .ant-radio-inner:after {
  background-color: #ccc;
}
.ant-radio-disabled .ant-radio-input {
  cursor: not-allowed;
}
.ant-radio-disabled + span {
  color: rgba(0, 0, 0, 0.25);
  cursor: not-allowed;
}
span.ant-radio + * {
  padding-left: 8px;
  padding-right: 8px;
}
.ant-radio-button-wrapper {
  margin: 0;
  height: 28px;
  line-height: 26px;
  color: rgba(0, 0, 0, 0.65);
  display: inline-block;
  transition: all 0.3s ease;
  cursor: pointer;
  border: 1px solid #d9d9d9;
  border-left: 0;
  background: #fff;
  padding: 0 16px;
  position: relative;
}
.ant-radio-button-wrapper a {
  color: rgba(0, 0, 0, 0.65);
}
.ant-radio-button-wrapper > .ant-radio-button {
  margin-left: 0;
  display: block;
  width: 0;
  height: 0;
}
.ant-radio-group-large .ant-radio-button-wrapper {
  height: 32px;
  line-height: 30px;
}
.ant-radio-group-small .ant-radio-button-wrapper {
  height: 22px;
  line-height: 20px;
  padding: 0 12px;
}
.ant-radio-group-small .ant-radio-button-wrapper:first-child {
  border-radius: 2px 0 0 2px;
}
.ant-radio-group-small .ant-radio-button-wrapper:last-child {
  border-radius: 0 2px 2px 0;
}
.ant-radio-button-wrapper:not(:first-child)::before {
  content: "";
  display: block;
  top: 0;
  left: -1px;
  width: 1px;
  height: 100%;
  position: absolute;
  background-color: #d9d9d9;
}
.ant-radio-button-wrapper:first-child {
  border-radius: 4px 0 0 4px;
  border-left: 1px solid #d9d9d9;
}
.ant-radio-button-wrapper:last-child {
  border-radius: 0 4px 4px 0;
}
.ant-radio-button-wrapper:first-child:last-child {
  border-radius: 4px;
}
.ant-radio-button-wrapper:hover,
.ant-radio-button-wrapper-focused {
  color: #3FCE9E;
  position: relative;
}
.ant-radio-button-wrapper .ant-radio-inner,
.ant-radio-button-wrapper input[type="checkbox"],
.ant-radio-button-wrapper input[type="radio"] {
  opacity: 0;
  filter: alpha(opacity=0);
  width: 0;
  height: 0;
}
.ant-radio-button-wrapper-checked {
  background: #fff;
  border-color: #3FCE9E;
  color: #3FCE9E;
  box-shadow: -1px 0 0 0 #3FCE9E;
  z-index: 1;
}
.ant-radio-button-wrapper-checked::before {
  background-color: #3FCE9E !important;
  opacity: 0.1;
}
.ant-radio-button-wrapper-checked:first-child {
  border-color: #3FCE9E;
  box-shadow: none !important;
}
.ant-radio-button-wrapper-checked:hover {
  border-color: #6ddab5;
  box-shadow: -1px 0 0 0 #6ddab5;
  color: #6ddab5;
}
.ant-radio-button-wrapper-checked:active {
  border-color: #36b38c;
  box-shadow: -1px 0 0 0 #36b38c;
  color: #36b38c;
}
.ant-radio-button-wrapper-disabled {
  border-color: #d9d9d9;
  background-color: #f7f7f7;
  cursor: not-allowed;
  color: rgba(0, 0, 0, 0.25);
}
.ant-radio-button-wrapper-disabled:first-child,
.ant-radio-button-wrapper-disabled:hover {
  border-color: #d9d9d9;
  background-color: #f7f7f7;
  color: rgba(0, 0, 0, 0.25);
}
.ant-radio-button-wrapper-disabled:first-child {
  border-left-color: #d9d9d9;
}
.ant-radio-button-wrapper-disabled.ant-radio-button-wrapper-checked {
  color: #fff;
  background-color: #e6e6e6;
  border-color: #d9d9d9;
  box-shadow: none;
}
@keyframes antRadioEffect {
  0% {
    transform: scale(1);
    opacity: 0.5;
  }
  100% {
    transform: scale(1.6);
    opacity: 0;
  }
}
`
                ]
            },] },
];
/**
 * @nocollapse
 */
NzRadioComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
    { type: NzRadioGroupComponent, },
];
NzRadioComponent.propDecorators = {
    'nzChecked': [{ type: Input }, { type: HostBinding, args: ['class.ant-radio-wrapper-checked',] },],
    'nzValue': [{ type: Input },],
    'nzDisabled': [{ type: Input }, { type: HostBinding, args: ['class.ant-radio-wrapper-disabled',] },],
    'onClick': [{ type: HostListener, args: ['click', ['$event'],] },],
};

class NzRadioButtonComponent extends NzRadioComponent {
    constructor() {
        super(...arguments);
        this._prefixCls = 'ant-radio-button';
        this._innerPrefixCls = `${this._prefixCls}-inner`;
        this._inputPrefixCls = `${this._prefixCls}-input`;
    }
    /**
     * @return {?}
     */
    get nzDisabled() {
        return this._disabled;
    }
    ;
    /**
     * @param {?} value
     * @return {?}
     */
    set nzDisabled(value) {
        this._disabled = value;
        this.setClassMap();
    }
    /**
     * @return {?}
     */
    get nzChecked() {
        return this._checked;
    }
    ;
    /**
     * @param {?} value
     * @return {?}
     */
    set nzChecked(value) {
        this._checked = value;
        this.setClassMap();
    }
}
NzRadioButtonComponent.decorators = [
    { type: Component, args: [{
                selector: '[nz-radio-button]',
                encapsulation: ViewEncapsulation.None,
                template: `
    <span [ngClass]="_classMap">
      <span [ngClass]="_innerPrefixCls"></span>
      <input type="radio" [ngClass]="_inputPrefixCls" [(ngModel)]="nzChecked" (focus)="nzFocus()" (blur)="nzBlur()">
    </span>
    <ng-content></ng-content>
  `,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-radio-group {
  display: inline-block;
  font-size: 12px;
}
.ant-radio-wrapper {
  font-size: 12px;
  display: inline-block;
  position: relative;
  white-space: nowrap;
  margin-right: 8px;
  cursor: pointer;
}
.ant-radio {
  white-space: nowrap;
  outline: none;
  display: inline-block;
  position: relative;
  line-height: 1;
  vertical-align: text-bottom;
  cursor: pointer;
}
.ant-radio-wrapper:hover .ant-radio .ant-radio-inner,
.ant-radio:hover .ant-radio-inner,
.ant-radio-focused .ant-radio-inner {
  border-color: #3FCE9E;
}
.ant-radio-checked:after {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  border-radius: 50%;
  border: 1px solid #3FCE9E;
  content: '';
  animation: antRadioEffect 0.36s ease-in-out;
  animation-fill-mode: both;
  visibility: hidden;
}
.ant-radio:hover:after,
.ant-radio-wrapper:hover .ant-radio:after {
  visibility: visible;
}
.ant-radio-inner {
  position: relative;
  top: 0;
  left: 0;
  display: block;
  width: 14px;
  height: 14px;
  border-width: 1px;
  border-style: solid;
  border-radius: 14px;
  border-color: #d9d9d9;
  background-color: #fff;
  transition: all 0.3s;
}
.ant-radio-inner:after {
  position: absolute;
  width: 6px;
  height: 6px;
  left: 3px;
  top: 3px;
  border-radius: 4px;
  display: table;
  border-top: 0;
  border-left: 0;
  content: ' ';
  background-color: #3FCE9E;
  opacity: 0;
  transform: scale(0);
  transition: all 0.3s cubic-bezier(0.78, 0.14, 0.15, 0.86);
}
.ant-radio-input {
  position: absolute;
  left: 0;
  z-index: 1;
  cursor: pointer;
  opacity: 0;
  top: 0;
  bottom: 0;
  right: 0;
}
.ant-radio-checked .ant-radio-inner {
  border-color: #3FCE9E;
}
.ant-radio-checked .ant-radio-inner:after {
  transform: scale(1);
  opacity: 1;
  transition: all 0.3s cubic-bezier(0.78, 0.14, 0.15, 0.86);
}
.ant-radio-disabled .ant-radio-inner {
  border-color: #d9d9d9 !important;
  background-color: #f7f7f7;
}
.ant-radio-disabled .ant-radio-inner:after {
  background-color: #ccc;
}
.ant-radio-disabled .ant-radio-input {
  cursor: not-allowed;
}
.ant-radio-disabled + span {
  color: rgba(0, 0, 0, 0.25);
  cursor: not-allowed;
}
span.ant-radio + * {
  padding-left: 8px;
  padding-right: 8px;
}
.ant-radio-button-wrapper {
  margin: 0;
  height: 28px;
  line-height: 26px;
  color: rgba(0, 0, 0, 0.65);
  display: inline-block;
  transition: all 0.3s ease;
  cursor: pointer;
  border: 1px solid #d9d9d9;
  border-left: 0;
  background: #fff;
  padding: 0 16px;
  position: relative;
}
.ant-radio-button-wrapper a {
  color: rgba(0, 0, 0, 0.65);
}
.ant-radio-button-wrapper > .ant-radio-button {
  margin-left: 0;
  display: block;
  width: 0;
  height: 0;
}
.ant-radio-group-large .ant-radio-button-wrapper {
  height: 32px;
  line-height: 30px;
}
.ant-radio-group-small .ant-radio-button-wrapper {
  height: 22px;
  line-height: 20px;
  padding: 0 12px;
}
.ant-radio-group-small .ant-radio-button-wrapper:first-child {
  border-radius: 2px 0 0 2px;
}
.ant-radio-group-small .ant-radio-button-wrapper:last-child {
  border-radius: 0 2px 2px 0;
}
.ant-radio-button-wrapper:not(:first-child)::before {
  content: "";
  display: block;
  top: 0;
  left: -1px;
  width: 1px;
  height: 100%;
  position: absolute;
  background-color: #d9d9d9;
}
.ant-radio-button-wrapper:first-child {
  border-radius: 4px 0 0 4px;
  border-left: 1px solid #d9d9d9;
}
.ant-radio-button-wrapper:last-child {
  border-radius: 0 4px 4px 0;
}
.ant-radio-button-wrapper:first-child:last-child {
  border-radius: 4px;
}
.ant-radio-button-wrapper:hover,
.ant-radio-button-wrapper-focused {
  color: #3FCE9E;
  position: relative;
}
.ant-radio-button-wrapper .ant-radio-inner,
.ant-radio-button-wrapper input[type="checkbox"],
.ant-radio-button-wrapper input[type="radio"] {
  opacity: 0;
  filter: alpha(opacity=0);
  width: 0;
  height: 0;
}
.ant-radio-button-wrapper-checked {
  background: #fff;
  border-color: #3FCE9E;
  color: #3FCE9E;
  box-shadow: -1px 0 0 0 #3FCE9E;
  z-index: 1;
}
.ant-radio-button-wrapper-checked::before {
  background-color: #3FCE9E !important;
  opacity: 0.1;
}
.ant-radio-button-wrapper-checked:first-child {
  border-color: #3FCE9E;
  box-shadow: none !important;
}
.ant-radio-button-wrapper-checked:hover {
  border-color: #6ddab5;
  box-shadow: -1px 0 0 0 #6ddab5;
  color: #6ddab5;
}
.ant-radio-button-wrapper-checked:active {
  border-color: #36b38c;
  box-shadow: -1px 0 0 0 #36b38c;
  color: #36b38c;
}
.ant-radio-button-wrapper-disabled {
  border-color: #d9d9d9;
  background-color: #f7f7f7;
  cursor: not-allowed;
  color: rgba(0, 0, 0, 0.25);
}
.ant-radio-button-wrapper-disabled:first-child,
.ant-radio-button-wrapper-disabled:hover {
  border-color: #d9d9d9;
  background-color: #f7f7f7;
  color: rgba(0, 0, 0, 0.25);
}
.ant-radio-button-wrapper-disabled:first-child {
  border-left-color: #d9d9d9;
}
.ant-radio-button-wrapper-disabled.ant-radio-button-wrapper-checked {
  color: #fff;
  background-color: #e6e6e6;
  border-color: #d9d9d9;
  box-shadow: none;
}
@keyframes antRadioEffect {
  0% {
    transform: scale(1);
    opacity: 0.5;
  }
  100% {
    transform: scale(1.6);
    opacity: 0;
  }
}
`
                ]
            },] },
];
/**
 * @nocollapse
 */
NzRadioButtonComponent.ctorParameters = () => [];
NzRadioButtonComponent.propDecorators = {
    'nzDisabled': [{ type: Input }, { type: HostBinding, args: ['class.ant-radio-button-wrapper-disabled',] },],
    'nzChecked': [{ type: Input }, { type: HostBinding, args: ['class.ant-radio-button-wrapper-checked',] },],
};

class NzRadioModule {
}
NzRadioModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, FormsModule],
                exports: [NzRadioComponent, NzRadioButtonComponent, NzRadioGroupComponent],
                declarations: [NzRadioComponent, NzRadioButtonComponent, NzRadioGroupComponent]
            },] },
];
/**
 * @nocollapse
 */
NzRadioModule.ctorParameters = () => [];

class NzCalendarModule {
}
NzCalendarModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, NzSelectModule, NzRadioModule, FormsModule],
                declarations: [NzCalendarComponent],
                exports: [NzCalendarComponent]
            },] },
];
/**
 * @nocollapse
 */
NzCalendarModule.ctorParameters = () => [];

const ESC = 27;
/**
 * @param {?} value
 * @return {?}
 */
function toArray(value) {
    let /** @type {?} */ ret = value;
    if (value === undefined) {
        ret = [];
    }
    else if (!Array.isArray(value)) {
        ret = [value];
    }
    return ret;
}
/**
 * @param {?} array1
 * @param {?} array2
 * @return {?}
 */
function arrayEquals(array1, array2) {
    if (!array1 || !array2 || array1.length !== array2.length) {
        return false;
    }
    const /** @type {?} */ len = array1.length;
    for (let /** @type {?} */ i = 0; i < len; i++) {
        if (array1[i] !== array2[i]) {
            return false;
        }
    }
    return true;
}
const defaultDisplayRender = label => label.join(' / ');
class NzCascaderComponent {
    /**
     * @param {?} _elementRef
     * @param {?} _render
     * @param {?} _cdr
     */
    constructor(_elementRef, _render, _cdr) {
        this._elementRef = _elementRef;
        this._render = _render;
        this._cdr = _cdr;
        this._prefixCls = 'ant-cascader';
        this._inputPrefixCls = 'ant-input';
        this._dropDownPosition = 'bottom';
        this._focused = false;
        this._popupVisible = false;
        this._displayLabelIsTemplate = false;
        this._displayLabelContext = {};
        this.__inputValue = '';
        // selection will trigger value change
        this._selectedOptions = [];
        // activaction will not triiger value change
        this._activatedOptions = [];
        // all data columns
        this._nzColumns = [];
        // ngModel Access
        this.onChange = Function.prototype;
        this.onTouched = Function.prototype;
        /**
         * Whether is disabled
         */
        this.nzDisabled = false;
        /**
         * Input size, one of `large` `default` `small`
         */
        this.nzSize = 'default';
        /**
         * Input placeholder
         */
        this.nzPlaceHolder = 'Please select';
        /**
         * Whether show input box. Defaults to `true`.
         */
        this.nzShowInput = true;
        /**
         * Whether can search. Defaults to `false`.
         */
        this.nzShowSearch = false;
        /**
         * Whether allow clear. Defaults to `true`.
         */
        this.nzAllowClear = true;
        /**
         * Hover text for the clear icon
         */
        this.nzClearText = 'Clear';
        /**
         * Whether to show arrow
         */
        this.nzShowArrow = true;
        /**
         * Specify content to show when no result matches.
         */
        this.nzNotFoundContent = 'Not Found';
        /**
         * Whether cache children when they were loaded asych
         */
        this.nzEnableCache = true;
        /**
         * Expand column item when click or hover, one of 'click' 'hover'
         */
        this.nzExpandTrigger = 'click';
        /**
         * Change value on each selection if set to true
         */
        this.nzChangeOnSelect = false;
        /**
         * Delay time to show when mouse enter, when `nzExpandTrigger` is `hover`.
         */
        this.nzMouseEnterDelay = 150;
        /**
         * Delay time to hide when mouse enter, when `nzExpandTrigger` is `hover`.
         */
        this.nzMouseLeaveDelay = 150;
        /**
         * Triggering mode: can be Array<'click'|'hover'>
         */
        this.nzTriggerAction = ['click'];
        /**
         * Property name for getting `value` in the option
         */
        this.nzValueProperty = 'value';
        /**
         * Property name for getting `label` in the option
         */
        this.nzLabelProperty = 'label';
        this.tabIndex = '0';
        /**
         * Event: emit on popup show or hide
         */
        this.nzVisibleChange = new EventEmitter();
        /**
         * Event: emit on values changed
         */
        this.nzChange = new EventEmitter();
        /**
         * Event: emit on values and selection changed
         */
        this.nzSelectionChange = new EventEmitter();
        /**
         * Event: emit on option selected, event data：{option: any, index: number}
         */
        this.nzSelect = new EventEmitter();
        /**
         * Event: emit before loading children. event data：{option: any|null, index: number, resolve, reject}
         */
        this.nzLoad = new EventEmitter();
        /**
         * Event: emit on the clear button clicked
         */
        this.nzClear = new EventEmitter();
        this._el = this._elementRef.nativeElement;
    }
    /**
     * @return {?}
     */
    get _inputValue() {
        return this.__inputValue;
    }
    /**
     * @param {?} inputValue
     * @return {?}
     */
    set _inputValue(inputValue) {
        this.__inputValue = inputValue;
        if (inputValue.length) {
            this._addHostClass(`${this._prefixCls}-picker-with-value`);
        }
        else {
            this._removeHostClass(`${this._prefixCls}-picker-with-value`);
        }
    }
    /**
     * @param {?} position
     * @return {?}
     */
    onPositionChange(position) {
        const /** @type {?} */ _position = position.connectionPair.originY === 'bottom' ? 'bottom' : 'top';
        if (this._dropDownPosition !== _position) {
            this._dropDownPosition = _position;
            this._cdr.detectChanges();
        }
    }
    /**
     * @return {?}
     */
    nzFocus() {
        this._focused = true;
        this._addHostClass(`${this._prefixCls}-focused`);
    }
    /**
     * @return {?}
     */
    nzBlur() {
        this._focused = false;
        this._removeHostClass(`${this._prefixCls}-focused`);
    }
    /**
     * @return {?}
     */
    get _pickerLabelCls() {
        return {
            [`${this._prefixCls}-picker-label`]: true
        };
    }
    /**
     * @return {?}
     */
    get _arrowCls() {
        return {
            [`${this._prefixCls}-picker-arrow`]: true,
            [`${this._prefixCls}-picker-arrow-expand`]: this._popupVisible
        };
    }
    /**
     * @return {?}
     */
    get _clearCls() {
        return {
            [`${this._prefixCls}-picker-clear`]: true
        };
    }
    /**
     * @return {?}
     */
    get _inputCls() {
        return {
            [`${this._prefixCls}-input`]: 1,
            [`${this._inputPrefixCls}-disabled`]: this.nzDisabled,
            [`${this._inputPrefixCls}-lg`]: this.nzSize === 'large',
            [`${this._inputPrefixCls}-sm`]: this.nzSize === 'small',
        };
    }
    /**
     * @return {?}
     */
    get _menuCls() {
        return {
            [`${this._prefixCls}-menus`]: true,
            [`${this._prefixCls}-menus-hidden`]: !this._popupVisible,
            [`${this.nzPopupClassName}`]: this.nzPopupClassName
        };
    }
    /**
     * 获取菜单中列的样式
     * @return {?}
     */
    get _columnCls() {
        return {
            [`${this._prefixCls}-menu`]: true,
            [`${this.nzColumnClassName}`]: this.nzColumnClassName
        };
    }
    /**
     * 获取列中Option的样式
     * @param {?} option
     * @param {?} index
     * @return {?}
     */
    _getOptionCls(option, index) {
        return {
            [`${this._prefixCls}-menu-item`]: true,
            [`${this._prefixCls}-menu-item-expand`]: !option.isLeaf,
            [`${this._prefixCls}-menu-item-active`]: this._isActiveOption(option, index),
            [`${this._prefixCls}-menu-item-disabled`]: option.disabled,
            [`${this._prefixCls}-menu-item-loading`]: option.loading
        };
    }
    /**
     * @return {?}
     */
    _getLabel() {
        return this._displayLabelIsTemplate ? '' : this._displayLabel;
    }
    /**
     * prevent input change event
     * @param {?} event
     * @return {?}
     */
    _handlerInputChange(event) {
        event.stopPropagation();
    }
    /**
     * input blur
     * @param {?} event
     * @return {?}
     */
    _handleInputBlur(event) {
        if (!this.nzShowSearch) {
            return;
        }
        if (this._popupVisible) {
            this.nzFocus();
        }
        else {
            this.nzBlur();
        }
    }
    /**
     * input focus
     * @param {?} event
     * @return {?}
     */
    _handleInputFocus(event) {
        if (!this.nzShowSearch) {
            return;
        }
        this.nzFocus();
    }
    /**
     * input key down
     * @param {?} event
     * @return {?}
     */
    _handleInputKeyDown(event) {
    }
    /**
     * @param {?} inputValue
     * @param {?=} fireSearch
     * @return {?}
     */
    _setInputValue(inputValue, fireSearch = true) {
        if (inputValue !== this._inputValue) {
            this._inputValue = inputValue;
        }
    }
    /**
     * @return {?}
     */
    _hasInput() {
        return this._inputValue.length > 0;
    }
    /**
     * @return {?}
     */
    _hasSelection() {
        return this._selectedOptions.length > 0;
    }
    /**
     * Whether the clear button is visible
     * @return {?}
     */
    get _showClearIcon() {
        const /** @type {?} */ isSelected = this._hasSelection();
        const /** @type {?} */ isHasInput = this._hasInput();
        return this.nzAllowClear && !this.nzDisabled && (isSelected || isHasInput);
    }
    /**
     * clear the input box and selected options
     * @param {?} event
     * @return {?}
     */
    _clearSelection(event) {
        if (event) {
            event.preventDefault();
            event.stopPropagation();
        }
        this._displayLabel = '';
        this._displayLabelIsTemplate = false;
        this._selectedOptions = [];
        this._activatedOptions = [];
        this._setInputValue('', false);
        this.setPopupVisible(false);
        // trigger change event
        this._onValueChange();
    }
    /**
     * @return {?}
     */
    get _displayRender() {
        return this.nzDisplayRender || defaultDisplayRender;
    }
    /**
     * @return {?}
     */
    _buildDisplayLabel() {
        const /** @type {?} */ selectedOptions = this._selectedOptions;
        const /** @type {?} */ labels = selectedOptions.map(o => o[this.nzLabelProperty || 'label']);
        // 设置当前控件的显示值
        this._displayLabel = this._displayRender.call(this, labels, selectedOptions);
        this._displayLabelIsTemplate = !(typeof this._displayLabel === 'string');
        this._displayLabelContext = { labels, selectedOptions };
    }
    /**
     * 由用户来定义点击后是否变更
     * @param {?} option
     * @param {?} index
     * @return {?}
     */
    _isChangeOn(option, index) {
        if (typeof this.nzChangeOn === 'function') {
            return this.nzChangeOn(option, index) === true;
        }
        return false;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onKeyDown(event) {
        const /** @type {?} */ keyCode = event.keyCode;
        if (keyCode !== DOWN_ARROW &&
            keyCode !== UP_ARROW &&
            keyCode !== LEFT_ARROW &&
            keyCode !== RIGHT_ARROW &&
            keyCode !== ENTER &&
            keyCode !== BACKSPACE &&
            keyCode !== ESC) {
            return;
        }
        // Press any keys above to reopen menu
        if (!this._isPopupVisible() &&
            keyCode !== BACKSPACE &&
            keyCode !== ESC) {
            this.setPopupVisible(true);
            return;
        }
        // Press ESC to close menu
        if (keyCode === ESC) {
            this.setPopupVisible(false);
            return;
        }
        if (this._isPopupVisible()) {
            event.preventDefault();
            if (keyCode === DOWN_ARROW) {
                this._moveDown();
            }
            if (keyCode === UP_ARROW) {
                this._moveUp();
            }
            if (keyCode === LEFT_ARROW) {
                this._moveLeft();
            }
            if (keyCode === RIGHT_ARROW) {
                this._moveRight();
            }
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    _onTriggerClick(event) {
        if (this.nzDisabled) {
            return;
        }
        this.onTouched(); // set your control to 'touched'
        if (this._isClickTiggerAction()) {
            this._delaySetPopupVisible(!this._popupVisible, 100);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    _onTriggerMouseEnter(event) {
        if (this.nzDisabled) {
            return;
        }
        if (this._isPointerTiggerAction()) {
            this._delaySetPopupVisible(true, this.nzMouseEnterDelay);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    _onTriggerMouseLeave(event) {
        if (this.nzDisabled) {
            return;
        }
        if (!this._isPopupVisible()) {
            return;
        }
        if (this._isPointerTiggerAction()) {
            const /** @type {?} */ currEl = this._el;
            const /** @type {?} */ popupEl = this.menu && (this.menu.nativeElement);
            if (currEl.contains(/** @type {?} */ (event.target)) ||
                (popupEl && popupEl.contains(/** @type {?} */ (event.target)))) {
                return; // 还在菜单内部
            }
            this._delaySetPopupVisible(false, this.nzMouseLeaveDelay);
        }
    }
    /**
     * @return {?}
     */
    _isClickTiggerAction() {
        if (typeof this.nzTriggerAction === 'string') {
            return this.nzTriggerAction === 'click';
        }
        return this.nzTriggerAction.indexOf('click') !== -1;
    }
    /**
     * @return {?}
     */
    _isPointerTiggerAction() {
        if (typeof this.nzTriggerAction === 'string') {
            return this.nzTriggerAction === 'hover';
        }
        return this.nzTriggerAction.indexOf('hover') !== -1;
    }
    /**
     * @return {?}
     */
    _closeMenu() {
        this._clearDelayTimer();
        this.setPopupVisible(false);
    }
    /**
     * 显示或者隐藏菜单
     *
     * @param {?} visible true-显示，false-隐藏
     * @param {?} delay 延迟时间
     * @return {?}
     */
    _delaySetPopupVisible(visible, delay) {
        this._clearDelayTimer();
        if (delay) {
            this._delayTimer = setTimeout(() => {
                this.setPopupVisible(visible);
                this._clearDelayTimer();
            }, delay);
        }
        else {
            this.setPopupVisible(visible);
        }
    }
    /**
     * @return {?}
     */
    _isPopupVisible() {
        return this._popupVisible;
    }
    /**
     * @param {?} popupVisible
     * @return {?}
     */
    setPopupVisible(popupVisible) {
        if (this.nzDisabled) {
            return;
        }
        if (this._popupVisible !== popupVisible) {
            this._popupVisible = popupVisible;
            // We must listen to `mousedown` or `touchstart`, edge case:
            // https://github.com/ant-design/ant-design/issues/5804
            // https://github.com/react-component/calendar/issues/250
            // https://github.com/react-component/trigger/issues/50
            if (popupVisible) {
                if (!this._clickOutsideHandler) {
                    this._clickOutsideHandler = this._render.listen('document', 'mousedown', this._onDocumentClick.bind(this));
                }
                // always hide on mobile
                if (!this._touchOutsideHandler) {
                    this._touchOutsideHandler = this._render.listen('document', 'touchstart', this._onDocumentClick.bind(this));
                }
            }
            if (!popupVisible) {
                this._clearOutsideHandler();
            }
            if (popupVisible) {
                this._beforeVisible();
            }
            this.nzVisibleChange.emit(popupVisible);
        }
    }
    /**
     * load init data if necessary
     * @return {?}
     */
    _beforeVisible() {
        if (!this._nzColumns.length) {
            new Promise((resolve, reject) => {
                this.nzLoad.emit({
                    option: null,
                    index: -1,
                    resolve,
                    reject
                });
            }).then((children) => {
                this._setColumnData(children, 0);
            }, (reason) => {
                // should not be here
            });
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    _onDocumentClick(event) {
        const /** @type {?} */ target = (event.target);
        const /** @type {?} */ popupEl = this.menu && (this.menu.nativeElement);
        if (!this._el.contains(target) && !popupEl.contains(target)) {
            this.setPopupVisible(false);
        }
    }
    /**
     * @return {?}
     */
    _clearOutsideHandler() {
        if (this._clickOutsideHandler) {
            this._clickOutsideHandler(); // Removes "listen" listener
            this._clickOutsideHandler = null;
        }
        if (this._touchOutsideHandler) {
            this._touchOutsideHandler(); // Removes "listen" listener
            this._touchOutsideHandler = null;
        }
    }
    /**
     * @return {?}
     */
    _clearDelayTimer() {
        if (this._delayTimer) {
            clearTimeout(this._delayTimer);
            this._delayTimer = null;
        }
    }
    /**
     * 获取Option的值，例如，可以指定labelProperty="name"来取Name
     * @param {?} option
     * @return {?}
     */
    _getOptionLabel(option) {
        return option[this.nzLabelProperty || 'label'];
    }
    /**
     * 获取Option的值，例如，可以指定valueProperty="id"来取ID
     * @param {?} option
     * @return {?}
     */
    _getOptionValue(option) {
        return option[this.nzValueProperty || 'value'];
    }
    /**
     * @param {?} option
     * @param {?} index
     * @return {?}
     */
    _isActiveOption(option, index) {
        const /** @type {?} */ activeOpt = this._activatedOptions[index];
        if (activeOpt === option) {
            return true;
        }
        if (activeOpt && this._getOptionValue(activeOpt) === this._getOptionValue(option)) {
            return true;
        }
        return false;
    }
    /**
     * 设置某列的激活的菜单选项
     *
     * @param {?} option 菜单选项
     * @param {?} index  选项所在的列组的索引
     * @return {?}
     */
    _setActiveOption(option, index) {
        if (!option || option.disabled) {
            return;
        }
        this._activatedOptions[index] = option;
        // 当直接选择最后一级时，前面的选项要补全。例如，选择“城市”，则自动补全“国家”、“省份”
        for (let /** @type {?} */ i = index - 1; i >= 0; i--) {
            if (!this._activatedOptions[i]) {
                this._activatedOptions[i] = this._activatedOptions[i + 1].parent;
            }
        }
        // 截断多余的选项，如选择“省份”，则只会有“国家”、“省份”，去掉“城市”、“区县”
        if (index < this._activatedOptions.length - 1) {
            this._activatedOptions = this._activatedOptions.slice(0, index + 1);
        }
        // trigger select event, and display label
        this._onSelectOption(option, index);
    }
    /**
     * @param {?} option
     * @param {?} index
     * @return {?}
     */
    _onSelectOption(option, index) {
        // trigger `nzSelect` event
        this.nzSelect.emit({
            option: option,
            index: index
        });
        // load children directly
        if (option.children && option.children.length) {
            option.isLeaf = false;
            option.children.forEach(child => child.parent = option);
            this._setColumnData(option.children, index + 1);
        }
        else if (!option.isLeaf) {
            // load children async
            new Promise((resolve, reject) => {
                this.nzLoad.emit({
                    option: option,
                    index: index,
                    resolve,
                    reject
                });
            }).then((children) => {
                children.forEach(child => child.parent = option);
                this._setColumnData(children, index + 1);
                if (this.nzEnableCache) {
                    option.children = children; // next time we load children directly
                }
            }, (reason) => {
                option.isLeaf = true;
            });
        }
        // 生成显示
        if (option.isLeaf || this.nzChangeOnSelect || this._isChangeOn(option, index)) {
            this._selectedOptions = this._activatedOptions;
            // 设置当前控件的显示值
            this._buildDisplayLabel();
            // 触发变更事件
            this._onValueChange();
        }
        // close menu if click on leaf
        if (option.isLeaf) {
            this._delaySetPopupVisible(false, this.nzMouseLeaveDelay);
        }
    }
    /**
     * @param {?} options
     * @param {?} index
     * @return {?}
     */
    _setColumnData(options, index) {
        if (!arrayEquals(this._nzColumns[index], options)) {
            this._nzColumns[index] = options;
            if (index < this._nzColumns.length - 1) {
                this._nzColumns = this._nzColumns.slice(0, index + 1);
            }
        }
    }
    /**
     * 鼠标点击选项
     *
     * @param {?} option 菜单选项
     * @param {?} index 选项所在的列组的索引
     * @param {?} event 鼠标事件
     * @return {?}
     */
    _onOptionClick(option, index, event) {
        event.preventDefault();
        // Keep focused state for keyboard support
        this._el.focus();
        if (option && option.disabled) {
            return;
        }
        this._setActiveOption(option, index);
    }
    /**
     * press `up` or `down` arrow to select the sibling option.
     * @param {?} isUp
     * @return {?}
     */
    _moveUpOrDown(isUp) {
        const /** @type {?} */ columnIndex = Math.max(this._activatedOptions.length - 1, 0);
        // 该组中已经被激活的选项
        const /** @type {?} */ activeOption = this._activatedOptions[columnIndex];
        // 该组所有的选项，用于遍历获取下一个被激活的选项
        const /** @type {?} */ options = this._nzColumns[columnIndex];
        if (!options || !options.length) {
            return;
        }
        const /** @type {?} */ length = options.length;
        let /** @type {?} */ nextOptIndex = -1;
        if (!activeOption) {
            nextOptIndex = isUp ? length : -1;
        }
        else {
            nextOptIndex = options.indexOf(activeOption);
        }
        while (true) {
            nextOptIndex = isUp ? nextOptIndex - 1 : nextOptIndex + 1;
            if (nextOptIndex < 0 || nextOptIndex >= length) {
                break;
            }
            const /** @type {?} */ nextOption = options[nextOptIndex];
            if (!nextOption || nextOption.disabled) {
                continue;
            }
            this._setActiveOption(nextOption, columnIndex);
            break;
        }
    }
    /**
     * @return {?}
     */
    _moveUp() {
        this._moveUpOrDown(true);
    }
    /**
     * @return {?}
     */
    _moveDown() {
        this._moveUpOrDown(false);
    }
    /**
     * press `left` arrow to remove the last selected option.
     * If there is no option selected, emit `nzClear` event.
     * @return {?}
     */
    _moveLeft() {
        const /** @type {?} */ options = this._selectedOptions;
        if (options.length) {
            options.pop(); // Remove the last one
            const /** @type {?} */ len = options.length;
            if (len) {
                this._setActiveOption(options[len - 1], len - 1);
            }
            else {
                this.nzClear.emit();
            }
        }
    }
    /**
     * press `right` arrow to select the next column option.
     * @return {?}
     */
    _moveRight() {
        const /** @type {?} */ columns = this._nzColumns;
        const /** @type {?} */ length = this._selectedOptions.length;
        if (length === 0) {
            return;
        }
        const /** @type {?} */ nextColIndex = length;
        const /** @type {?} */ options = columns.length > nextColIndex ? columns[nextColIndex] : null;
        if (options) {
            const /** @type {?} */ len = options.length;
            for (let /** @type {?} */ i = 0; i < len; i++) {
                const /** @type {?} */ activeOpt = options[i];
                if (activeOpt && !activeOpt.disabled) {
                    this._setActiveOption(activeOpt, nextColIndex);
                    return;
                }
            }
        }
    }
    /**
     * 鼠标划入选项
     *
     * @param {?} option 菜单选项
     * @param {?} index 选项所在的列组的索引
     * @param {?} event 鼠标事件
     * @return {?}
     */
    _onOptionMouseEnter(option, index, event) {
        event.preventDefault();
        if (this.nzExpandTrigger === 'hover' && !option.isLeaf) {
            this._delaySelect(option, index, true);
        }
    }
    /**
     * 鼠标划出选项
     *
     * @param {?} option 菜单选项
     * @param {?} index 选项所在的列组的索引
     * @param {?} event 鼠标事件
     * @return {?}
     */
    _onOptionMouseLeave(option, index, event) {
        event.preventDefault();
        if (this.nzExpandTrigger === 'hover' && !option.isLeaf) {
            this._delaySelect(option, index, false);
        }
    }
    /**
     * @param {?} option
     * @param {?} index
     * @param {?} doSelect
     * @return {?}
     */
    _delaySelect(option, index, doSelect) {
        if (this._delayTimer) {
            clearTimeout(this._delayTimer);
            this._delayTimer = null;
        }
        if (doSelect) {
            this._delayTimer = setTimeout(() => {
                this._setActiveOption(option, index);
                this._delayTimer = null;
            }, 150);
        }
    }
    /**
     * @return {?}
     */
    _getSubmitValue() {
        const /** @type {?} */ values = [];
        this._selectedOptions.forEach(option => {
            values.push(this._getOptionValue(option));
        });
        return values;
    }
    /**
     * @return {?}
     */
    _onValueChange() {
        const /** @type {?} */ value = this._getSubmitValue();
        if (!arrayEquals(this._lastValue, value)) {
            this._lastValue = value;
            this.onChange(value); // Angular need this
            if (value.length === 0) {
                this.nzClear.emit(); // first trigger `clear` and then `change`
            }
            this.nzSelectionChange.emit(this._selectedOptions);
            this.nzChange.emit(value);
        }
    }
    /**
     * @param {?} classname
     * @return {?}
     */
    _addHostClass(classname) {
        this._render.addClass(this._el, classname);
    }
    /**
     * @param {?} classname
     * @return {?}
     */
    _removeHostClass(classname) {
        this._render.removeClass(this._el, classname);
    }
    /**
     * Write a new value to the element.
     *
     * \@Override (From ControlValueAccessor interface)
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        if (value == null) {
            return;
        }
        const /** @type {?} */ array = [];
        toArray(value).forEach((v, index) => {
            if (typeof v !== 'object') {
                const /** @type {?} */ obj = {};
                obj[this.nzValueProperty] = v;
                obj[this.nzLabelProperty] = v;
                array[index] = obj;
            }
            else {
                array[index] = v;
            }
        });
        this._activatedOptions = array;
        this._selectedOptions = array;
        this._buildDisplayLabel();
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        if (isDisabled) {
            this._closeMenu();
            this._addHostClass(`${this._prefixCls}-picker-disabled`);
        }
        else {
            this._removeHostClass(`${this._prefixCls}-picker-disabled`);
        }
        this.nzDisabled = isDisabled;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // 设置第一列
        if (this.nzOptions && this.nzOptions.length) {
            this._nzColumns.push(this.nzOptions);
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this._delayTimer) {
            clearTimeout(this._delayTimer);
            this._delayTimer = null;
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        const /** @type {?} */ nzDisabled = changes['nzDisabled'];
        if (nzDisabled) {
            if (nzDisabled.currentValue) {
                this._addHostClass(`${this._prefixCls}-picker-disabled`);
            }
            else {
                this._removeHostClass(`${this._prefixCls}-picker-disabled`);
            }
        }
        const /** @type {?} */ nzOptions = changes['nzOptions'];
        if (nzOptions && !nzOptions.isFirstChange()) {
            this._nzColumns.splice(0);
            const /** @type {?} */ newOptions = nzOptions.currentValue;
            if (newOptions && newOptions.length) {
                this._nzColumns.push(newOptions);
                this._clearSelection(null);
            }
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this._addHostClass(this._prefixCls);
        this._addHostClass(`${this._prefixCls}-picker`);
    }
}
NzCascaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-cascader',
                encapsulation: ViewEncapsulation.None,
                animations: [
                    DropDownAnimation
                ],
                template: `
    <div
      nz-overlay-origin
      #origin="nzOverlayOrigin"
      #trigger
    >
      <div *ngIf="nzShowInput">
        <input #input
          nz-input
          [attr.autoComplete]="'off'"
          [attr.placeholder]="_hasInput() || _hasSelection() ? null : nzPlaceHolder"
          [readonly]="!nzShowSearch"
          [disabled]="nzDisabled"
          [nzSize]="nzSize"
          [ngClass]="_inputCls"
          [(ngModel)]="_inputValue"
          (blur)="_handleInputBlur($event)"
          (focus)="_handleInputFocus($event)"
          (keydown)="_handleInputKeyDown($event)"
          (change)="_handlerInputChange($event)"
        >
        <i *ngIf="_showClearIcon"
          [class]="'anticon anticon-cross-circle'"
          [ngClass]="_clearCls"
          [attr.title]="nzClearText"
          (click)="_clearSelection($event)"></i>
        <i *ngIf="nzShowArrow"
          class="anticon anticon-down"
          [ngClass]="_arrowCls"></i>
        <span [ngClass]="_pickerLabelCls">
          <ng-container *ngIf="_displayLabelIsTemplate">
            <ng-container *ngTemplateOutlet="_displayLabel; context: _displayLabelContext"></ng-container>
          </ng-container>
          <ng-container *ngIf="!_displayLabelIsTemplate">{{_displayLabel}}</ng-container>
        </span>
      </div>
      <ng-content></ng-content>
    </div>
    <ng-template
      nz-connected-overlay
      hasBackdrop
      [origin]="origin"
      (backdropClick)="_closeMenu()"
      (detach)="_closeMenu()"
      (positionChange)="onPositionChange($event)"
      [open]="_popupVisible"
    >
      <div #menu
        [ngClass]="_menuCls"
        [@dropDownAnimation]="_dropDownPosition"
      >
        <ul *ngFor="let options of _nzColumns; let i = index;"
          [ngClass]="_columnCls"
          [attr.data-key]="i">
          <li *ngFor="let option of options"
            [attr.data-key]="_getOptionValue(option)"
            [attr.title]="option.title || _getOptionLabel(option)"
            [ngClass]="_getOptionCls(option, i)"
            (mouseenter)="_onOptionMouseEnter(option, i, $event)"
            (mouseleave)="_onOptionMouseLeave(option, i, $event)"
            (click)="_onOptionClick(option, i, $event)"
          >
            {{_getOptionLabel(option)}}
          </li>
        </ul>
      </div>
    </ng-template>
  `,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => NzCascaderComponent),
                        multi: true
                    }
                ],
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-cascader {
  font-size: 12px;
}
.ant-cascader-input.ant-input {
  background-color: transparent !important;
  cursor: pointer;
  width: 100%;
  display: block;
}
.ant-cascader-picker {
  position: relative;
  display: inline-block;
  cursor: pointer;
  font-size: 12px;
  background-color: #fff;
  border-radius: 4px;
  outline: 0;
}
.ant-cascader-picker-with-value .ant-cascader-picker-label {
  color: transparent;
}
.ant-cascader-picker-disabled {
  cursor: not-allowed;
  background: #f7f7f7;
  color: rgba(0, 0, 0, 0.25);
}
.ant-cascader-picker-disabled .ant-cascader-input {
  cursor: not-allowed;
}
.ant-cascader-picker:focus .ant-cascader-input {
  border-color: #6ddab5;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(63, 206, 158, 0.2);
}
.ant-cascader-picker-label {
  position: absolute;
  left: 0;
  height: 20px;
  line-height: 20px;
  top: 50%;
  margin-top: -10px;
  white-space: nowrap;
  text-overflow: ellipsis;
  overflow: hidden;
  width: 100%;
  padding: 0 12px 0 8px;
}
.ant-cascader-picker-clear {
  opacity: 0;
  position: absolute;
  right: 8px;
  z-index: 2;
  background: #fff;
  top: 50%;
  font-size: 12px;
  color: rgba(0, 0, 0, 0.25);
  width: 12px;
  height: 12px;
  margin-top: -6px;
  line-height: 12px;
  cursor: pointer;
  transition: color 0.3s ease, opacity 0.15s ease;
}
.ant-cascader-picker-clear:hover {
  color: rgba(0, 0, 0, 0.43);
}
.ant-cascader-picker:hover .ant-cascader-picker-clear {
  opacity: 1;
}
.ant-cascader-picker-arrow {
  position: absolute;
  z-index: 1;
  top: 50%;
  right: 8px;
  width: 12px;
  height: 12px;
  margin-top: -6px;
  line-height: 12px;
  color: rgba(0, 0, 0, 0.43);
  display: inline-block;
  font-size: 12px;
  font-size: 9px \9;
  transform: scale(0.75) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
}
:root .ant-cascader-picker-arrow {
  filter: none;
}
:root .ant-cascader-picker-arrow {
  font-size: 12px;
}
.ant-cascader-picker-arrow:before {
  transition: transform 0.2s ease;
}
.ant-cascader-picker-arrow.ant-cascader-picker-arrow-expand {
  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=2)";
}
.ant-cascader-picker-arrow.ant-cascader-picker-arrow-expand:before {
  transform: rotate(180deg);
}
.ant-cascader-menus {
  font-size: 12px;
  background: #fff;
  position: absolute;
  z-index: 1050;
  border-radius: 4px;
  box-shadow: 0 1px 6px rgba(0, 0, 0, 0.2);
  white-space: nowrap;
}
.ant-cascader-menus-empty,
.ant-cascader-menus-hidden {
  display: none;
}
.ant-cascader-menus.slide-up-enter.slide-up-enter-active.ant-cascader-menus-placement-bottomLeft,
.ant-cascader-menus.slide-up-appear.slide-up-appear-active.ant-cascader-menus-placement-bottomLeft {
  animation-name: antSlideUpIn;
}
.ant-cascader-menus.slide-up-enter.slide-up-enter-active.ant-cascader-menus-placement-topLeft,
.ant-cascader-menus.slide-up-appear.slide-up-appear-active.ant-cascader-menus-placement-topLeft {
  animation-name: antSlideDownIn;
}
.ant-cascader-menus.slide-up-leave.slide-up-leave-active.ant-cascader-menus-placement-bottomLeft {
  animation-name: antSlideUpOut;
}
.ant-cascader-menus.slide-up-leave.slide-up-leave-active.ant-cascader-menus-placement-topLeft {
  animation-name: antSlideDownOut;
}
.ant-cascader-menu {
  display: inline-block;
  vertical-align: top;
  min-width: 111px;
  height: 180px;
  list-style: none;
  margin: 0;
  padding: 0;
  border-right: 1px solid #e9e9e9;
  overflow: auto;
}
.ant-cascader-menu:first-child {
  border-radius: 4px 0 0 4px;
}
.ant-cascader-menu:last-child {
  border-right-color: transparent;
  margin-right: -1px;
  border-radius: 0 4px 4px 0;
}
.ant-cascader-menu:only-child {
  border-radius: 4px;
}
.ant-cascader-menu-item {
  padding: 7px 8px;
  cursor: pointer;
  white-space: nowrap;
  transition: all 0.3s;
}
.ant-cascader-menu-item:hover {
  background: #f0fbf7;
}
.ant-cascader-menu-item-disabled {
  cursor: not-allowed;
  color: rgba(0, 0, 0, 0.25);
}
.ant-cascader-menu-item-disabled:hover {
  background: transparent;
}
.ant-cascader-menu-item-active:not(.ant-cascader-menu-item-disabled),
.ant-cascader-menu-item-active:not(.ant-cascader-menu-item-disabled):hover {
  background: #f7f7f7;
  font-weight: bold;
}
.ant-cascader-menu-item-expand {
  position: relative;
}
.ant-cascader-menu-item-expand:after {
  font-family: 'anticon';
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  content: "\\e61f";
  display: inline-block;
  font-size: 12px;
  font-size: 8px \9;
  transform: scale(0.66666667) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
  color: rgba(0, 0, 0, 0.43);
  position: absolute;
  right: 8px;
}
:root .ant-cascader-menu-item-expand:after {
  filter: none;
}
:root .ant-cascader-menu-item-expand:after {
  font-size: 12px;
}
.ant-cascader-menu-item-loading:after {
  font-family: 'anticon';
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  content: "\\e64d";
  animation: loadingCircle 1s infinite linear;
}
.ant-cascader-menu-item .ant-cascader-menu-item-keyword {
  color: #f04134;
}
`,
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-cascader {
  display: block;
}
.ant-cascader-menus {
  top: 100%;
  left: 0;
  position: relative;
  width: 100%;
  margin-top: 4px;
  margin-bottom: 4px;
}
`
                ]
            },] },
];
/**
 * @nocollapse
 */
NzCascaderComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
    { type: ChangeDetectorRef, },
];
NzCascaderComponent.propDecorators = {
    'nzDisabled': [{ type: Input },],
    'nzSize': [{ type: Input },],
    'nzPlaceHolder': [{ type: Input },],
    'nzShowInput': [{ type: Input },],
    'nzShowSearch': [{ type: Input },],
    'nzAllowClear': [{ type: Input },],
    'nzClearText': [{ type: Input },],
    'nzShowArrow': [{ type: Input },],
    'nzNotFoundContent': [{ type: Input },],
    'nzPopupClassName': [{ type: Input },],
    'nzColumnClassName': [{ type: Input },],
    'nzOptions': [{ type: Input },],
    'nzEnableCache': [{ type: Input },],
    'nzExpandTrigger': [{ type: Input },],
    'nzChangeOnSelect': [{ type: Input },],
    'nzChangeOn': [{ type: Input },],
    'nzMouseEnterDelay': [{ type: Input },],
    'nzMouseLeaveDelay': [{ type: Input },],
    'nzTriggerAction': [{ type: Input },],
    'nzDisplayRender': [{ type: Input },],
    'nzValueProperty': [{ type: Input },],
    'nzLabelProperty': [{ type: Input },],
    'menu': [{ type: ViewChild, args: ['menu',] },],
    'tabIndex': [{ type: HostBinding, args: ['attr.tabIndex',] },],
    'nzVisibleChange': [{ type: Output },],
    'nzChange': [{ type: Output },],
    'nzSelectionChange': [{ type: Output },],
    'nzSelect': [{ type: Output },],
    'nzLoad': [{ type: Output },],
    'nzClear': [{ type: Output },],
    'onKeyDown': [{ type: HostListener, args: ['keydown', ['$event'],] },],
    '_onTriggerClick': [{ type: HostListener, args: ['click', ['$event'],] },],
    '_onTriggerMouseEnter': [{ type: HostListener, args: ['mouseenter', ['$event'],] },],
    '_onTriggerMouseLeave': [{ type: HostListener, args: ['mouseleave', ['$event'],] },],
};

const HIDDEN_TEXTAREA_STYLE = `
  min-height:0 !important;
  max-height:none !important;
  height:0 !important;
  visibility:hidden !important;
  overflow:hidden !important;
  position:absolute !important;
  z-index:-1000 !important;
  top:0 !important;
  right:0 !important
`;
const SIZING_STYLE = [
    'letter-spacing',
    'line-height',
    'padding-top',
    'padding-bottom',
    'font-family',
    'font-weight',
    'font-size',
    'text-rendering',
    'text-transform',
    'width',
    'text-indent',
    'padding-left',
    'padding-right',
    'border-width',
    'box-sizing',
];
const computedStyleCache = {};
let hiddenTextarea;
/**
 * @param {?} node
 * @param {?=} useCache
 * @return {?}
 */
function calculateNodeStyling(node, useCache = false) {
    const /** @type {?} */ nodeRef = (node.getAttribute('id') ||
        node.getAttribute('data-reactid') ||
        node.getAttribute('name'));
    if (useCache && computedStyleCache[nodeRef]) {
        return computedStyleCache[nodeRef];
    }
    const /** @type {?} */ style$$1 = window.getComputedStyle(node);
    const /** @type {?} */ boxSizing = (style$$1.getPropertyValue('box-sizing') ||
        style$$1.getPropertyValue('-moz-box-sizing') ||
        style$$1.getPropertyValue('-webkit-box-sizing'));
    const /** @type {?} */ paddingSize = (parseFloat(style$$1.getPropertyValue('padding-bottom')) +
        parseFloat(style$$1.getPropertyValue('padding-top')));
    const /** @type {?} */ borderSize = (parseFloat(style$$1.getPropertyValue('border-bottom-width')) +
        parseFloat(style$$1.getPropertyValue('border-top-width')));
    const /** @type {?} */ sizingStyle = SIZING_STYLE
        .map(name => `${name}:${style$$1.getPropertyValue(name)}`)
        .join(';');
    const /** @type {?} */ nodeInfo = {
        sizingStyle,
        paddingSize,
        borderSize,
        boxSizing,
    };
    if (useCache && nodeRef) {
        computedStyleCache[nodeRef] = nodeInfo;
    }
    return nodeInfo;
}
/**
 * @param {?} uiTextNode
 * @param {?=} useCache
 * @param {?=} minRows
 * @param {?=} maxRows
 * @return {?}
 */
function calculateNodeHeight(uiTextNode, useCache = false, minRows = null, maxRows = null) {
    if (!hiddenTextarea) {
        hiddenTextarea = document.createElement('textarea');
        document.body.appendChild(hiddenTextarea);
    }
    // Fix wrap="off" issue
    // https://github.com/ant-design/ant-design/issues/6577
    if (uiTextNode.getAttribute('wrap')) {
        hiddenTextarea.setAttribute('wrap', uiTextNode.getAttribute('wrap'));
    }
    else {
        hiddenTextarea.removeAttribute('wrap');
    }
    // Copy all CSS properties that have an impact on the height of the content in
    // the textbox
    const { paddingSize, borderSize, boxSizing, sizingStyle, } = calculateNodeStyling(uiTextNode, useCache);
    // Need to have the overflow attribute to hide the scrollbar otherwise
    // text-lines will not calculated properly as the shadow will technically be
    // narrower for content
    hiddenTextarea.setAttribute('style', `${sizingStyle};${HIDDEN_TEXTAREA_STYLE}`);
    hiddenTextarea.value = uiTextNode.value || uiTextNode.placeholder || '';
    let /** @type {?} */ minHeight = -Infinity;
    let /** @type {?} */ maxHeight = Infinity;
    let /** @type {?} */ height = hiddenTextarea.scrollHeight;
    let /** @type {?} */ overflowY;
    if (boxSizing === 'border-box') {
        // border-box: add border, since height = content + padding + border
        height = height + borderSize;
    }
    else if (boxSizing === 'content-box') {
        // remove padding, since height = content
        height = height - paddingSize;
    }
    if (minRows !== null || maxRows !== null) {
        // measure height of a textarea with a single row
        hiddenTextarea.value = '';
        const /** @type {?} */ singleRowHeight = hiddenTextarea.scrollHeight - paddingSize;
        if (minRows !== null) {
            minHeight = singleRowHeight * minRows;
            if (boxSizing === 'border-box') {
                minHeight = minHeight + paddingSize + borderSize;
            }
            height = Math.max(minHeight, height);
        }
        if (maxRows !== null) {
            maxHeight = singleRowHeight * maxRows;
            if (boxSizing === 'border-box') {
                maxHeight = maxHeight + paddingSize + borderSize;
            }
            overflowY = height > maxHeight ? '' : 'hidden';
            height = Math.min(maxHeight, height);
        }
    }
    // Remove scroll bar flash when autosize without maxRows
    if (!maxRows) {
        overflowY = 'hidden';
    }
    return { height, minHeight, maxHeight, overflowY };
}

class NzInputComponent {
    /**
     * @param {?} _elementRef
     * @param {?} _renderer
     */
    constructor(_elementRef, _renderer) {
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this._size = 'default';
        this._prefixCls = 'ant-input';
        this._composing = false;
        this._disabled = false;
        this._readonly = false;
        this._autosize = false;
        // ngModel Access
        this.onChange = Function.prototype;
        this.onTouched = Function.prototype;
        this.nzType = 'text';
        this.nzBlur = new EventEmitter();
        this.nzFocus = new EventEmitter();
        this._el = this._elementRef.nativeElement;
    }
    /**
     * @return {?}
     */
    get nzSize() {
        return this._size;
    }
    ;
    /**
     * @param {?} value
     * @return {?}
     */
    set nzSize(value) {
        this._size = { large: 'lg', small: 'sm' }[value];
        this.setClassMap();
    }
    /**
     * @return {?}
     */
    get nzDisabled() {
        return this._disabled;
    }
    ;
    /**
     * @param {?} value
     * @return {?}
     */
    set nzDisabled(value) {
        this._disabled = value;
        this.setClassMap();
    }
    /**
     * @return {?}
     */
    get nzReadonly() {
        return this._readonly;
    }
    ;
    /**
     * @param {?} value
     * @return {?}
     */
    set nzReadonly(value) {
        this._readonly = value;
    }
    /**
     * @return {?}
     */
    get nzAutosize() {
        return this._autosize;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzAutosize(value) {
        if (typeof value === 'string') {
            this._autosize = true;
        }
        else {
            this._autosize = (value);
        }
        if (this._autosize) {
            this.nzRows = 1;
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    compositionStart(e) {
        this._composing = true;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    compositionEnd(e) {
        this._composing = false;
        this.onChange(this._value);
    }
    /**
     * @return {?}
     */
    get nzValue() {
        return this._value;
    }
    ;
    /**
     * @param {?} value
     * @return {?}
     */
    set nzValue(value) {
        if ((this._value === value) || (((this._value === undefined) || (this._value === null)) && ((value === undefined) || (value === null)))) {
            return;
        }
        this._value = value;
        if (!this._composing) {
            this.onChange(value);
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    _emitBlur($event) {
        this.nzBlur.emit($event);
        this.onTouched();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    _emitFocus($event) {
        this.nzFocus.emit($event);
    }
    /**
     * @return {?}
     */
    setClassMap() {
        this._classMap = {
            [this._prefixCls + '-' + this._size]: true,
            [`${this._prefixCls}-disabled`]: this._disabled
        };
    }
    /**
     * @return {?}
     */
    resizeTextarea() {
        const /** @type {?} */ textAreaRef = this.textAreaRef.nativeElement;
        // eliminate jitter
        textAreaRef.style.height = 'auto';
        const /** @type {?} */ maxRows = this.nzAutosize ? ((this.nzAutosize)).maxRows || null : null;
        const /** @type {?} */ minRows = this.nzAutosize ? ((this.nzAutosize)).minRows || null : null;
        const /** @type {?} */ textareaStyles = calculateNodeHeight(textAreaRef, false, minRows, maxRows);
        textAreaRef.style.height = `${textareaStyles.height}px`;
        textAreaRef.style.overflowY = textareaStyles.overflowY;
    }
    /**
     * @return {?}
     */
    textareaOnChange() {
        if (this.nzType === 'textarea' && this.nzAutosize) {
            this.resizeTextarea();
        }
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        if (this.nzType === 'search' || this._prefixContent || this._suffixContent) {
            this._renderer.setAttribute(this._el, 'class', `${this._prefixCls}-affix-wrapper`);
        }
        else {
            this._renderer.setAttribute(this._el, 'class', `${this._prefixCls}-wrapper`);
        }
        if ((this._addOnContentBefore || this._addOnContentAfter)) {
            this._renderer.setAttribute(this._el, 'class', `${this._prefixCls}-group`);
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.nzType === 'textarea' && this.nzAutosize) {
            setTimeout(() => this.resizeTextarea(), 0);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        // this.nzValue = value; // [NOTE] nzValue will trigger the onChange which leads to a new "VIEW -> MODEL updating"
        this._value = value;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.nzDisabled = isDisabled;
    }
}
NzInputComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-input',
                encapsulation: ViewEncapsulation.None,
                template: `
    <span class="ant-input-group-addon" *ngIf="_addOnContentBefore">
      <ng-template [ngTemplateOutlet]="_addOnContentBefore">
      </ng-template>
    </span>
    <span class="ant-input-prefix" *ngIf="_prefixContent">
      <ng-template [ngTemplateOutlet]="_prefixContent">
      </ng-template>
    </span>
    <ng-template [ngIf]="nzType!='textarea'">
      <input
        (blur)="_emitBlur($event)"
        (focus)="_emitFocus($event)"
        [attr.id]="nzId"
        [disabled]="nzDisabled"
        [readonly]="nzReadonly"
        [attr.type]="nzType"
        class="ant-input"
        [class.ant-input-search]="nzType==='search'"
        [ngClass]="_classMap"
        [attr.placeholder]="nzPlaceHolder"
        [(ngModel)]="nzValue">
    </ng-template>
    <ng-template [ngIf]="nzType=='textarea'">
      <textarea
        (blur)="_emitBlur($event)"
        (focus)="_emitFocus($event)"
        (input)="textareaOnChange($event)"
        [attr.id]="nzId"
        #inputTextarea
        [disabled]="nzDisabled"
        [readonly]="nzReadonly"
        type="textarea"
        [attr.rows]="nzRows"
        [attr.cols]="nzCols"
        class="ant-input"
        [ngClass]="_classMap"
        [attr.placeholder]="nzPlaceHolder"
        [(ngModel)]="nzValue"></textarea>
    </ng-template>
    <span class="ant-input-suffix" *ngIf="(nzType==='search')||(_suffixContent)">
      <i class="anticon anticon-search ant-input-search-icon" *ngIf="nzType==='search'"></i>
      <ng-template [ngTemplateOutlet]="_suffixContent">
      </ng-template>
    </span>
    <span class="ant-input-group-addon" *ngIf="_addOnContentAfter">
      <ng-template [ngTemplateOutlet]="_addOnContentAfter">
      </ng-template>
    </span>`,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => NzInputComponent),
                        multi: true
                    }
                ],
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-input-search-icon {
  cursor: pointer;
  transition: all .3s;
  font-size: 14px;
}
.ant-input-search-icon:hover {
  color: #3FCE9E;
}
.ant-search-input-wrapper {
  display: inline-block;
  vertical-align: middle;
}
.ant-search-input.ant-input-group .ant-input:first-child,
.ant-search-input.ant-input-group .ant-select:first-child {
  border-radius: 4px;
  position: absolute;
  top: -1px;
  width: 100%;
}
.ant-search-input.ant-input-group .ant-input:first-child {
  padding-right: 36px;
}
.ant-search-input .ant-search-btn {
  color: rgba(0, 0, 0, 0.65);
  background-color: #fff;
  border-color: #d9d9d9;
  border-radius: 0 3px 3px 0;
  left: -1px;
  position: relative;
  border-width: 0 0 0 1px;
  z-index: 2;
  padding-left: 8px;
  padding-right: 8px;
}
.ant-search-input .ant-search-btn > a:only-child {
  color: currentColor;
}
.ant-search-input .ant-search-btn > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-search-input .ant-search-btn:hover,
.ant-search-input .ant-search-btn:focus {
  color: #3FCE9E;
  background-color: #fff;
  border-color: #3FCE9E;
}
.ant-search-input .ant-search-btn:hover > a:only-child,
.ant-search-input .ant-search-btn:focus > a:only-child {
  color: currentColor;
}
.ant-search-input .ant-search-btn:hover > a:only-child:after,
.ant-search-input .ant-search-btn:focus > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-search-input .ant-search-btn:active,
.ant-search-input .ant-search-btn.active {
  color: #36b38c;
  background-color: #fff;
  border-color: #36b38c;
}
.ant-search-input .ant-search-btn:active > a:only-child,
.ant-search-input .ant-search-btn.active > a:only-child {
  color: currentColor;
}
.ant-search-input .ant-search-btn:active > a:only-child:after,
.ant-search-input .ant-search-btn.active > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-search-input .ant-search-btn.disabled,
.ant-search-input .ant-search-btn[disabled],
.ant-search-input .ant-search-btn.disabled:hover,
.ant-search-input .ant-search-btn[disabled]:hover,
.ant-search-input .ant-search-btn.disabled:focus,
.ant-search-input .ant-search-btn[disabled]:focus,
.ant-search-input .ant-search-btn.disabled:active,
.ant-search-input .ant-search-btn[disabled]:active,
.ant-search-input .ant-search-btn.disabled.active,
.ant-search-input .ant-search-btn[disabled].active {
  color: rgba(0, 0, 0, 0.25);
  background-color: #f7f7f7;
  border-color: #d9d9d9;
}
.ant-search-input .ant-search-btn.disabled > a:only-child,
.ant-search-input .ant-search-btn[disabled] > a:only-child,
.ant-search-input .ant-search-btn.disabled:hover > a:only-child,
.ant-search-input .ant-search-btn[disabled]:hover > a:only-child,
.ant-search-input .ant-search-btn.disabled:focus > a:only-child,
.ant-search-input .ant-search-btn[disabled]:focus > a:only-child,
.ant-search-input .ant-search-btn.disabled:active > a:only-child,
.ant-search-input .ant-search-btn[disabled]:active > a:only-child,
.ant-search-input .ant-search-btn.disabled.active > a:only-child,
.ant-search-input .ant-search-btn[disabled].active > a:only-child {
  color: currentColor;
}
.ant-search-input .ant-search-btn.disabled > a:only-child:after,
.ant-search-input .ant-search-btn[disabled] > a:only-child:after,
.ant-search-input .ant-search-btn.disabled:hover > a:only-child:after,
.ant-search-input .ant-search-btn[disabled]:hover > a:only-child:after,
.ant-search-input .ant-search-btn.disabled:focus > a:only-child:after,
.ant-search-input .ant-search-btn[disabled]:focus > a:only-child:after,
.ant-search-input .ant-search-btn.disabled:active > a:only-child:after,
.ant-search-input .ant-search-btn[disabled]:active > a:only-child:after,
.ant-search-input .ant-search-btn.disabled.active > a:only-child:after,
.ant-search-input .ant-search-btn[disabled].active > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-search-input .ant-search-btn:hover,
.ant-search-input .ant-search-btn:focus,
.ant-search-input .ant-search-btn:active,
.ant-search-input .ant-search-btn.active {
  background: #fff;
}
.ant-search-input .ant-search-btn:hover {
  border-color: #d9d9d9;
}
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty,
.ant-search-input:hover .ant-search-btn-noempty {
  color: #fff;
  background-color: #3FCE9E;
  border-color: #3FCE9E;
}
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty > a:only-child {
  color: currentColor;
}
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty:hover,
.ant-search-input:hover .ant-search-btn-noempty:hover,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty:focus,
.ant-search-input:hover .ant-search-btn-noempty:focus {
  color: #fff;
  background-color: #6ddab5;
  border-color: #6ddab5;
}
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty:hover > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty:hover > a:only-child,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty:focus > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty:focus > a:only-child {
  color: currentColor;
}
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty:hover > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty:hover > a:only-child:after,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty:focus > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty:focus > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty:active,
.ant-search-input:hover .ant-search-btn-noempty:active,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.active,
.ant-search-input:hover .ant-search-btn-noempty.active {
  color: #fff;
  background-color: #36b38c;
  border-color: #36b38c;
}
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty:active > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty:active > a:only-child,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.active > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty.active > a:only-child {
  color: currentColor;
}
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty:active > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty:active > a:only-child:after,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.active > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty.active > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled,
.ant-search-input:hover .ant-search-btn-noempty.disabled,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled],
.ant-search-input:hover .ant-search-btn-noempty[disabled],
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled:hover,
.ant-search-input:hover .ant-search-btn-noempty.disabled:hover,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled]:hover,
.ant-search-input:hover .ant-search-btn-noempty[disabled]:hover,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled:focus,
.ant-search-input:hover .ant-search-btn-noempty.disabled:focus,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled]:focus,
.ant-search-input:hover .ant-search-btn-noempty[disabled]:focus,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled:active,
.ant-search-input:hover .ant-search-btn-noempty.disabled:active,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled]:active,
.ant-search-input:hover .ant-search-btn-noempty[disabled]:active,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled.active,
.ant-search-input:hover .ant-search-btn-noempty.disabled.active,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled].active,
.ant-search-input:hover .ant-search-btn-noempty[disabled].active {
  color: rgba(0, 0, 0, 0.25);
  background-color: #f7f7f7;
  border-color: #d9d9d9;
}
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty.disabled > a:only-child,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled] > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty[disabled] > a:only-child,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled:hover > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty.disabled:hover > a:only-child,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled]:hover > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty[disabled]:hover > a:only-child,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled:focus > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty.disabled:focus > a:only-child,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled]:focus > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty[disabled]:focus > a:only-child,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled:active > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty.disabled:active > a:only-child,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled]:active > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty[disabled]:active > a:only-child,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled.active > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty.disabled.active > a:only-child,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled].active > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty[disabled].active > a:only-child {
  color: currentColor;
}
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty.disabled > a:only-child:after,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled] > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty[disabled] > a:only-child:after,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled:hover > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty.disabled:hover > a:only-child:after,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled]:hover > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty[disabled]:hover > a:only-child:after,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled:focus > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty.disabled:focus > a:only-child:after,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled]:focus > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty[disabled]:focus > a:only-child:after,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled:active > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty.disabled:active > a:only-child:after,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled]:active > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty[disabled]:active > a:only-child:after,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled.active > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty.disabled.active > a:only-child:after,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled].active > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty[disabled].active > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-search-input .ant-select-combobox .ant-select-selection__rendered {
  margin-right: 29px;
}
.ant-input {
  position: relative;
  display: inline-block;
  padding: 4px 7px;
  width: 100%;
  height: 28px;
  cursor: text;
  font-size: 12px;
  line-height: 1.5;
  color: rgba(0, 0, 0, 0.65);
  background-color: #fff;
  background-image: none;
  border: 1px solid #d9d9d9;
  border-radius: 4px;
  transition: all .3s;
}
.ant-input::-moz-placeholder {
  color: rgba(0, 0, 0, 0.25);
  opacity: 1;
}
.ant-input:-ms-input-placeholder {
  color: rgba(0, 0, 0, 0.25);
}
.ant-input::-webkit-input-placeholder {
  color: rgba(0, 0, 0, 0.25);
}
.ant-input:hover {
  border-color: #6ddab5;
}
.ant-input:focus {
  border-color: #6ddab5;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(63, 206, 158, 0.2);
}
.ant-input-disabled {
  background-color: #f7f7f7;
  opacity: 1;
  cursor: not-allowed;
  color: rgba(0, 0, 0, 0.25);
}
.ant-input-disabled:hover {
  border-color: #e2e2e2;
}
textarea.ant-input {
  max-width: 100%;
  height: auto;
  vertical-align: bottom;
}
.ant-input-lg {
  padding: 6px 7px;
  height: 32px;
}
.ant-input-sm {
  padding: 1px 7px;
  height: 22px;
}
.ant-input-group {
  position: relative;
  display: table;
  border-collapse: separate;
  border-spacing: 0;
  width: 100%;
}
.ant-input-group[class*="col-"] {
  float: none;
  padding-left: 0;
  padding-right: 0;
}
.ant-input-group > [class*="col-"] {
  padding-right: 8px;
}
.ant-input-group > [class*="col-"]:last-child {
  padding-right: 0;
}
.ant-input-group-addon,
.ant-input-group-wrap,
.ant-input-group > .ant-input {
  display: table-cell;
}
.ant-input-group-addon:not(:first-child):not(:last-child),
.ant-input-group-wrap:not(:first-child):not(:last-child),
.ant-input-group > .ant-input:not(:first-child):not(:last-child) {
  border-radius: 0;
}
.ant-input-group-addon,
.ant-input-group-wrap {
  width: 1px;
  white-space: nowrap;
  vertical-align: middle;
}
.ant-input-group-wrap > * {
  display: block !important;
}
.ant-input-group .ant-input {
  float: left;
  width: 100%;
  margin-bottom: 0;
}
.ant-input-group .ant-input:focus {
  z-index: 1;
}
.ant-input-group-addon {
  padding: 4px 7px;
  font-size: 12px;
  font-weight: normal;
  line-height: 1;
  color: rgba(0, 0, 0, 0.65);
  text-align: center;
  background-color: #eee;
  border: 1px solid #d9d9d9;
  border-radius: 4px;
  position: relative;
  transition: all .3s;
}
.ant-input-group-addon .ant-select {
  margin: -5px -7px;
}
.ant-input-group-addon .ant-select .ant-select-selection {
  background-color: inherit;
  margin: -1px;
  border: 1px solid transparent;
  box-shadow: none;
}
.ant-input-group-addon .ant-select-open .ant-select-selection,
.ant-input-group-addon .ant-select-focused .ant-select-selection {
  color: #3FCE9E;
}
.ant-input-group-addon > i:only-child:after {
  position: absolute;
  content: '';
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
}
.ant-input-group > .ant-input:first-child,
.ant-input-group-addon:first-child {
  border-bottom-right-radius: 0;
  border-top-right-radius: 0;
}
.ant-input-group > .ant-input:first-child .ant-select .ant-select-selection,
.ant-input-group-addon:first-child .ant-select .ant-select-selection {
  border-bottom-right-radius: 0;
  border-top-right-radius: 0;
}
.ant-input-group > .ant-input-affix-wrapper:not(:first-child) .ant-input {
  border-bottom-left-radius: 0;
  border-top-left-radius: 0;
}
.ant-input-group > .ant-input-affix-wrapper:not(:last-child) .ant-input {
  border-bottom-right-radius: 0;
  border-top-right-radius: 0;
}
.ant-input-group-addon:first-child {
  border-right: 0;
}
.ant-input-group-addon:last-child {
  border-left: 0;
}
.ant-input-group > .ant-input:last-child,
.ant-input-group-addon:last-child {
  border-bottom-left-radius: 0;
  border-top-left-radius: 0;
}
.ant-input-group > .ant-input:last-child .ant-select .ant-select-selection,
.ant-input-group-addon:last-child .ant-select .ant-select-selection {
  border-bottom-left-radius: 0;
  border-top-left-radius: 0;
}
.ant-input-group-lg .ant-input,
.ant-input-group-lg > .ant-input-group-addon {
  padding: 6px 7px;
  height: 32px;
}
.ant-input-group-sm .ant-input,
.ant-input-group-sm > .ant-input-group-addon {
  padding: 1px 7px;
  height: 22px;
}
.ant-input-group-lg .ant-select-selection--single {
  height: 32px;
}
.ant-input-group-sm .ant-select-selection--single {
  height: 22px;
}
.ant-input-group .ant-input-affix-wrapper {
  display: table-cell;
  width: 100%;
  float: left;
}
.ant-input-group.ant-input-group-compact > * {
  border-radius: 0;
  border-right-width: 0;
  vertical-align: middle;
  float: none;
  display: inline-block;
}
.ant-input-group.ant-input-group-compact .ant-input {
  float: none;
  z-index: auto;
}
.ant-input-group.ant-input-group-compact > .ant-select > .ant-select-selection,
.ant-input-group.ant-input-group-compact > .ant-calendar-picker .ant-input,
.ant-input-group.ant-input-group-compact > .ant-select-auto-complete .ant-input,
.ant-input-group.ant-input-group-compact > .ant-cascader-picker .ant-input,
.ant-input-group.ant-input-group-compact > .ant-mention-wrapper .ant-mention-editor,
.ant-input-group.ant-input-group-compact > .ant-time-picker .ant-time-picker-input {
  border-radius: 0;
  border-right-width: 0;
}
.ant-input-group.ant-input-group-compact > *:first-child,
.ant-input-group.ant-input-group-compact > .ant-select:first-child > .ant-select-selection,
.ant-input-group.ant-input-group-compact > .ant-calendar-picker:first-child .ant-input,
.ant-input-group.ant-input-group-compact > .ant-select-auto-complete:first-child .ant-input,
.ant-input-group.ant-input-group-compact > .ant-cascader-picker:first-child .ant-input,
.ant-input-group.ant-input-group-compact > .ant-mention-wrapper:first-child .ant-mention-editor,
.ant-input-group.ant-input-group-compact > .ant-time-picker:first-child .ant-time-picker-input {
  border-top-left-radius: 4px;
  border-bottom-left-radius: 4px;
}
.ant-input-group.ant-input-group-compact > *:last-child,
.ant-input-group.ant-input-group-compact > .ant-select:last-child > .ant-select-selection,
.ant-input-group.ant-input-group-compact > .ant-calendar-picker:last-child .ant-input,
.ant-input-group.ant-input-group-compact > .ant-select-auto-complete:last-child .ant-input,
.ant-input-group.ant-input-group-compact > .ant-cascader-picker:last-child .ant-input,
.ant-input-group.ant-input-group-compact > .ant-mention-wrapper:last-child .ant-mention-editor,
.ant-input-group.ant-input-group-compact > .ant-time-picker:last-child .ant-time-picker-input {
  border-top-right-radius: 4px;
  border-bottom-right-radius: 4px;
  border-right-width: 1px;
}
.ant-input-group-wrapper {
  display: inline-block;
  vertical-align: top;
}
.ant-input-affix-wrapper {
  position: relative;
  display: inline-block;
  width: 100%;
}
.ant-input-affix-wrapper .ant-input {
  z-index: 1;
}
.ant-input-affix-wrapper:hover .ant-input:not(.ant-input-disabled) {
  border-color: #6ddab5;
}
.ant-input-affix-wrapper .ant-input-prefix,
.ant-input-affix-wrapper .ant-input-suffix {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  z-index: 2;
  line-height: 0;
  color: rgba(0, 0, 0, 0.65);
}
.ant-input-affix-wrapper .ant-input-prefix {
  left: 7px;
}
.ant-input-affix-wrapper .ant-input-suffix {
  right: 7px;
}
.ant-input-affix-wrapper .ant-input:not(:first-child) {
  padding-left: 24px;
}
.ant-input-affix-wrapper .ant-input:not(:last-child) {
  padding-right: 24px;
}
.ant-input-affix-wrapper .ant-input {
  min-height: 100%;
}
`,
                    `nz-input {
  display: inline-block;
  width: 100%;
}
`
                ]
            },] },
];
/**
 * @nocollapse
 */
NzInputComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
];
NzInputComponent.propDecorators = {
    'nzPlaceHolder': [{ type: Input },],
    'nzType': [{ type: Input },],
    'nzId': [{ type: Input },],
    'nzRows': [{ type: Input },],
    'nzCols': [{ type: Input },],
    'nzSize': [{ type: Input },],
    'nzDisabled': [{ type: Input },],
    'nzReadonly': [{ type: Input },],
    'nzAutosize': [{ type: Input },],
    'nzBlur': [{ type: Output },],
    'nzFocus': [{ type: Output },],
    'textAreaRef': [{ type: ViewChild, args: ['inputTextarea',] },],
    '_addOnContentBefore': [{ type: ContentChild, args: ['addOnBefore',] },],
    '_addOnContentAfter': [{ type: ContentChild, args: ['addOnAfter',] },],
    '_prefixContent': [{ type: ContentChild, args: ['prefix',] },],
    '_suffixContent': [{ type: ContentChild, args: ['suffix',] },],
    'compositionStart': [{ type: HostListener, args: ['compositionstart', ['$event'],] },],
    'compositionEnd': [{ type: HostListener, args: ['compositionend', ['$event'],] },],
};

class NzInputDirectiveComponent {
    /**
     * @param {?} _elementRef
     * @param {?} _render
     */
    constructor(_elementRef, _render) {
        this._elementRef = _elementRef;
        this._render = _render;
        this.size = 'default';
        this._readonly = false;
        this._autosize = false;
        this._disabled = false;
        this._nzInput = true;
        this.nativeElement = this._elementRef.nativeElement;
    }
    /**
     * @return {?}
     */
    get nzSize() {
        return this.size;
    }
    ;
    /**
     * @param {?} value
     * @return {?}
     */
    set nzSize(value) {
        this.size = { large: 'lg', small: 'sm' }[value];
    }
    /**
     * @return {?}
     */
    get nzDisabled() {
        return this._disabled;
    }
    ;
    /**
     * @param {?} value
     * @return {?}
     */
    set nzDisabled(value) {
        if (value) {
            this._render.setAttribute(this.nativeElement, 'disabled', '');
        }
        else {
            this._render.removeAttribute(this.nativeElement, 'disabled');
        }
        this._disabled = value;
    }
    /**
     * @return {?}
     */
    get nzReadonly() {
        return this._readonly;
    }
    ;
    /**
     * @param {?} value
     * @return {?}
     */
    set nzReadonly(value) {
        if (value) {
            this._render.setAttribute(this.nativeElement, 'readonly', '');
        }
        else {
            this._render.removeAttribute(this.nativeElement, 'readonly');
        }
        this._readonly = value;
    }
    /**
     * @return {?}
     */
    get nzAutosize() {
        return this._autosize;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzAutosize(value) {
        if (typeof value === 'string') {
            this._autosize = true;
        }
        else {
            this._autosize = (value);
        }
        if (this._autosize) {
            this._render.setAttribute(this.nativeElement, 'autosize', '');
        }
        else {
            this._render.removeAttribute(this.nativeElement, 'autosize');
        }
    }
    /**
     * @return {?}
     */
    get setLgClass() {
        return this.size === 'lg';
    }
    ;
    /**
     * @return {?}
     */
    get setSmClass() {
        return this.size === 'sm';
    }
    ;
}
NzInputDirectiveComponent.decorators = [
    { type: Component, args: [{
                selector: '[nz-input]',
                encapsulation: ViewEncapsulation.None,
                template: ``,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-input-search-icon {
  cursor: pointer;
  transition: all .3s;
  font-size: 14px;
}
.ant-input-search-icon:hover {
  color: #3FCE9E;
}
.ant-search-input-wrapper {
  display: inline-block;
  vertical-align: middle;
}
.ant-search-input.ant-input-group .ant-input:first-child,
.ant-search-input.ant-input-group .ant-select:first-child {
  border-radius: 4px;
  position: absolute;
  top: -1px;
  width: 100%;
}
.ant-search-input.ant-input-group .ant-input:first-child {
  padding-right: 36px;
}
.ant-search-input .ant-search-btn {
  color: rgba(0, 0, 0, 0.65);
  background-color: #fff;
  border-color: #d9d9d9;
  border-radius: 0 3px 3px 0;
  left: -1px;
  position: relative;
  border-width: 0 0 0 1px;
  z-index: 2;
  padding-left: 8px;
  padding-right: 8px;
}
.ant-search-input .ant-search-btn > a:only-child {
  color: currentColor;
}
.ant-search-input .ant-search-btn > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-search-input .ant-search-btn:hover,
.ant-search-input .ant-search-btn:focus {
  color: #3FCE9E;
  background-color: #fff;
  border-color: #3FCE9E;
}
.ant-search-input .ant-search-btn:hover > a:only-child,
.ant-search-input .ant-search-btn:focus > a:only-child {
  color: currentColor;
}
.ant-search-input .ant-search-btn:hover > a:only-child:after,
.ant-search-input .ant-search-btn:focus > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-search-input .ant-search-btn:active,
.ant-search-input .ant-search-btn.active {
  color: #36b38c;
  background-color: #fff;
  border-color: #36b38c;
}
.ant-search-input .ant-search-btn:active > a:only-child,
.ant-search-input .ant-search-btn.active > a:only-child {
  color: currentColor;
}
.ant-search-input .ant-search-btn:active > a:only-child:after,
.ant-search-input .ant-search-btn.active > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-search-input .ant-search-btn.disabled,
.ant-search-input .ant-search-btn[disabled],
.ant-search-input .ant-search-btn.disabled:hover,
.ant-search-input .ant-search-btn[disabled]:hover,
.ant-search-input .ant-search-btn.disabled:focus,
.ant-search-input .ant-search-btn[disabled]:focus,
.ant-search-input .ant-search-btn.disabled:active,
.ant-search-input .ant-search-btn[disabled]:active,
.ant-search-input .ant-search-btn.disabled.active,
.ant-search-input .ant-search-btn[disabled].active {
  color: rgba(0, 0, 0, 0.25);
  background-color: #f7f7f7;
  border-color: #d9d9d9;
}
.ant-search-input .ant-search-btn.disabled > a:only-child,
.ant-search-input .ant-search-btn[disabled] > a:only-child,
.ant-search-input .ant-search-btn.disabled:hover > a:only-child,
.ant-search-input .ant-search-btn[disabled]:hover > a:only-child,
.ant-search-input .ant-search-btn.disabled:focus > a:only-child,
.ant-search-input .ant-search-btn[disabled]:focus > a:only-child,
.ant-search-input .ant-search-btn.disabled:active > a:only-child,
.ant-search-input .ant-search-btn[disabled]:active > a:only-child,
.ant-search-input .ant-search-btn.disabled.active > a:only-child,
.ant-search-input .ant-search-btn[disabled].active > a:only-child {
  color: currentColor;
}
.ant-search-input .ant-search-btn.disabled > a:only-child:after,
.ant-search-input .ant-search-btn[disabled] > a:only-child:after,
.ant-search-input .ant-search-btn.disabled:hover > a:only-child:after,
.ant-search-input .ant-search-btn[disabled]:hover > a:only-child:after,
.ant-search-input .ant-search-btn.disabled:focus > a:only-child:after,
.ant-search-input .ant-search-btn[disabled]:focus > a:only-child:after,
.ant-search-input .ant-search-btn.disabled:active > a:only-child:after,
.ant-search-input .ant-search-btn[disabled]:active > a:only-child:after,
.ant-search-input .ant-search-btn.disabled.active > a:only-child:after,
.ant-search-input .ant-search-btn[disabled].active > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-search-input .ant-search-btn:hover,
.ant-search-input .ant-search-btn:focus,
.ant-search-input .ant-search-btn:active,
.ant-search-input .ant-search-btn.active {
  background: #fff;
}
.ant-search-input .ant-search-btn:hover {
  border-color: #d9d9d9;
}
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty,
.ant-search-input:hover .ant-search-btn-noempty {
  color: #fff;
  background-color: #3FCE9E;
  border-color: #3FCE9E;
}
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty > a:only-child {
  color: currentColor;
}
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty:hover,
.ant-search-input:hover .ant-search-btn-noempty:hover,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty:focus,
.ant-search-input:hover .ant-search-btn-noempty:focus {
  color: #fff;
  background-color: #6ddab5;
  border-color: #6ddab5;
}
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty:hover > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty:hover > a:only-child,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty:focus > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty:focus > a:only-child {
  color: currentColor;
}
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty:hover > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty:hover > a:only-child:after,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty:focus > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty:focus > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty:active,
.ant-search-input:hover .ant-search-btn-noempty:active,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.active,
.ant-search-input:hover .ant-search-btn-noempty.active {
  color: #fff;
  background-color: #36b38c;
  border-color: #36b38c;
}
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty:active > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty:active > a:only-child,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.active > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty.active > a:only-child {
  color: currentColor;
}
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty:active > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty:active > a:only-child:after,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.active > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty.active > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled,
.ant-search-input:hover .ant-search-btn-noempty.disabled,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled],
.ant-search-input:hover .ant-search-btn-noempty[disabled],
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled:hover,
.ant-search-input:hover .ant-search-btn-noempty.disabled:hover,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled]:hover,
.ant-search-input:hover .ant-search-btn-noempty[disabled]:hover,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled:focus,
.ant-search-input:hover .ant-search-btn-noempty.disabled:focus,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled]:focus,
.ant-search-input:hover .ant-search-btn-noempty[disabled]:focus,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled:active,
.ant-search-input:hover .ant-search-btn-noempty.disabled:active,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled]:active,
.ant-search-input:hover .ant-search-btn-noempty[disabled]:active,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled.active,
.ant-search-input:hover .ant-search-btn-noempty.disabled.active,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled].active,
.ant-search-input:hover .ant-search-btn-noempty[disabled].active {
  color: rgba(0, 0, 0, 0.25);
  background-color: #f7f7f7;
  border-color: #d9d9d9;
}
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty.disabled > a:only-child,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled] > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty[disabled] > a:only-child,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled:hover > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty.disabled:hover > a:only-child,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled]:hover > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty[disabled]:hover > a:only-child,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled:focus > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty.disabled:focus > a:only-child,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled]:focus > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty[disabled]:focus > a:only-child,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled:active > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty.disabled:active > a:only-child,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled]:active > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty[disabled]:active > a:only-child,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled.active > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty.disabled.active > a:only-child,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled].active > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty[disabled].active > a:only-child {
  color: currentColor;
}
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty.disabled > a:only-child:after,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled] > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty[disabled] > a:only-child:after,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled:hover > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty.disabled:hover > a:only-child:after,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled]:hover > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty[disabled]:hover > a:only-child:after,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled:focus > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty.disabled:focus > a:only-child:after,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled]:focus > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty[disabled]:focus > a:only-child:after,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled:active > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty.disabled:active > a:only-child:after,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled]:active > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty[disabled]:active > a:only-child:after,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled.active > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty.disabled.active > a:only-child:after,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled].active > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty[disabled].active > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-search-input .ant-select-combobox .ant-select-selection__rendered {
  margin-right: 29px;
}
.ant-input {
  position: relative;
  display: inline-block;
  padding: 4px 7px;
  width: 100%;
  height: 28px;
  cursor: text;
  font-size: 12px;
  line-height: 1.5;
  color: rgba(0, 0, 0, 0.65);
  background-color: #fff;
  background-image: none;
  border: 1px solid #d9d9d9;
  border-radius: 4px;
  transition: all .3s;
}
.ant-input::-moz-placeholder {
  color: rgba(0, 0, 0, 0.25);
  opacity: 1;
}
.ant-input:-ms-input-placeholder {
  color: rgba(0, 0, 0, 0.25);
}
.ant-input::-webkit-input-placeholder {
  color: rgba(0, 0, 0, 0.25);
}
.ant-input:hover {
  border-color: #6ddab5;
}
.ant-input:focus {
  border-color: #6ddab5;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(63, 206, 158, 0.2);
}
.ant-input-disabled {
  background-color: #f7f7f7;
  opacity: 1;
  cursor: not-allowed;
  color: rgba(0, 0, 0, 0.25);
}
.ant-input-disabled:hover {
  border-color: #e2e2e2;
}
textarea.ant-input {
  max-width: 100%;
  height: auto;
  vertical-align: bottom;
}
.ant-input-lg {
  padding: 6px 7px;
  height: 32px;
}
.ant-input-sm {
  padding: 1px 7px;
  height: 22px;
}
.ant-input-group {
  position: relative;
  display: table;
  border-collapse: separate;
  border-spacing: 0;
  width: 100%;
}
.ant-input-group[class*="col-"] {
  float: none;
  padding-left: 0;
  padding-right: 0;
}
.ant-input-group > [class*="col-"] {
  padding-right: 8px;
}
.ant-input-group > [class*="col-"]:last-child {
  padding-right: 0;
}
.ant-input-group-addon,
.ant-input-group-wrap,
.ant-input-group > .ant-input {
  display: table-cell;
}
.ant-input-group-addon:not(:first-child):not(:last-child),
.ant-input-group-wrap:not(:first-child):not(:last-child),
.ant-input-group > .ant-input:not(:first-child):not(:last-child) {
  border-radius: 0;
}
.ant-input-group-addon,
.ant-input-group-wrap {
  width: 1px;
  white-space: nowrap;
  vertical-align: middle;
}
.ant-input-group-wrap > * {
  display: block !important;
}
.ant-input-group .ant-input {
  float: left;
  width: 100%;
  margin-bottom: 0;
}
.ant-input-group .ant-input:focus {
  z-index: 1;
}
.ant-input-group-addon {
  padding: 4px 7px;
  font-size: 12px;
  font-weight: normal;
  line-height: 1;
  color: rgba(0, 0, 0, 0.65);
  text-align: center;
  background-color: #eee;
  border: 1px solid #d9d9d9;
  border-radius: 4px;
  position: relative;
  transition: all .3s;
}
.ant-input-group-addon .ant-select {
  margin: -5px -7px;
}
.ant-input-group-addon .ant-select .ant-select-selection {
  background-color: inherit;
  margin: -1px;
  border: 1px solid transparent;
  box-shadow: none;
}
.ant-input-group-addon .ant-select-open .ant-select-selection,
.ant-input-group-addon .ant-select-focused .ant-select-selection {
  color: #3FCE9E;
}
.ant-input-group-addon > i:only-child:after {
  position: absolute;
  content: '';
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
}
.ant-input-group > .ant-input:first-child,
.ant-input-group-addon:first-child {
  border-bottom-right-radius: 0;
  border-top-right-radius: 0;
}
.ant-input-group > .ant-input:first-child .ant-select .ant-select-selection,
.ant-input-group-addon:first-child .ant-select .ant-select-selection {
  border-bottom-right-radius: 0;
  border-top-right-radius: 0;
}
.ant-input-group > .ant-input-affix-wrapper:not(:first-child) .ant-input {
  border-bottom-left-radius: 0;
  border-top-left-radius: 0;
}
.ant-input-group > .ant-input-affix-wrapper:not(:last-child) .ant-input {
  border-bottom-right-radius: 0;
  border-top-right-radius: 0;
}
.ant-input-group-addon:first-child {
  border-right: 0;
}
.ant-input-group-addon:last-child {
  border-left: 0;
}
.ant-input-group > .ant-input:last-child,
.ant-input-group-addon:last-child {
  border-bottom-left-radius: 0;
  border-top-left-radius: 0;
}
.ant-input-group > .ant-input:last-child .ant-select .ant-select-selection,
.ant-input-group-addon:last-child .ant-select .ant-select-selection {
  border-bottom-left-radius: 0;
  border-top-left-radius: 0;
}
.ant-input-group-lg .ant-input,
.ant-input-group-lg > .ant-input-group-addon {
  padding: 6px 7px;
  height: 32px;
}
.ant-input-group-sm .ant-input,
.ant-input-group-sm > .ant-input-group-addon {
  padding: 1px 7px;
  height: 22px;
}
.ant-input-group-lg .ant-select-selection--single {
  height: 32px;
}
.ant-input-group-sm .ant-select-selection--single {
  height: 22px;
}
.ant-input-group .ant-input-affix-wrapper {
  display: table-cell;
  width: 100%;
  float: left;
}
.ant-input-group.ant-input-group-compact > * {
  border-radius: 0;
  border-right-width: 0;
  vertical-align: middle;
  float: none;
  display: inline-block;
}
.ant-input-group.ant-input-group-compact .ant-input {
  float: none;
  z-index: auto;
}
.ant-input-group.ant-input-group-compact > .ant-select > .ant-select-selection,
.ant-input-group.ant-input-group-compact > .ant-calendar-picker .ant-input,
.ant-input-group.ant-input-group-compact > .ant-select-auto-complete .ant-input,
.ant-input-group.ant-input-group-compact > .ant-cascader-picker .ant-input,
.ant-input-group.ant-input-group-compact > .ant-mention-wrapper .ant-mention-editor,
.ant-input-group.ant-input-group-compact > .ant-time-picker .ant-time-picker-input {
  border-radius: 0;
  border-right-width: 0;
}
.ant-input-group.ant-input-group-compact > *:first-child,
.ant-input-group.ant-input-group-compact > .ant-select:first-child > .ant-select-selection,
.ant-input-group.ant-input-group-compact > .ant-calendar-picker:first-child .ant-input,
.ant-input-group.ant-input-group-compact > .ant-select-auto-complete:first-child .ant-input,
.ant-input-group.ant-input-group-compact > .ant-cascader-picker:first-child .ant-input,
.ant-input-group.ant-input-group-compact > .ant-mention-wrapper:first-child .ant-mention-editor,
.ant-input-group.ant-input-group-compact > .ant-time-picker:first-child .ant-time-picker-input {
  border-top-left-radius: 4px;
  border-bottom-left-radius: 4px;
}
.ant-input-group.ant-input-group-compact > *:last-child,
.ant-input-group.ant-input-group-compact > .ant-select:last-child > .ant-select-selection,
.ant-input-group.ant-input-group-compact > .ant-calendar-picker:last-child .ant-input,
.ant-input-group.ant-input-group-compact > .ant-select-auto-complete:last-child .ant-input,
.ant-input-group.ant-input-group-compact > .ant-cascader-picker:last-child .ant-input,
.ant-input-group.ant-input-group-compact > .ant-mention-wrapper:last-child .ant-mention-editor,
.ant-input-group.ant-input-group-compact > .ant-time-picker:last-child .ant-time-picker-input {
  border-top-right-radius: 4px;
  border-bottom-right-radius: 4px;
  border-right-width: 1px;
}
.ant-input-group-wrapper {
  display: inline-block;
  vertical-align: top;
}
.ant-input-affix-wrapper {
  position: relative;
  display: inline-block;
  width: 100%;
}
.ant-input-affix-wrapper .ant-input {
  z-index: 1;
}
.ant-input-affix-wrapper:hover .ant-input:not(.ant-input-disabled) {
  border-color: #6ddab5;
}
.ant-input-affix-wrapper .ant-input-prefix,
.ant-input-affix-wrapper .ant-input-suffix {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  z-index: 2;
  line-height: 0;
  color: rgba(0, 0, 0, 0.65);
}
.ant-input-affix-wrapper .ant-input-prefix {
  left: 7px;
}
.ant-input-affix-wrapper .ant-input-suffix {
  right: 7px;
}
.ant-input-affix-wrapper .ant-input:not(:first-child) {
  padding-left: 24px;
}
.ant-input-affix-wrapper .ant-input:not(:last-child) {
  padding-right: 24px;
}
.ant-input-affix-wrapper .ant-input {
  min-height: 100%;
}
`
                ]
            },] },
];
/**
 * @nocollapse
 */
NzInputDirectiveComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
];
NzInputDirectiveComponent.propDecorators = {
    '_disabled': [{ type: HostBinding, args: [`class.ant-input-disabled`,] },],
    'nzSize': [{ type: Input },],
    'nzDisabled': [{ type: Input },],
    'nzReadonly': [{ type: Input },],
    'nzAutosize': [{ type: Input },],
    '_nzInput': [{ type: HostBinding, args: [`class.ant-input`,] },],
    'setLgClass': [{ type: HostBinding, args: [`class.ant-input-lg`,] },],
    'setSmClass': [{ type: HostBinding, args: [`class.ant-input-sm`,] },],
};

class NzInputGroupComponent {
    /**
     * @param {?} _elementRef
     * @param {?} _render
     */
    constructor(_elementRef, _render) {
        this._elementRef = _elementRef;
        this._render = _render;
        this._prefixCls = 'ant-input';
        this.nzCompact = false;
        this._el = this._elementRef.nativeElement;
        this._render.addClass(this._el, `${this._prefixCls}-group`);
    }
    /**
     * @return {?}
     */
    get _isLarge() {
        return this.nzSize === 'lg';
    }
    ;
    /**
     * @return {?}
     */
    get _isSmall() {
        return this.nzSize === 'sm';
    }
    ;
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
NzInputGroupComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-input-group',
                encapsulation: ViewEncapsulation.None,
                template: `
    <ng-content></ng-content>
  `,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-input-search-icon {
  cursor: pointer;
  transition: all .3s;
  font-size: 14px;
}
.ant-input-search-icon:hover {
  color: #3FCE9E;
}
.ant-search-input-wrapper {
  display: inline-block;
  vertical-align: middle;
}
.ant-search-input.ant-input-group .ant-input:first-child,
.ant-search-input.ant-input-group .ant-select:first-child {
  border-radius: 4px;
  position: absolute;
  top: -1px;
  width: 100%;
}
.ant-search-input.ant-input-group .ant-input:first-child {
  padding-right: 36px;
}
.ant-search-input .ant-search-btn {
  color: rgba(0, 0, 0, 0.65);
  background-color: #fff;
  border-color: #d9d9d9;
  border-radius: 0 3px 3px 0;
  left: -1px;
  position: relative;
  border-width: 0 0 0 1px;
  z-index: 2;
  padding-left: 8px;
  padding-right: 8px;
}
.ant-search-input .ant-search-btn > a:only-child {
  color: currentColor;
}
.ant-search-input .ant-search-btn > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-search-input .ant-search-btn:hover,
.ant-search-input .ant-search-btn:focus {
  color: #3FCE9E;
  background-color: #fff;
  border-color: #3FCE9E;
}
.ant-search-input .ant-search-btn:hover > a:only-child,
.ant-search-input .ant-search-btn:focus > a:only-child {
  color: currentColor;
}
.ant-search-input .ant-search-btn:hover > a:only-child:after,
.ant-search-input .ant-search-btn:focus > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-search-input .ant-search-btn:active,
.ant-search-input .ant-search-btn.active {
  color: #36b38c;
  background-color: #fff;
  border-color: #36b38c;
}
.ant-search-input .ant-search-btn:active > a:only-child,
.ant-search-input .ant-search-btn.active > a:only-child {
  color: currentColor;
}
.ant-search-input .ant-search-btn:active > a:only-child:after,
.ant-search-input .ant-search-btn.active > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-search-input .ant-search-btn.disabled,
.ant-search-input .ant-search-btn[disabled],
.ant-search-input .ant-search-btn.disabled:hover,
.ant-search-input .ant-search-btn[disabled]:hover,
.ant-search-input .ant-search-btn.disabled:focus,
.ant-search-input .ant-search-btn[disabled]:focus,
.ant-search-input .ant-search-btn.disabled:active,
.ant-search-input .ant-search-btn[disabled]:active,
.ant-search-input .ant-search-btn.disabled.active,
.ant-search-input .ant-search-btn[disabled].active {
  color: rgba(0, 0, 0, 0.25);
  background-color: #f7f7f7;
  border-color: #d9d9d9;
}
.ant-search-input .ant-search-btn.disabled > a:only-child,
.ant-search-input .ant-search-btn[disabled] > a:only-child,
.ant-search-input .ant-search-btn.disabled:hover > a:only-child,
.ant-search-input .ant-search-btn[disabled]:hover > a:only-child,
.ant-search-input .ant-search-btn.disabled:focus > a:only-child,
.ant-search-input .ant-search-btn[disabled]:focus > a:only-child,
.ant-search-input .ant-search-btn.disabled:active > a:only-child,
.ant-search-input .ant-search-btn[disabled]:active > a:only-child,
.ant-search-input .ant-search-btn.disabled.active > a:only-child,
.ant-search-input .ant-search-btn[disabled].active > a:only-child {
  color: currentColor;
}
.ant-search-input .ant-search-btn.disabled > a:only-child:after,
.ant-search-input .ant-search-btn[disabled] > a:only-child:after,
.ant-search-input .ant-search-btn.disabled:hover > a:only-child:after,
.ant-search-input .ant-search-btn[disabled]:hover > a:only-child:after,
.ant-search-input .ant-search-btn.disabled:focus > a:only-child:after,
.ant-search-input .ant-search-btn[disabled]:focus > a:only-child:after,
.ant-search-input .ant-search-btn.disabled:active > a:only-child:after,
.ant-search-input .ant-search-btn[disabled]:active > a:only-child:after,
.ant-search-input .ant-search-btn.disabled.active > a:only-child:after,
.ant-search-input .ant-search-btn[disabled].active > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-search-input .ant-search-btn:hover,
.ant-search-input .ant-search-btn:focus,
.ant-search-input .ant-search-btn:active,
.ant-search-input .ant-search-btn.active {
  background: #fff;
}
.ant-search-input .ant-search-btn:hover {
  border-color: #d9d9d9;
}
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty,
.ant-search-input:hover .ant-search-btn-noempty {
  color: #fff;
  background-color: #3FCE9E;
  border-color: #3FCE9E;
}
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty > a:only-child {
  color: currentColor;
}
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty:hover,
.ant-search-input:hover .ant-search-btn-noempty:hover,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty:focus,
.ant-search-input:hover .ant-search-btn-noempty:focus {
  color: #fff;
  background-color: #6ddab5;
  border-color: #6ddab5;
}
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty:hover > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty:hover > a:only-child,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty:focus > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty:focus > a:only-child {
  color: currentColor;
}
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty:hover > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty:hover > a:only-child:after,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty:focus > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty:focus > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty:active,
.ant-search-input:hover .ant-search-btn-noempty:active,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.active,
.ant-search-input:hover .ant-search-btn-noempty.active {
  color: #fff;
  background-color: #36b38c;
  border-color: #36b38c;
}
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty:active > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty:active > a:only-child,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.active > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty.active > a:only-child {
  color: currentColor;
}
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty:active > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty:active > a:only-child:after,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.active > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty.active > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled,
.ant-search-input:hover .ant-search-btn-noempty.disabled,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled],
.ant-search-input:hover .ant-search-btn-noempty[disabled],
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled:hover,
.ant-search-input:hover .ant-search-btn-noempty.disabled:hover,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled]:hover,
.ant-search-input:hover .ant-search-btn-noempty[disabled]:hover,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled:focus,
.ant-search-input:hover .ant-search-btn-noempty.disabled:focus,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled]:focus,
.ant-search-input:hover .ant-search-btn-noempty[disabled]:focus,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled:active,
.ant-search-input:hover .ant-search-btn-noempty.disabled:active,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled]:active,
.ant-search-input:hover .ant-search-btn-noempty[disabled]:active,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled.active,
.ant-search-input:hover .ant-search-btn-noempty.disabled.active,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled].active,
.ant-search-input:hover .ant-search-btn-noempty[disabled].active {
  color: rgba(0, 0, 0, 0.25);
  background-color: #f7f7f7;
  border-color: #d9d9d9;
}
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty.disabled > a:only-child,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled] > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty[disabled] > a:only-child,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled:hover > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty.disabled:hover > a:only-child,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled]:hover > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty[disabled]:hover > a:only-child,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled:focus > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty.disabled:focus > a:only-child,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled]:focus > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty[disabled]:focus > a:only-child,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled:active > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty.disabled:active > a:only-child,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled]:active > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty[disabled]:active > a:only-child,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled.active > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty.disabled.active > a:only-child,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled].active > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty[disabled].active > a:only-child {
  color: currentColor;
}
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty.disabled > a:only-child:after,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled] > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty[disabled] > a:only-child:after,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled:hover > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty.disabled:hover > a:only-child:after,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled]:hover > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty[disabled]:hover > a:only-child:after,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled:focus > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty.disabled:focus > a:only-child:after,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled]:focus > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty[disabled]:focus > a:only-child:after,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled:active > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty.disabled:active > a:only-child:after,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled]:active > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty[disabled]:active > a:only-child:after,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled.active > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty.disabled.active > a:only-child:after,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled].active > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty[disabled].active > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-search-input .ant-select-combobox .ant-select-selection__rendered {
  margin-right: 29px;
}
.ant-input {
  position: relative;
  display: inline-block;
  padding: 4px 7px;
  width: 100%;
  height: 28px;
  cursor: text;
  font-size: 12px;
  line-height: 1.5;
  color: rgba(0, 0, 0, 0.65);
  background-color: #fff;
  background-image: none;
  border: 1px solid #d9d9d9;
  border-radius: 4px;
  transition: all .3s;
}
.ant-input::-moz-placeholder {
  color: rgba(0, 0, 0, 0.25);
  opacity: 1;
}
.ant-input:-ms-input-placeholder {
  color: rgba(0, 0, 0, 0.25);
}
.ant-input::-webkit-input-placeholder {
  color: rgba(0, 0, 0, 0.25);
}
.ant-input:hover {
  border-color: #6ddab5;
}
.ant-input:focus {
  border-color: #6ddab5;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(63, 206, 158, 0.2);
}
.ant-input-disabled {
  background-color: #f7f7f7;
  opacity: 1;
  cursor: not-allowed;
  color: rgba(0, 0, 0, 0.25);
}
.ant-input-disabled:hover {
  border-color: #e2e2e2;
}
textarea.ant-input {
  max-width: 100%;
  height: auto;
  vertical-align: bottom;
}
.ant-input-lg {
  padding: 6px 7px;
  height: 32px;
}
.ant-input-sm {
  padding: 1px 7px;
  height: 22px;
}
.ant-input-group {
  position: relative;
  display: table;
  border-collapse: separate;
  border-spacing: 0;
  width: 100%;
}
.ant-input-group[class*="col-"] {
  float: none;
  padding-left: 0;
  padding-right: 0;
}
.ant-input-group > [class*="col-"] {
  padding-right: 8px;
}
.ant-input-group > [class*="col-"]:last-child {
  padding-right: 0;
}
.ant-input-group-addon,
.ant-input-group-wrap,
.ant-input-group > .ant-input {
  display: table-cell;
}
.ant-input-group-addon:not(:first-child):not(:last-child),
.ant-input-group-wrap:not(:first-child):not(:last-child),
.ant-input-group > .ant-input:not(:first-child):not(:last-child) {
  border-radius: 0;
}
.ant-input-group-addon,
.ant-input-group-wrap {
  width: 1px;
  white-space: nowrap;
  vertical-align: middle;
}
.ant-input-group-wrap > * {
  display: block !important;
}
.ant-input-group .ant-input {
  float: left;
  width: 100%;
  margin-bottom: 0;
}
.ant-input-group .ant-input:focus {
  z-index: 1;
}
.ant-input-group-addon {
  padding: 4px 7px;
  font-size: 12px;
  font-weight: normal;
  line-height: 1;
  color: rgba(0, 0, 0, 0.65);
  text-align: center;
  background-color: #eee;
  border: 1px solid #d9d9d9;
  border-radius: 4px;
  position: relative;
  transition: all .3s;
}
.ant-input-group-addon .ant-select {
  margin: -5px -7px;
}
.ant-input-group-addon .ant-select .ant-select-selection {
  background-color: inherit;
  margin: -1px;
  border: 1px solid transparent;
  box-shadow: none;
}
.ant-input-group-addon .ant-select-open .ant-select-selection,
.ant-input-group-addon .ant-select-focused .ant-select-selection {
  color: #3FCE9E;
}
.ant-input-group-addon > i:only-child:after {
  position: absolute;
  content: '';
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
}
.ant-input-group > .ant-input:first-child,
.ant-input-group-addon:first-child {
  border-bottom-right-radius: 0;
  border-top-right-radius: 0;
}
.ant-input-group > .ant-input:first-child .ant-select .ant-select-selection,
.ant-input-group-addon:first-child .ant-select .ant-select-selection {
  border-bottom-right-radius: 0;
  border-top-right-radius: 0;
}
.ant-input-group > .ant-input-affix-wrapper:not(:first-child) .ant-input {
  border-bottom-left-radius: 0;
  border-top-left-radius: 0;
}
.ant-input-group > .ant-input-affix-wrapper:not(:last-child) .ant-input {
  border-bottom-right-radius: 0;
  border-top-right-radius: 0;
}
.ant-input-group-addon:first-child {
  border-right: 0;
}
.ant-input-group-addon:last-child {
  border-left: 0;
}
.ant-input-group > .ant-input:last-child,
.ant-input-group-addon:last-child {
  border-bottom-left-radius: 0;
  border-top-left-radius: 0;
}
.ant-input-group > .ant-input:last-child .ant-select .ant-select-selection,
.ant-input-group-addon:last-child .ant-select .ant-select-selection {
  border-bottom-left-radius: 0;
  border-top-left-radius: 0;
}
.ant-input-group-lg .ant-input,
.ant-input-group-lg > .ant-input-group-addon {
  padding: 6px 7px;
  height: 32px;
}
.ant-input-group-sm .ant-input,
.ant-input-group-sm > .ant-input-group-addon {
  padding: 1px 7px;
  height: 22px;
}
.ant-input-group-lg .ant-select-selection--single {
  height: 32px;
}
.ant-input-group-sm .ant-select-selection--single {
  height: 22px;
}
.ant-input-group .ant-input-affix-wrapper {
  display: table-cell;
  width: 100%;
  float: left;
}
.ant-input-group.ant-input-group-compact > * {
  border-radius: 0;
  border-right-width: 0;
  vertical-align: middle;
  float: none;
  display: inline-block;
}
.ant-input-group.ant-input-group-compact .ant-input {
  float: none;
  z-index: auto;
}
.ant-input-group.ant-input-group-compact > .ant-select > .ant-select-selection,
.ant-input-group.ant-input-group-compact > .ant-calendar-picker .ant-input,
.ant-input-group.ant-input-group-compact > .ant-select-auto-complete .ant-input,
.ant-input-group.ant-input-group-compact > .ant-cascader-picker .ant-input,
.ant-input-group.ant-input-group-compact > .ant-mention-wrapper .ant-mention-editor,
.ant-input-group.ant-input-group-compact > .ant-time-picker .ant-time-picker-input {
  border-radius: 0;
  border-right-width: 0;
}
.ant-input-group.ant-input-group-compact > *:first-child,
.ant-input-group.ant-input-group-compact > .ant-select:first-child > .ant-select-selection,
.ant-input-group.ant-input-group-compact > .ant-calendar-picker:first-child .ant-input,
.ant-input-group.ant-input-group-compact > .ant-select-auto-complete:first-child .ant-input,
.ant-input-group.ant-input-group-compact > .ant-cascader-picker:first-child .ant-input,
.ant-input-group.ant-input-group-compact > .ant-mention-wrapper:first-child .ant-mention-editor,
.ant-input-group.ant-input-group-compact > .ant-time-picker:first-child .ant-time-picker-input {
  border-top-left-radius: 4px;
  border-bottom-left-radius: 4px;
}
.ant-input-group.ant-input-group-compact > *:last-child,
.ant-input-group.ant-input-group-compact > .ant-select:last-child > .ant-select-selection,
.ant-input-group.ant-input-group-compact > .ant-calendar-picker:last-child .ant-input,
.ant-input-group.ant-input-group-compact > .ant-select-auto-complete:last-child .ant-input,
.ant-input-group.ant-input-group-compact > .ant-cascader-picker:last-child .ant-input,
.ant-input-group.ant-input-group-compact > .ant-mention-wrapper:last-child .ant-mention-editor,
.ant-input-group.ant-input-group-compact > .ant-time-picker:last-child .ant-time-picker-input {
  border-top-right-radius: 4px;
  border-bottom-right-radius: 4px;
  border-right-width: 1px;
}
.ant-input-group-wrapper {
  display: inline-block;
  vertical-align: top;
}
.ant-input-affix-wrapper {
  position: relative;
  display: inline-block;
  width: 100%;
}
.ant-input-affix-wrapper .ant-input {
  z-index: 1;
}
.ant-input-affix-wrapper:hover .ant-input:not(.ant-input-disabled) {
  border-color: #6ddab5;
}
.ant-input-affix-wrapper .ant-input-prefix,
.ant-input-affix-wrapper .ant-input-suffix {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  z-index: 2;
  line-height: 0;
  color: rgba(0, 0, 0, 0.65);
}
.ant-input-affix-wrapper .ant-input-prefix {
  left: 7px;
}
.ant-input-affix-wrapper .ant-input-suffix {
  right: 7px;
}
.ant-input-affix-wrapper .ant-input:not(:first-child) {
  padding-left: 24px;
}
.ant-input-affix-wrapper .ant-input:not(:last-child) {
  padding-right: 24px;
}
.ant-input-affix-wrapper .ant-input {
  min-height: 100%;
}
`
                ]
            },] },
];
/**
 * @nocollapse
 */
NzInputGroupComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
];
NzInputGroupComponent.propDecorators = {
    '_isLarge': [{ type: HostBinding, args: [`class.ant-input-group-lg`,] },],
    '_isSmall': [{ type: HostBinding, args: [`class.ant-input-group-sm`,] },],
    'nzSize': [{ type: Input },],
    'nzCompact': [{ type: Input }, { type: HostBinding, args: [`class.ant-input-group-compact`,] },],
};

class NzInputModule {
}
NzInputModule.decorators = [
    { type: NgModule, args: [{
                declarations: [NzInputComponent, NzInputGroupComponent, NzInputDirectiveComponent],
                exports: [NzInputComponent, NzInputGroupComponent, NzInputDirectiveComponent],
                imports: [CommonModule, FormsModule]
            },] },
];
/**
 * @nocollapse
 */
NzInputModule.ctorParameters = () => [];

class NzCascaderModule {
}
NzCascaderModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, FormsModule, OverlayModule, NzInputModule],
                declarations: [
                    NzCascaderComponent
                ],
                exports: [
                    NzCascaderComponent
                ]
            },] },
];
/**
 * @nocollapse
 */
NzCascaderModule.ctorParameters = () => [];

class NzCheckboxComponent {
    /**
     * @param {?} _elementRef
     * @param {?} _render
     */
    constructor(_elementRef, _render) {
        this._elementRef = _elementRef;
        this._render = _render;
        this._prefixCls = 'ant-checkbox';
        this._innerPrefixCls = `${this._prefixCls}-inner`;
        this._inputPrefixCls = `${this._prefixCls}-input`;
        this._checked = false;
        this._focused = false;
        // ngModel Access
        this.onChange = Function.prototype;
        this.onTouched = Function.prototype;
        this.nzDisabled = false;
        this.nzIndeterminate = false;
        this._el = this._elementRef.nativeElement;
    }
    /**
     * @return {?}
     */
    get nzChecked() {
        return this._checked;
    }
    ;
    /**
     * @param {?} e
     * @return {?}
     */
    onClick(e) {
        e.preventDefault();
        if (!this.nzDisabled) {
            this.updateValue(!this._checked);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    updateValue(value) {
        if (value === this._checked) {
            return;
        }
        this.onChange(value);
        this._checked = value;
    }
    /**
     * @return {?}
     */
    nzFocus() {
        this._focused = true;
    }
    /**
     * @return {?}
     */
    nzBlur() {
        this._focused = false;
    }
    /**
     * @return {?}
     */
    get _classMap() {
        return {
            [this._prefixCls]: true,
            [`${this._prefixCls}-checked`]: this._checked && (!this.nzIndeterminate),
            [`${this._prefixCls}-focused`]: this._focused,
            [`${this._prefixCls}-disabled`]: this.nzDisabled,
            [`${this._prefixCls}-indeterminate`]: this.nzIndeterminate,
        };
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this._checked = value;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.nzDisabled = isDisabled;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._render.addClass(this._el, `${this._prefixCls}-wrapper`);
    }
}
NzCheckboxComponent.decorators = [
    { type: Component, args: [{
                selector: '[nz-checkbox]',
                encapsulation: ViewEncapsulation.None,
                template: `
    <span [ngClass]="_classMap">
      <span [ngClass]="_innerPrefixCls"></span>
      <input type="checkbox"
        [ngClass]="_inputPrefixCls"
        [ngModel]="nzChecked"
        (focus)="nzFocus()"
        (blur)="onTouched();nzBlur()">
    </span>
    <ng-content></ng-content>
  `,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => NzCheckboxComponent),
                        multi: true
                    }
                ],
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
@keyframes antCheckboxEffect {
  0% {
    transform: scale(1);
    opacity: 0.5;
  }
  100% {
    transform: scale(1.6);
    opacity: 0;
  }
}
.ant-checkbox {
  white-space: nowrap;
  cursor: pointer;
  outline: none;
  display: inline-block;
  line-height: 1;
  position: relative;
  vertical-align: text-bottom;
}
.ant-checkbox-wrapper:hover .ant-checkbox-inner,
.ant-checkbox:hover .ant-checkbox-inner,
.ant-checkbox-input:focus + .ant-checkbox-inner {
  border-color: #3FCE9E;
}
.ant-checkbox-checked:after {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  border-radius: 2px;
  border: 1px solid #3FCE9E;
  content: '';
  animation: antCheckboxEffect 0.36s ease-in-out;
  animation-fill-mode: both;
  visibility: hidden;
}
.ant-checkbox:hover:after,
.ant-checkbox-wrapper:hover .ant-checkbox:after {
  visibility: visible;
}
.ant-checkbox-inner {
  position: relative;
  top: 0;
  left: 0;
  display: block;
  width: 14px;
  height: 14px;
  border: 1px solid #d9d9d9;
  border-radius: 2px;
  background-color: #fff;
  transition: all .3s;
}
.ant-checkbox-inner:after {
  transform: rotate(45deg) scale(0);
  position: absolute;
  left: 4px;
  top: 1px;
  display: table;
  width: 5px;
  height: 8px;
  border: 2px solid #fff;
  border-top: 0;
  border-left: 0;
  content: ' ';
  transition: all 0.1s cubic-bezier(0.71, -0.46, 0.88, 0.6);
}
.ant-checkbox-input {
  position: absolute;
  left: 0;
  z-index: 1;
  cursor: pointer;
  opacity: 0;
  filter: alpha(opacity=0);
  top: 0;
  bottom: 0;
  right: 0;
  width: 100%;
  height: 100%;
}
.ant-checkbox-indeterminate .ant-checkbox-inner:after {
  content: ' ';
  transform: scale(1);
  position: absolute;
  left: 2px;
  top: 5px;
  width: 8px;
  height: 1px;
}
.ant-checkbox-indeterminate.ant-checkbox-disabled .ant-checkbox-inner:after {
  border-color: rgba(0, 0, 0, 0.25);
}
.ant-checkbox-checked .ant-checkbox-inner:after {
  transform: rotate(45deg) scale(1);
  position: absolute;
  left: 4px;
  top: 1px;
  display: table;
  width: 5px;
  height: 8px;
  border: 2px solid #fff;
  border-top: 0;
  border-left: 0;
  content: ' ';
  transition: all 0.2s cubic-bezier(0.12, 0.4, 0.29, 1.46) 0.1s;
}
.ant-checkbox-checked .ant-checkbox-inner,
.ant-checkbox-indeterminate .ant-checkbox-inner {
  background-color: #3FCE9E;
  border-color: #3FCE9E;
}
.ant-checkbox-disabled {
  cursor: not-allowed;
}
.ant-checkbox-disabled.ant-checkbox-checked .ant-checkbox-inner:after {
  animation-name: none;
  border-color: rgba(0, 0, 0, 0.25);
}
.ant-checkbox-disabled .ant-checkbox-input {
  cursor: not-allowed;
}
.ant-checkbox-disabled .ant-checkbox-inner {
  border-color: #d9d9d9 !important;
  background-color: #f7f7f7;
}
.ant-checkbox-disabled .ant-checkbox-inner:after {
  animation-name: none;
  border-color: #f7f7f7;
}
.ant-checkbox-disabled + span {
  color: rgba(0, 0, 0, 0.25);
  cursor: not-allowed;
}
.ant-checkbox-wrapper {
  cursor: pointer;
  font-size: 12px;
  display: inline-block;
}
.ant-checkbox-wrapper:not(:last-child) {
  margin-right: 8px;
}
.ant-checkbox-wrapper + span,
.ant-checkbox + span {
  padding-left: 8px;
  padding-right: 8px;
}
.ant-checkbox-group {
  font-size: 12px;
}
.ant-checkbox-group-item {
  display: inline-block;
}
@media \0screen {
  .ant-checkbox-checked .ant-checkbox-inner:before,
  .ant-checkbox-checked .ant-checkbox-inner:after {
    font-family: 'anticon';
    text-rendering: optimizeLegibility;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    content: "\\e632";
    font-weight: bold;
    font-size: 8px;
    border: 0;
    color: #fff;
    left: 2px;
    top: 3px;
    position: absolute;
  }
}
`
                ]
            },] },
];
/**
 * @nocollapse
 */
NzCheckboxComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
];
NzCheckboxComponent.propDecorators = {
    'nzDisabled': [{ type: Input },],
    'nzIndeterminate': [{ type: Input },],
    'nzChecked': [{ type: Input },],
    'onClick': [{ type: HostListener, args: ['click', ['$event'],] },],
};

class NzCheckboxGroupComponent {
    /**
     * @param {?} _elementRef
     * @param {?} _render
     */
    constructor(_elementRef, _render) {
        this._elementRef = _elementRef;
        this._render = _render;
        this._prefixCls = 'ant-checkbox-group';
        // ngModel Access
        this.onChange = Function.prototype;
        this.onTouched = Function.prototype;
        this.nzDisabled = false;
        this._el = this._elementRef.nativeElement;
        this._render.setElementClass(this._el, `${this._prefixCls}`, true);
    }
    /**
     * @return {?}
     */
    _optionChange() {
        this.onChange(this._options);
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this._options = value;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.nzDisabled = isDisabled;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
NzCheckboxGroupComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-checkbox-group',
                encapsulation: ViewEncapsulation.None,
                template: `
    <label
      [class.ant-checkbox-vertical]="nzType=='vertical'"
      nz-checkbox
      *ngFor="let option of _options"
      [nzDisabled]="option.disabled||nzDisabled"
      [(ngModel)]="option.checked"
      (ngModelChange)="_optionChange()">
      <span>{{option.label}}</span>
    </label>`,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => NzCheckboxGroupComponent),
                        multi: true
                    }
                ],
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
@keyframes antCheckboxEffect {
  0% {
    transform: scale(1);
    opacity: 0.5;
  }
  100% {
    transform: scale(1.6);
    opacity: 0;
  }
}
.ant-checkbox {
  white-space: nowrap;
  cursor: pointer;
  outline: none;
  display: inline-block;
  line-height: 1;
  position: relative;
  vertical-align: text-bottom;
}
.ant-checkbox-wrapper:hover .ant-checkbox-inner,
.ant-checkbox:hover .ant-checkbox-inner,
.ant-checkbox-input:focus + .ant-checkbox-inner {
  border-color: #3FCE9E;
}
.ant-checkbox-checked:after {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  border-radius: 2px;
  border: 1px solid #3FCE9E;
  content: '';
  animation: antCheckboxEffect 0.36s ease-in-out;
  animation-fill-mode: both;
  visibility: hidden;
}
.ant-checkbox:hover:after,
.ant-checkbox-wrapper:hover .ant-checkbox:after {
  visibility: visible;
}
.ant-checkbox-inner {
  position: relative;
  top: 0;
  left: 0;
  display: block;
  width: 14px;
  height: 14px;
  border: 1px solid #d9d9d9;
  border-radius: 2px;
  background-color: #fff;
  transition: all .3s;
}
.ant-checkbox-inner:after {
  transform: rotate(45deg) scale(0);
  position: absolute;
  left: 4px;
  top: 1px;
  display: table;
  width: 5px;
  height: 8px;
  border: 2px solid #fff;
  border-top: 0;
  border-left: 0;
  content: ' ';
  transition: all 0.1s cubic-bezier(0.71, -0.46, 0.88, 0.6);
}
.ant-checkbox-input {
  position: absolute;
  left: 0;
  z-index: 1;
  cursor: pointer;
  opacity: 0;
  filter: alpha(opacity=0);
  top: 0;
  bottom: 0;
  right: 0;
  width: 100%;
  height: 100%;
}
.ant-checkbox-indeterminate .ant-checkbox-inner:after {
  content: ' ';
  transform: scale(1);
  position: absolute;
  left: 2px;
  top: 5px;
  width: 8px;
  height: 1px;
}
.ant-checkbox-indeterminate.ant-checkbox-disabled .ant-checkbox-inner:after {
  border-color: rgba(0, 0, 0, 0.25);
}
.ant-checkbox-checked .ant-checkbox-inner:after {
  transform: rotate(45deg) scale(1);
  position: absolute;
  left: 4px;
  top: 1px;
  display: table;
  width: 5px;
  height: 8px;
  border: 2px solid #fff;
  border-top: 0;
  border-left: 0;
  content: ' ';
  transition: all 0.2s cubic-bezier(0.12, 0.4, 0.29, 1.46) 0.1s;
}
.ant-checkbox-checked .ant-checkbox-inner,
.ant-checkbox-indeterminate .ant-checkbox-inner {
  background-color: #3FCE9E;
  border-color: #3FCE9E;
}
.ant-checkbox-disabled {
  cursor: not-allowed;
}
.ant-checkbox-disabled.ant-checkbox-checked .ant-checkbox-inner:after {
  animation-name: none;
  border-color: rgba(0, 0, 0, 0.25);
}
.ant-checkbox-disabled .ant-checkbox-input {
  cursor: not-allowed;
}
.ant-checkbox-disabled .ant-checkbox-inner {
  border-color: #d9d9d9 !important;
  background-color: #f7f7f7;
}
.ant-checkbox-disabled .ant-checkbox-inner:after {
  animation-name: none;
  border-color: #f7f7f7;
}
.ant-checkbox-disabled + span {
  color: rgba(0, 0, 0, 0.25);
  cursor: not-allowed;
}
.ant-checkbox-wrapper {
  cursor: pointer;
  font-size: 12px;
  display: inline-block;
}
.ant-checkbox-wrapper:not(:last-child) {
  margin-right: 8px;
}
.ant-checkbox-wrapper + span,
.ant-checkbox + span {
  padding-left: 8px;
  padding-right: 8px;
}
.ant-checkbox-group {
  font-size: 12px;
}
.ant-checkbox-group-item {
  display: inline-block;
}
@media \0screen {
  .ant-checkbox-checked .ant-checkbox-inner:before,
  .ant-checkbox-checked .ant-checkbox-inner:after {
    font-family: 'anticon';
    text-rendering: optimizeLegibility;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    content: "\\e632";
    font-weight: bold;
    font-size: 8px;
    border: 0;
    color: #fff;
    left: 2px;
    top: 3px;
    position: absolute;
  }
}
`
                ]
            },] },
];
/**
 * @nocollapse
 */
NzCheckboxGroupComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer, },
];
NzCheckboxGroupComponent.propDecorators = {
    'nzDisabled': [{ type: Input },],
    'nzType': [{ type: Input },],
};

class NzCheckboxModule {
}
NzCheckboxModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, FormsModule],
                declarations: [
                    NzCheckboxComponent,
                    NzCheckboxGroupComponent
                ],
                exports: [
                    NzCheckboxComponent,
                    NzCheckboxGroupComponent
                ]
            },] },
];
/**
 * @nocollapse
 */
NzCheckboxModule.ctorParameters = () => [];

class NzTimePickerInnerComponent {
    /**
     * @param {?} _cdr
     */
    constructor(_cdr) {
        this._cdr = _cdr;
        this._now = new Date();
        this._open = false;
        this._hourList = [];
        this._minuteList = [];
        this._secondList = [];
        this._value = null;
        this._selectedHour = moment(this._now).hours();
        this._selectedMinute = moment(this._now).minutes();
        this._selectedSecond = moment(this._now).seconds();
        this._format = 'HH:mm:ss';
        this._showHour = this._format.indexOf('HH') > -1;
        this._showMinute = this._format.indexOf('mm') > -1;
        this._showSecond = this._format.indexOf('ss') > -1;
        this._width = (+this._showHour + +this._showMinute + +this._showSecond) * 56 + 1 + 'px';
        this._hideDisabledOptions = false;
        // ngModel Access
        this.onChange = Function.prototype;
        this.onTouched = Function.prototype;
        this.nzPlaceHolder = '请选择时间';
        this.nzSize = 'default';
        this.nzDisabled = false;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzHideDisabledOptions(value) {
        if (value === '') {
            this._hideDisabledOptions = true;
        }
        else {
            this._hideDisabledOptions = (value);
        }
    }
    /**
     * @return {?}
     */
    get nzHideDisabledOptions() {
        return this._hideDisabledOptions;
    }
    /**
     * @return {?}
     */
    get nzFormat() {
        return this._format;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzFormat(value) {
        this._format = value;
        this._showHour = this._format.indexOf('HH') > -1;
        this._showMinute = this._format.indexOf('mm') > -1;
        this._showSecond = this._format.indexOf('ss') > -1;
        this._width = (+this._showHour + +this._showMinute + +this._showSecond) * 56 + 1 + 'px';
    }
    /**
     * @return {?}
     */
    get nzValue() {
        return this._value || this._now;
    }
    ;
    /**
     * @param {?} value
     * @return {?}
     */
    set nzValue(value) {
        if (this._value === value) {
            return;
        }
        this._value = value;
        this._selectedHour = moment(this.nzValue).hours();
        this._selectedMinute = moment(this.nzValue).minutes();
        this._selectedSecond = moment(this.nzValue).seconds();
    }
    ;
    /**
     * @param {?} instance
     * @param {?} index
     * @param {?=} duration
     * @param {?=} unit
     * @return {?}
     */
    _scrollToSelected(instance, index, duration = 0, unit) {
        const /** @type {?} */ _transIndex = this._translateIndex(index, unit);
        const /** @type {?} */ currentOption = instance.children[0].children[_transIndex] || instance.children[0].children[0];
        this.scrollTo(instance, currentOption.offsetTop, duration);
    }
    /**
     * @param {?} element
     * @param {?} to
     * @param {?} duration
     * @return {?}
     */
    scrollTo(element, to, duration) {
        const /** @type {?} */ requestAnimationFrame = window.requestAnimationFrame || function requestAnimationFrameTimeout() {
            return setTimeout(arguments[0], 10);
        };
        if (duration <= 0) {
            element.scrollTop = to;
            return;
        }
        const /** @type {?} */ difference = to - element.scrollTop;
        const /** @type {?} */ perTick = difference / duration * 10;
        requestAnimationFrame(() => {
            element.scrollTop = element.scrollTop + perTick;
            if (element.scrollTop === to) {
                return;
            }
            this.scrollTo(element, to, duration - 10);
        });
    }
    ;
    /**
     * @param {?} instance
     * @param {?} index
     * @param {?} disabled
     * @return {?}
     */
    _selectHour(instance, index, disabled) {
        if (disabled) {
            return;
        }
        this._scrollToSelected(instance, index, 120, 'hour');
        this._selectedHour = index;
        this.nzValue = moment(this.nzValue).hour(index).toDate();
        this.onChange(this._value);
        this._buildMinutes();
        this._buildSeconds();
    }
    /**
     * @param {?} instance
     * @param {?} index
     * @param {?} disabled
     * @return {?}
     */
    _selectMinute(instance, index, disabled) {
        if (disabled) {
            return;
        }
        this._scrollToSelected(instance, index, 120, 'minute');
        this._selectedMinute = index;
        this.nzValue = moment(this.nzValue).minute(index).toDate();
        this.onChange(this._value);
        this._buildSeconds();
    }
    /**
     * @param {?} instance
     * @param {?} index
     * @param {?} disabled
     * @return {?}
     */
    _selectSecond(instance, index, disabled) {
        if (disabled) {
            return;
        }
        this._scrollToSelected(instance, index, 120, 'second');
        this._selectedSecond = index;
        this.nzValue = moment(this.nzValue).second(index).toDate();
        this.onChange(this._value);
    }
    /**
     * @param {?} index
     * @param {?} unit
     * @return {?}
     */
    _translateIndex(index, unit) {
        if (!this.nzHideDisabledOptions) {
            return index;
        }
        if (unit === 'hour') {
            const /** @type {?} */ disabledHours = this.nzDisabledHours && this.nzDisabledHours();
            return this._calcIndex(disabledHours, index);
        }
        else if (unit === 'minute') {
            const /** @type {?} */ disabledMinutes = this.nzDisabledMinutes && this.nzDisabledMinutes(this._selectedHour);
            return this._calcIndex(disabledMinutes, index);
        }
        else if (unit === 'second') {
            const /** @type {?} */ disabledSeconds = this.nzDisabledSeconds && this.nzDisabledSeconds(this._selectedHour, this._selectedMinute);
            return this._calcIndex(disabledSeconds, index);
        }
    }
    /**
     * @param {?} array
     * @param {?} index
     * @return {?}
     */
    _calcIndex(array, index) {
        if (array && array.length) {
            return index - array.reduce((pre, value) => {
                return pre + (value < index ? 1 : 0);
            }, 0);
        }
        else {
            return index;
        }
    }
    /**
     * @return {?}
     */
    _initPosition() {
        this._selectedHour = moment(this.nzValue).hours();
        this._selectedMinute = moment(this.nzValue).minutes();
        this._selectedSecond = moment(this.nzValue).seconds();
        if (this._showHour) {
            this._scrollToSelected(this._hourListInstance.nativeElement, this._selectedHour, 0, 'hour');
        }
        if (this._showMinute) {
            this._scrollToSelected(this._minuteListInstance.nativeElement, this._selectedMinute, 0, 'minute');
        }
        if (this._showSecond) {
            this._scrollToSelected(this._secondListInstance.nativeElement, this._selectedSecond, 0, 'second');
        }
    }
    /**
     * @return {?}
     */
    _buildTime() {
        this._buildHours();
        this._buildMinutes();
        this._buildSeconds();
    }
    /**
     * @return {?}
     */
    _buildHours() {
        this._hourList = [];
        for (let /** @type {?} */ i = 0; i <= 23; i++) {
            this._hourList.push({
                disabled: this.nzDisabledHours && (this.nzDisabledHours().indexOf(i) !== -1),
                name: i.toString().length === 1 ? ('0' + i) : ('' + i),
                index: i
            });
        }
    }
    /**
     * @return {?}
     */
    _buildMinutes() {
        this._minuteList = [];
        for (let /** @type {?} */ i = 0; i <= 59; i++) {
            this._minuteList.push({
                disabled: this.nzDisabledMinutes && (this.nzDisabledMinutes(this._selectedHour).indexOf(i) !== -1),
                name: i.toString().length === 1 ? ('0' + i) : ('' + i),
                index: i
            });
        }
    }
    /**
     * @return {?}
     */
    _buildSeconds() {
        this._secondList = [];
        for (let /** @type {?} */ i = 0; i <= 59; i++) {
            this._secondList.push({
                disabled: this.nzDisabledSeconds && (this.nzDisabledSeconds(this._selectedHour, this._selectedMinute).indexOf(i) !== -1),
                name: i.toString().length === 1 ? ('0' + i) : ('' + i),
                index: i
            });
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.nzValue = value;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.nzDisabled = isDisabled;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._buildTime();
    }
}
NzTimePickerInnerComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-timepicker-inner',
                encapsulation: ViewEncapsulation.None,
                template: `
    <span
      class="ant-calendar-time-picker"
      [ngClass]="{'ant-time-picker-large':nzSize=='large','ant-time-picker-small':nzSize=='small'}">
      <div
        class="ant-calendar-time-picker-panel"
        [@dropDownAnimation]="'bottom'">
        <div class="ant-calendar-time-picker-inner"
          [class.ant-calendar-time-picker-column-3]="_showHour&&_showMinute&&_showSecond"
          [class.ant-calendar-time-picker-column-2]="_showHour&&_showMinute&&!_showSecond"
          [class.ant-calendar-time-picker-column-1]="_showHour&&(!_showMinute)&&(!_showSecond)">
        <div class="ant-calendar-time-picker-combobox">
          <div
            class="ant-calendar-time-picker-select"
            #hourListInstance
            *ngIf="_showHour">
            <ul>
              <ng-template
                ngFor
                let-_hour
                [ngForOf]="_hourList"
                let-i="index">
                 <li
                   [ngClass]="_hour.name"
                   *ngIf="!(nzHideDisabledOptions&&_hour.disabled)"
                   [class.ant-time-picker-panel-select-option-selected]="_hour.index===_selectedHour"
                   [class.ant-time-picker-panel-select-option-disabled]="_hour.disabled"
                   (click)="_selectHour(hourListInstance,_hour.index,_hour.disabled)">
                   {{_hour.name}}
                 </li>
              </ng-template>
            </ul>
          </div>
          <div
            class="ant-calendar-time-picker-select"
            #minuteListInstance
            *ngIf="_showMinute">
            <ul>
              <ng-template
                ngFor
                let-_minute
                [ngForOf]="_minuteList"
                let-i="index">
                 <li
                   [ngClass]="_minute.name"
                   *ngIf="!(nzHideDisabledOptions&&_minute.disabled)"
                   [class.ant-time-picker-panel-select-option-selected]="_minute.index===_selectedMinute"
                   [class.ant-time-picker-panel-select-option-disabled]="_minute.disabled"
                   (click)="_selectMinute(minuteListInstance,_minute.index,_minute.disabled)">
                   {{_minute.name}}
                 </li>
              </ng-template>
            </ul>
          </div>
          <div
            class="ant-calendar-time-picker-select"
            #secondListInstance
            *ngIf="_showSecond">
            <ul>
              <ng-template
                ngFor
                let-_second
                [ngForOf]="_secondList"
                let-i="index">
                 <li
                   [ngClass]="_second.name"
                   *ngIf="!(nzHideDisabledOptions&&_second.disabled)"
                   [class.ant-time-picker-panel-select-option-selected]="_second.index===_selectedSecond"
                   [class.ant-time-picker-panel-select-option-disabled]="_second.disabled"
                   (click)="_selectSecond(secondListInstance,_second.index,_second.disabled)">
                   {{_second.name}}
                 </li>
              </ng-template>
            </ul>
          </div>
        </div>
      </div>
      </div>
    </span>`,
                animations: [
                    DropDownAnimation
                ],
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => NzTimePickerInnerComponent),
                        multi: true
                    }
                ],
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-time-picker-panel {
  z-index: 1050;
  position: absolute;
}
.ant-time-picker-panel-inner {
  position: relative;
  outline: none;
  list-style: none;
  font-size: 12px;
  text-align: left;
  background-color: #fff;
  border-radius: 4px;
  box-shadow: 0 1px 6px rgba(0, 0, 0, 0.2);
  background-clip: padding-box;
  line-height: 1.5;
  overflow: hidden;
  left: -2px;
}
.ant-time-picker-panel-input {
  margin: 0;
  padding: 0;
  border: 0;
  width: 100%;
  cursor: auto;
  line-height: 1.5;
  outline: 0;
}
.ant-time-picker-panel-input::-moz-placeholder {
  color: rgba(0, 0, 0, 0.25);
  opacity: 1;
}
.ant-time-picker-panel-input:-ms-input-placeholder {
  color: rgba(0, 0, 0, 0.25);
}
.ant-time-picker-panel-input::-webkit-input-placeholder {
  color: rgba(0, 0, 0, 0.25);
}
.ant-time-picker-panel-input-wrap {
  box-sizing: border-box;
  position: relative;
  padding: 6px;
  border-bottom: 1px solid #e9e9e9;
}
.ant-time-picker-panel-input-invalid {
  border-color: red;
}
.ant-time-picker-panel-clear-btn {
  position: absolute;
  right: 5px;
  cursor: pointer;
  overflow: hidden;
  width: 20px;
  height: 20px;
  text-align: center;
  line-height: 20px;
  top: 5px;
  margin: 0;
}
.ant-time-picker-panel-clear-btn:after {
  font-size: 12px;
  color: rgba(0, 0, 0, 0.25);
  display: inline-block;
  line-height: 1;
  width: 20px;
  transition: color 0.3s ease;
  font-family: 'anticon';
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  content: "\\e62e";
}
.ant-time-picker-panel-clear-btn:hover:after {
  color: rgba(0, 0, 0, 0.43);
}
.ant-time-picker-panel-narrow .ant-time-picker-panel-input-wrap {
  max-width: 112px;
}
.ant-time-picker-panel-select {
  float: left;
  font-size: 12px;
  border-left: 1px solid #e9e9e9;
  box-sizing: border-box;
  width: 56px;
  overflow: hidden;
  position: relative;
  max-height: 144px;
}
.ant-time-picker-panel-select:hover {
  overflow-y: auto;
}
.ant-time-picker-panel-select:first-child {
  border-left: 0;
  margin-left: 0;
}
.ant-time-picker-panel-select:last-child {
  border-right: 0;
}
.ant-time-picker-panel-select:only-child {
  width: 100%;
}
.ant-time-picker-panel-select ul {
  list-style: none;
  box-sizing: border-box;
  margin: 0;
  padding: 0 0 120px;
  width: 100%;
}
.ant-time-picker-panel-select li {
  list-style: none;
  box-sizing: content-box;
  margin: 0;
  padding: 0 0 0 8px;
  width: 100%;
  height: 24px;
  line-height: 24px;
  text-align: left;
  cursor: pointer;
  user-select: none;
  transition: background 0.3s;
}
.ant-time-picker-panel-select li:hover {
  background: #f0fbf7;
}
li.ant-time-picker-panel-select-option-selected {
  background: #f7f7f7;
  font-weight: bold;
}
li.ant-time-picker-panel-select-option-selected:hover {
  background: #f7f7f7;
}
li.ant-time-picker-panel-select-option-disabled {
  color: rgba(0, 0, 0, 0.25);
}
li.ant-time-picker-panel-select-option-disabled:hover {
  background: transparent;
  cursor: not-allowed;
}
.ant-time-picker-panel-combobox {
  zoom: 1;
}
.ant-time-picker-panel-combobox:before,
.ant-time-picker-panel-combobox:after {
  content: " ";
  display: table;
}
.ant-time-picker-panel-combobox:after {
  clear: both;
  visibility: hidden;
  font-size: 0;
  height: 0;
}
.ant-time-picker-panel-addon {
  padding: 8px;
  border-top: 1px solid #e9e9e9;
}
.ant-time-picker-panel.slide-up-enter.slide-up-enter-active.ant-time-picker-panel-placement-topLeft,
.ant-time-picker-panel.slide-up-enter.slide-up-enter-active.ant-time-picker-panel-placement-topRight,
.ant-time-picker-panel.slide-up-appear.slide-up-appear-active.ant-time-picker-panel-placement-topLeft,
.ant-time-picker-panel.slide-up-appear.slide-up-appear-active.ant-time-picker-panel-placement-topRight {
  animation-name: antSlideDownIn;
}
.ant-time-picker-panel.slide-up-enter.slide-up-enter-active.ant-time-picker-panel-placement-bottomLeft,
.ant-time-picker-panel.slide-up-enter.slide-up-enter-active.ant-time-picker-panel-placement-bottomRight,
.ant-time-picker-panel.slide-up-appear.slide-up-appear-active.ant-time-picker-panel-placement-bottomLeft,
.ant-time-picker-panel.slide-up-appear.slide-up-appear-active.ant-time-picker-panel-placement-bottomRight {
  animation-name: antSlideUpIn;
}
.ant-time-picker-panel.slide-up-leave.slide-up-leave-active.ant-time-picker-panel-placement-topLeft,
.ant-time-picker-panel.slide-up-leave.slide-up-leave-active.ant-time-picker-panel-placement-topRight {
  animation-name: antSlideDownOut;
}
.ant-time-picker-panel.slide-up-leave.slide-up-leave-active.ant-time-picker-panel-placement-bottomLeft,
.ant-time-picker-panel.slide-up-leave.slide-up-leave-active.ant-time-picker-panel-placement-bottomRight {
  animation-name: antSlideUpOut;
}
.ant-time-picker {
  position: relative;
  display: inline-block;
  outline: none;
  font-size: 12px;
  transition: opacity 0.3s ease;
  width: 100px;
}
.ant-time-picker-input {
  position: relative;
  display: inline-block;
  padding: 4px 7px;
  width: 100%;
  height: 28px;
  cursor: text;
  font-size: 12px;
  line-height: 1.5;
  color: rgba(0, 0, 0, 0.65);
  background-color: #fff;
  background-image: none;
  border: 1px solid #d9d9d9;
  border-radius: 4px;
  transition: all .3s;
}
.ant-time-picker-input::-moz-placeholder {
  color: rgba(0, 0, 0, 0.25);
  opacity: 1;
}
.ant-time-picker-input:-ms-input-placeholder {
  color: rgba(0, 0, 0, 0.25);
}
.ant-time-picker-input::-webkit-input-placeholder {
  color: rgba(0, 0, 0, 0.25);
}
.ant-time-picker-input:hover {
  border-color: #6ddab5;
}
.ant-time-picker-input:focus {
  border-color: #6ddab5;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(63, 206, 158, 0.2);
}
.ant-time-picker-input-disabled {
  background-color: #f7f7f7;
  opacity: 1;
  cursor: not-allowed;
  color: rgba(0, 0, 0, 0.25);
}
.ant-time-picker-input-disabled:hover {
  border-color: #e2e2e2;
}
textarea.ant-time-picker-input {
  max-width: 100%;
  height: auto;
  vertical-align: bottom;
}
.ant-time-picker-input-lg {
  padding: 6px 7px;
  height: 32px;
}
.ant-time-picker-input-sm {
  padding: 1px 7px;
  height: 22px;
}
.ant-time-picker-input[disabled] {
  background-color: #f7f7f7;
  opacity: 1;
  cursor: not-allowed;
  color: rgba(0, 0, 0, 0.25);
}
.ant-time-picker-input[disabled]:hover {
  border-color: #e2e2e2;
}
.ant-time-picker-large .ant-time-picker-input {
  padding: 6px 7px;
  height: 32px;
}
.ant-time-picker-small .ant-time-picker-input {
  padding: 1px 7px;
  height: 22px;
}
.ant-time-picker-open {
  opacity: 0;
}
.ant-time-picker-icon {
  position: absolute;
  user-select: none;
  transition: all 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
  width: 12px;
  height: 12px;
  line-height: 12px;
  right: 8px;
  color: rgba(0, 0, 0, 0.43);
  top: 50%;
  margin-top: -6px;
}
.ant-time-picker-icon:after {
  content: "\\e641";
  font-family: "anticon";
  font-size: 12px;
  color: rgba(0, 0, 0, 0.43);
  display: block;
  line-height: 1;
}
`,
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-time-picker-panel {
  z-index: 1050;
  position: absolute;
}
.ant-time-picker-panel-inner {
  position: relative;
  outline: none;
  list-style: none;
  font-size: 12px;
  text-align: left;
  background-color: #fff;
  border-radius: 4px;
  box-shadow: 0 1px 6px rgba(0, 0, 0, 0.2);
  background-clip: padding-box;
  line-height: 1.5;
  overflow: hidden;
  left: -2px;
}
.ant-time-picker-panel-input {
  margin: 0;
  padding: 0;
  border: 0;
  width: 100%;
  cursor: auto;
  line-height: 1.5;
  outline: 0;
}
.ant-time-picker-panel-input::-moz-placeholder {
  color: rgba(0, 0, 0, 0.25);
  opacity: 1;
}
.ant-time-picker-panel-input:-ms-input-placeholder {
  color: rgba(0, 0, 0, 0.25);
}
.ant-time-picker-panel-input::-webkit-input-placeholder {
  color: rgba(0, 0, 0, 0.25);
}
.ant-time-picker-panel-input-wrap {
  box-sizing: border-box;
  position: relative;
  padding: 6px;
  border-bottom: 1px solid #e9e9e9;
}
.ant-time-picker-panel-input-invalid {
  border-color: red;
}
.ant-time-picker-panel-clear-btn {
  position: absolute;
  right: 5px;
  cursor: pointer;
  overflow: hidden;
  width: 20px;
  height: 20px;
  text-align: center;
  line-height: 20px;
  top: 5px;
  margin: 0;
}
.ant-time-picker-panel-clear-btn:after {
  font-size: 12px;
  color: rgba(0, 0, 0, 0.25);
  display: inline-block;
  line-height: 1;
  width: 20px;
  transition: color 0.3s ease;
  font-family: 'anticon';
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  content: "\\e62e";
}
.ant-time-picker-panel-clear-btn:hover:after {
  color: rgba(0, 0, 0, 0.43);
}
.ant-time-picker-panel-narrow .ant-time-picker-panel-input-wrap {
  max-width: 112px;
}
.ant-time-picker-panel-select {
  float: left;
  font-size: 12px;
  border-left: 1px solid #e9e9e9;
  box-sizing: border-box;
  width: 56px;
  overflow: hidden;
  position: relative;
  max-height: 144px;
}
.ant-time-picker-panel-select:hover {
  overflow-y: auto;
}
.ant-time-picker-panel-select:first-child {
  border-left: 0;
  margin-left: 0;
}
.ant-time-picker-panel-select:last-child {
  border-right: 0;
}
.ant-time-picker-panel-select:only-child {
  width: 100%;
}
.ant-time-picker-panel-select ul {
  list-style: none;
  box-sizing: border-box;
  margin: 0;
  padding: 0 0 120px;
  width: 100%;
}
.ant-time-picker-panel-select li {
  list-style: none;
  box-sizing: content-box;
  margin: 0;
  padding: 0 0 0 8px;
  width: 100%;
  height: 24px;
  line-height: 24px;
  text-align: left;
  cursor: pointer;
  user-select: none;
  transition: background 0.3s;
}
.ant-time-picker-panel-select li:hover {
  background: #f0fbf7;
}
li.ant-time-picker-panel-select-option-selected {
  background: #f7f7f7;
  font-weight: bold;
}
li.ant-time-picker-panel-select-option-selected:hover {
  background: #f7f7f7;
}
li.ant-time-picker-panel-select-option-disabled {
  color: rgba(0, 0, 0, 0.25);
}
li.ant-time-picker-panel-select-option-disabled:hover {
  background: transparent;
  cursor: not-allowed;
}
.ant-time-picker-panel-combobox {
  zoom: 1;
}
.ant-time-picker-panel-combobox:before,
.ant-time-picker-panel-combobox:after {
  content: " ";
  display: table;
}
.ant-time-picker-panel-combobox:after {
  clear: both;
  visibility: hidden;
  font-size: 0;
  height: 0;
}
.ant-time-picker-panel-addon {
  padding: 8px;
  border-top: 1px solid #e9e9e9;
}
.ant-time-picker-panel.slide-up-enter.slide-up-enter-active.ant-time-picker-panel-placement-topLeft,
.ant-time-picker-panel.slide-up-enter.slide-up-enter-active.ant-time-picker-panel-placement-topRight,
.ant-time-picker-panel.slide-up-appear.slide-up-appear-active.ant-time-picker-panel-placement-topLeft,
.ant-time-picker-panel.slide-up-appear.slide-up-appear-active.ant-time-picker-panel-placement-topRight {
  animation-name: antSlideDownIn;
}
.ant-time-picker-panel.slide-up-enter.slide-up-enter-active.ant-time-picker-panel-placement-bottomLeft,
.ant-time-picker-panel.slide-up-enter.slide-up-enter-active.ant-time-picker-panel-placement-bottomRight,
.ant-time-picker-panel.slide-up-appear.slide-up-appear-active.ant-time-picker-panel-placement-bottomLeft,
.ant-time-picker-panel.slide-up-appear.slide-up-appear-active.ant-time-picker-panel-placement-bottomRight {
  animation-name: antSlideUpIn;
}
.ant-time-picker-panel.slide-up-leave.slide-up-leave-active.ant-time-picker-panel-placement-topLeft,
.ant-time-picker-panel.slide-up-leave.slide-up-leave-active.ant-time-picker-panel-placement-topRight {
  animation-name: antSlideDownOut;
}
.ant-time-picker-panel.slide-up-leave.slide-up-leave-active.ant-time-picker-panel-placement-bottomLeft,
.ant-time-picker-panel.slide-up-leave.slide-up-leave-active.ant-time-picker-panel-placement-bottomRight {
  animation-name: antSlideUpOut;
}
.ant-time-picker {
  position: relative;
  display: inline-block;
  outline: none;
  font-size: 12px;
  transition: opacity 0.3s ease;
  width: 100px;
}
.ant-time-picker-input {
  position: relative;
  display: inline-block;
  padding: 4px 7px;
  width: 100%;
  height: 28px;
  cursor: text;
  font-size: 12px;
  line-height: 1.5;
  color: rgba(0, 0, 0, 0.65);
  background-color: #fff;
  background-image: none;
  border: 1px solid #d9d9d9;
  border-radius: 4px;
  transition: all .3s;
}
.ant-time-picker-input::-moz-placeholder {
  color: rgba(0, 0, 0, 0.25);
  opacity: 1;
}
.ant-time-picker-input:-ms-input-placeholder {
  color: rgba(0, 0, 0, 0.25);
}
.ant-time-picker-input::-webkit-input-placeholder {
  color: rgba(0, 0, 0, 0.25);
}
.ant-time-picker-input:hover {
  border-color: #6ddab5;
}
.ant-time-picker-input:focus {
  border-color: #6ddab5;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(63, 206, 158, 0.2);
}
.ant-time-picker-input-disabled {
  background-color: #f7f7f7;
  opacity: 1;
  cursor: not-allowed;
  color: rgba(0, 0, 0, 0.25);
}
.ant-time-picker-input-disabled:hover {
  border-color: #e2e2e2;
}
textarea.ant-time-picker-input {
  max-width: 100%;
  height: auto;
  vertical-align: bottom;
}
.ant-time-picker-input-lg {
  padding: 6px 7px;
  height: 32px;
}
.ant-time-picker-input-sm {
  padding: 1px 7px;
  height: 22px;
}
.ant-time-picker-input[disabled] {
  background-color: #f7f7f7;
  opacity: 1;
  cursor: not-allowed;
  color: rgba(0, 0, 0, 0.25);
}
.ant-time-picker-input[disabled]:hover {
  border-color: #e2e2e2;
}
.ant-time-picker-large .ant-time-picker-input {
  padding: 6px 7px;
  height: 32px;
}
.ant-time-picker-small .ant-time-picker-input {
  padding: 1px 7px;
  height: 22px;
}
.ant-time-picker-open {
  opacity: 0;
}
.ant-time-picker-icon {
  position: absolute;
  user-select: none;
  transition: all 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
  width: 12px;
  height: 12px;
  line-height: 12px;
  right: 8px;
  color: rgba(0, 0, 0, 0.43);
  top: 50%;
  margin-top: -6px;
}
.ant-time-picker-icon:after {
  content: "\\e641";
  font-family: "anticon";
  font-size: 12px;
  color: rgba(0, 0, 0, 0.43);
  display: block;
  line-height: 1;
}
.ant-time-picker-panel {
  position: relative;
  left: 0;
}
.ant-time-picker-panel.top {
  bottom: -8px;
}
.ant-time-picker-panel.bottom {
  top: -2px;
}
`
                ]
            },] },
];
/**
 * @nocollapse
 */
NzTimePickerInnerComponent.ctorParameters = () => [
    { type: ChangeDetectorRef, },
];
NzTimePickerInnerComponent.propDecorators = {
    '_hourListInstance': [{ type: ViewChild, args: ['hourListInstance',] },],
    '_minuteListInstance': [{ type: ViewChild, args: ['minuteListInstance',] },],
    '_inputTimeInstance': [{ type: ViewChild, args: ['inputTimeInstance',] },],
    '_secondListInstance': [{ type: ViewChild, args: ['secondListInstance',] },],
    'nzHideDisabledOptions': [{ type: Input },],
    'nzPlaceHolder': [{ type: Input },],
    'nzSize': [{ type: Input },],
    'nzDisabledHours': [{ type: Input },],
    'nzDisabledMinutes': [{ type: Input },],
    'nzDisabledSeconds': [{ type: Input },],
    'nzDisabled': [{ type: Input },],
    'nzFormat': [{ type: Input },],
};

const POSITION_MAP = {
    'top': {
        originX: 'center',
        originY: 'top',
        overlayX: 'center',
        overlayY: 'bottom'
    },
    'topCenter': {
        originX: 'center',
        originY: 'top',
        overlayX: 'center',
        overlayY: 'bottom'
    },
    'topLeft': {
        originX: 'start',
        originY: 'top',
        overlayX: 'start',
        overlayY: 'bottom'
    },
    'topRight': {
        originX: 'end',
        originY: 'top',
        overlayX: 'end',
        overlayY: 'bottom'
    },
    'right': {
        originX: 'end',
        originY: 'center',
        overlayX: 'start',
        overlayY: 'center',
    },
    'rightTop': {
        originX: 'end',
        originY: 'top',
        overlayX: 'start',
        overlayY: 'top',
    },
    'rightBottom': {
        originX: 'end',
        originY: 'bottom',
        overlayX: 'start',
        overlayY: 'bottom',
    },
    'bottom': {
        originX: 'center',
        originY: 'bottom',
        overlayX: 'center',
        overlayY: 'top',
    },
    'bottomCenter': {
        originX: 'center',
        originY: 'bottom',
        overlayX: 'center',
        overlayY: 'top',
    },
    'bottomLeft': {
        originX: 'start',
        originY: 'bottom',
        overlayX: 'start',
        overlayY: 'top',
    },
    'bottomRight': {
        originX: 'end',
        originY: 'bottom',
        overlayX: 'end',
        overlayY: 'top',
    },
    'left': {
        originX: 'start',
        originY: 'center',
        overlayX: 'end',
        overlayY: 'center',
    },
    'leftTop': {
        originX: 'start',
        originY: 'top',
        overlayX: 'end',
        overlayY: 'top',
    },
    'leftBottom': {
        originX: 'start',
        originY: 'bottom',
        overlayX: 'end',
        overlayY: 'bottom',
    },
};
const DEFAULT_4_POSITIONS = _objectValues([POSITION_MAP['top'], POSITION_MAP['right'], POSITION_MAP['bottom'], POSITION_MAP['left']]);
const DEFAULT_DROPDOWN_POSITIONS = _objectValues([POSITION_MAP['bottomLeft'], POSITION_MAP['topLeft']]);
const DEFAULT_DATEPICKER_POSITIONS = ([
    {
        originX: 'start',
        originY: 'top',
        overlayX: 'start',
        overlayY: 'top',
    },
    {
        originX: 'start',
        originY: 'bottom',
        overlayX: 'start',
        overlayY: 'bottom',
    }
]);
/**
 * @param {?} array
 * @param {?} iteratee
 * @return {?}
 */
function arrayMap(array, iteratee) {
    let /** @type {?} */ index = -1;
    const /** @type {?} */ length = array == null ? 0 : array.length, /** @type {?} */ result = Array(length);
    while (++index < length) {
        result[index] = iteratee(array[index], index, array);
    }
    return result;
}
/**
 * @param {?} object
 * @param {?} props
 * @return {?}
 */
function baseValues(object, props) {
    return arrayMap(props, function (key) {
        return object[key];
    });
}
/**
 * @param {?} object
 * @return {?}
 */
function _objectValues(object) {
    return object == null ? [] : baseValues(object, Object.keys(object));
}

class NzDatePickerComponent {
    /**
     * @param {?} _elementRef
     * @param {?} _cdr
     */
    constructor(_elementRef, _cdr) {
        this._elementRef = _elementRef;
        this._cdr = _cdr;
        this._open = false;
        this._mode = 'year';
        this._dropDownPosition = 'bottom';
        this._triggerWidth = 0;
        this._value = null;
        this._disabled = false;
        this._today = new Date();
        this._selectedMonth = moment(this.nzValue).month();
        this._selectedYear = moment(this.nzValue).year();
        this._selectedDate = moment(this.nzValue).date();
        this._showMonth = moment(new Date()).month();
        this._showYear = moment(new Date()).year();
        this._startDecade = Math.floor(this._showYear / 10) * 10;
        this._yearPanel = [];
        this._positions = [...DEFAULT_DATEPICKER_POSITIONS];
        // ngModel Access
        this.onChange = Function.prototype;
        this.onTouched = Function.prototype;
        this.nzAllowClear = true;
        this.nzShowTime = null;
        this.nzPlaceHolder = '请选择日期';
        this.nzFormat = 'YYYY-MM-DD';
        this.nzSize = '';
        this._nzCalendarPicker = true;
        this._el = this._elementRef.nativeElement;
    }
    /**
     * @return {?}
     */
    get nzDisabled() {
        return this._disabled;
    }
    ;
    /**
     * @param {?} value
     * @return {?}
     */
    set nzDisabled(value) {
        this._disabled = value;
        this._closeCalendar();
    }
    /**
     * @return {?}
     */
    _setTriggerWidth() {
        this._triggerWidth = this.trigger.nativeElement.getBoundingClientRect().width;
    }
    /**
     * @param {?} position
     * @return {?}
     */
    onPositionChange(position) {
        const /** @type {?} */ _position = position.connectionPair.originY === 'bottom' ? 'top' : 'bottom';
        if (this._dropDownPosition !== _position) {
            this._dropDownPosition = _position;
            this._cdr.detectChanges();
        }
    }
    /**
     * @return {?}
     */
    get nzValue() {
        return this._value || new Date();
    }
    ;
    /**
     * @param {?} value
     * @return {?}
     */
    set nzValue(value) {
        this._updateValue(value);
    }
    ;
    /**
     * @param {?} $event
     * @return {?}
     */
    _changeTime($event) {
        this._value = $event;
    }
    /**
     * @param {?} box
     * @return {?}
     */
    _blurInput(box) {
        if (Date.parse(box.value)) {
            this.nzValue = new Date(box.value);
            this.onChange(this._value);
        }
    }
    /**
     * @return {?}
     */
    _preYear() {
        this._showYear = this._showYear - 1;
    }
    /**
     * @return {?}
     */
    _nextYear() {
        this._showYear = this._showYear + 1;
    }
    /**
     * @return {?}
     */
    _preMonth() {
        if (this._showMonth - 1 < 0) {
            this._showMonth = 11;
            this._preYear();
        }
        else {
            this._showMonth = this._showMonth - 1;
        }
    }
    /**
     * @return {?}
     */
    _nextMonth() {
        if (this._showMonth + 1 > 11) {
            this._showMonth = 0;
            this._nextYear();
        }
        else {
            this._showMonth = this._showMonth + 1;
        }
    }
    /**
     * @param {?} year
     * @param {?} $event
     * @return {?}
     */
    _setShowYear(year, $event) {
        $event.stopPropagation();
        this._showYear = year;
        this._mode = 'year';
    }
    /**
     * @return {?}
     */
    _preDecade() {
        this._startDecade = this._startDecade - 10;
    }
    /**
     * @return {?}
     */
    _nextDecade() {
        this._startDecade = this._startDecade + 10;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    _clearValue(e) {
        e.preventDefault();
        e.stopPropagation();
        this.nzValue = null;
        this.onChange(this._value);
    }
    /**
     * @return {?}
     */
    _changeToToday() {
        this.nzValue = new Date();
        this.onChange(this._value);
        this._closeCalendar();
    }
    /**
     * @param {?} day
     * @return {?}
     */
    _clickDay(day) {
        if (!this.nzShowTime) {
            this._closeCalendar();
            this.nzValue = day.date.toDate();
            this.onChange(this._value);
        }
        else {
            this.nzValue = moment(this.nzValue).year(day.date.year()).month(day.date.month()).date(day.date.date()).toDate();
            this.onChange(this._value);
        }
    }
    /**
     * @param {?} month
     * @return {?}
     */
    _clickMonth(month) {
        this._showMonth = month.index;
        this._mode = 'year';
    }
    /**
     * @return {?}
     */
    _openCalendar() {
        if (this.nzDisabled) {
            return;
        }
        this._mode = 'year';
        this._open = true;
        this._setTriggerWidth();
    }
    /**
     * @return {?}
     */
    _closeCalendar() {
        if (!this._open) {
            return;
        }
        if (this.nzShowTime) {
            this.onChange(this._value);
        }
        this._open = false;
    }
    /**
     * @return {?}
     */
    _changeMonthView() {
        this._mode = 'month';
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    _changeDecadeView($event) {
        $event.stopPropagation();
        this._mode = 'decade';
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    _changeTimeView($event) {
        $event.stopPropagation();
        this._mode = 'time';
        setTimeout(_ => {
            this.timePickerInner._initPosition();
        });
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    _changeYearView($event) {
        $event.stopPropagation();
        this._mode = 'year';
    }
    /**
     * @return {?}
     */
    get _showClearIcon() {
        return this._value && !this.nzDisabled && this.nzAllowClear;
    }
    /**
     * @return {?}
     */
    _generateYearPanel() {
        let /** @type {?} */ _t = [];
        for (let /** @type {?} */ i = 0; i < 10; i++) {
            if (i === 1 || i === 4 || i === 7 || i === 9) {
                _t.push(i);
                this._yearPanel.push(_t);
                _t = [];
            }
            else {
                _t.push(i);
            }
        }
        this._yearPanel[0].unshift('start');
        this._yearPanel[3].push('end');
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._generateYearPanel();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        // this.nzValue = value;
        this._updateValue(value);
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.nzDisabled = isDisabled;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    _updateValue(value) {
        if (this._value === value) {
            return;
        }
        this._value = value;
        this._selectedMonth = moment(this.nzValue).month();
        this._selectedYear = moment(this.nzValue).year();
        this._selectedDate = moment(this.nzValue).date();
        this._showYear = moment(this.nzValue).year();
        this._showMonth = moment(this.nzValue).month();
        this._startDecade = Math.floor(this._showYear / 10) * 10;
    }
}
NzDatePickerComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-datepicker',
                encapsulation: ViewEncapsulation.None,
                animations: [
                    DropDownAnimation
                ],
                template: `
    <span style="display: block"
      (click)="_openCalendar()"
      nz-overlay-origin
      #origin="nzOverlayOrigin"
      #trigger>
      <input
        nz-input
        (blur)="onTouched()"
        [attr.placeholder]="nzPlaceHolder"
        [nzDisabled]="nzDisabled"
        [nzSize]="nzSize"
        class="ant-calendar-picker-input"
        [value]="_value|nzDate:nzFormat">
      <i class="ant-calendar-picker-clear anticon anticon-cross-circle"
        *ngIf="_showClearIcon"
        (click)="onTouched();_clearValue($event)">
      </i>
      <span class="ant-calendar-picker-icon"></span>
    </span>
    <ng-template
      nz-connected-overlay
      hasBackdrop
      [positions]="_positions"
      [origin]="origin"
      (backdropClick)="_closeCalendar()"
      (detach)="_closeCalendar()"
      (positionChange)="onPositionChange($event)"
      [open]="_open">
      <div class="ant-calendar-picker-container"
        [class.top]="_dropDownPosition==='top'"
        [class.bottom]="_dropDownPosition==='bottom'"
        [@dropDownAnimation]="_dropDownPosition">
        <div class="ant-calendar" tabindex="0" [class.ant-calendar-time]="nzShowTime">
          <div class="ant-calendar-input-wrap">
            <div class="ant-calendar-date-input-wrap">
              <input class="ant-calendar-input"
                [attr.placeholder]="nzPlaceHolder"
                [value]="_value|nzDate:nzFormat"
                #dateBox
                (blur)="_blurInput(dateBox)">
            </div>
            <a class="ant-calendar-clear-btn" title="清除"></a>
          </div>
          <div class="ant-calendar-date-panel">
            <div class="ant-calendar-header">
              <div style="position: relative;" *ngIf="_mode!='time'">
                <a class="ant-calendar-prev-year-btn" title="上一年" (click)="_preYear()"></a>
                <a class="ant-calendar-prev-month-btn" title="上个月" (click)="_preMonth()"></a>
                <span class="ant-calendar-ym-select">
                <a class="ant-calendar-month-select" title="选择月份" (click)="_changeMonthView()">{{_showMonth + 1}}月</a>
                <a class="ant-calendar-year-select" title="选择年份" (click)="_changeDecadeView($event)">{{_showYear}}年</a>
                </span>
                <a class="ant-calendar-next-month-btn" title="下个月" (click)="_nextMonth()"></a>
                <a class="ant-calendar-next-year-btn" title="下一年" (click)="_nextYear()"></a>
              </div>
              <div style="position: relative;" *ngIf="_mode=='time'">
                <span class="ant-calendar-my-select">
                  <a class="ant-calendar-year-select" title="Choose a month">{{_selectedYear}}年</a>
                  <a class="ant-calendar-month-select" title="Choose a month">{{_showMonth + 1}}月</a>
                  <a class="ant-calendar-day-select">{{_selectedDate}}日</a>
                </span>
              </div>
              <div class="ant-calendar-month-panel" *ngIf="_mode=='month'">
                <div>
                  <div class="ant-calendar-month-panel-header">
                    <a class="ant-calendar-month-panel-prev-year-btn" title="上一年" (click)="_preYear()"></a>
                    <a class="ant-calendar-month-panel-year-select" title="选择年份" (click)="_changeDecadeView($event)">
                      <span class="ant-calendar-month-panel-year-select-content">{{_showYear}}</span>
                      <span class="ant-calendar-month-panel-year-select-arrow">x</span>
                    </a>
                    <a class="ant-calendar-month-panel-next-year-btn" title="下一年" (click)="_nextYear()"></a>
                  </div>
                  <div class="ant-calendar-month-panel-body">
                    <nz-calendar
                      [nzClearTime]="!nzShowTime"
                      [nzDisabledDate]="nzDisabledDate"
                      (nzClickDay)="_clickDay($event)"
                      [nzShowMonth]="_showMonth"
                      [nzShowYear]="_showYear"
                      [nzValue]="_value"
                      (nzClickMonth)="_clickMonth($event)"
                      [nzMode]="'month'"
                      [nzFullScreen]="false"
                      [nzShowHeader]="false"
                      [nzDatePicker]="true">
                    </nz-calendar>
                  </div>
                </div>
              </div>
              <div class="ant-calendar-year-panel" *ngIf="_mode=='decade'">
                <div>
                  <div class="ant-calendar-year-panel-header">
                    <a class="ant-calendar-year-panel-prev-decade-btn" title="上一年代" (click)="_preDecade()"></a>
                    <a class="ant-calendar-year-panel-decade-select" title="选择年代">
                      <span class="ant-calendar-year-panel-decade-select-content">{{_startDecade}}-{{_startDecade + 9}}</span>
                      <span class="ant-calendar-year-panel-decade-select-arrow">x</span>
                    </a>
                    <a class="ant-calendar-year-panel-next-decade-btn" title="下一年代" (click)="_nextDecade()"></a>
                  </div>
                  <div class="ant-calendar-year-panel-body">
                    <table class="ant-calendar-year-panel-table" cellspacing="0" role="grid">
                      <tbody class="ant-calendar-year-panel-tbody">
                        <tr *ngFor="let tr of _yearPanel">
                          <ng-template ngFor let-td [ngForOf]="tr">
                            <td class="ant-calendar-year-panel-cell ant-calendar-year-panel-last-decade-cell" *ngIf="td=='start'">
                              <a class="ant-calendar-year-panel-year" (click)="_preDecade()">{{_startDecade - 1}}</a>
                            </td>
                            <td *ngIf="(td!='start')&&(td!='end')" [attr.title]="_startDecade+td" class="ant-calendar-year-panel-cell" [ngClass]="{'ant-calendar-year-panel-selected-cell':(_startDecade+td==_showYear)}">
                              <a class="ant-calendar-year-panel-year" (click)="_setShowYear(_startDecade+td,$event)">{{_startDecade + td}}</a>
                            </td>
                            <td class="ant-calendar-year-panel-cell ant-calendar-year-panel-next-decade-cell" *ngIf="td=='end'">
                              <a class="ant-calendar-year-panel-year" (click)="_nextDecade()">{{_startDecade + 10}}</a>
                            </td>
                          </ng-template>
                        </tr>
                      </tbody>
                    </table>
                  </div>
                </div>
              </div>
            </div>
            <nz-timepicker-inner
              [nzPlaceHolder]="nzShowTime&&nzShowTime.nzPlaceHolder||'请选择时间'"
              [nzFormat]="nzShowTime&&nzShowTime.nzFormat||'HH:mm:ss'"
              [nzDisabled]="nzShowTime&&nzShowTime.nzDisabled||false"
              [nzDisabledHours]="nzShowTime&&nzShowTime.nzDisabledHours||null"
              [nzDisabledMinutes]="nzShowTime&&nzShowTime.nzDisabledMinutes||null"
              [nzDisabledSeconds]="nzShowTime&&nzShowTime.nzDisabledSeconds||null"
              [nzHideDisabledOptions]="nzShowTime&&nzShowTime.nzHideDisabledOptions||false"
              [ngModel]="_value" (ngModelChange)="_changeTime($event)"
              *ngIf="nzShowTime&&(_mode == 'time')"></nz-timepicker-inner>
            <div class="ant-calendar-calendar-body">
              <nz-calendar [nzClearTime]="!nzShowTime" [nzDisabledDate]="nzDisabledDate" (nzClickDay)="_clickDay($event)" [nzShowMonth]="_showMonth" [nzShowYear]="_showYear" [nzValue]="_value" (nzClickMonth)="_clickMonth($event)" [nzMode]="'year'" [nzFullScreen]="false" [nzShowHeader]="false" [nzDatePicker]="true"></nz-calendar>
            </div>
            <div class="ant-calendar-footer ant-calendar-footer-show-ok">
                <span class="ant-calendar-footer-btn">
                  <a class="ant-calendar-today-btn " [attr.title]="_today|nzDate:nzFormat" (click)="_changeToToday()">{{nzShowTime ? '此刻' : '今天'}}</a>
                  <a class="ant-calendar-time-picker-btn" (click)="_changeTimeView($event)" *ngIf="(_mode != 'time')&&nzShowTime">选择时间</a>
                  <a class="ant-calendar-time-picker-btn" (click)="_changeYearView($event)" *ngIf="(_mode == 'time')&&nzShowTime">选择日期</a>
                  <a class="ant-calendar-ok-btn" *ngIf="nzShowTime" (click)="_closeCalendar()">确 定</a>
                </span>
            </div>
          </div>
        </div>
      </div>
    </ng-template>`,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => NzDatePickerComponent),
                        multi: true
                    }
                ],
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-calendar-picker-container {
  position: absolute;
  z-index: 1050;
}
.ant-calendar-picker-container.slide-up-enter.slide-up-enter-active.ant-calendar-picker-container-placement-topLeft,
.ant-calendar-picker-container.slide-up-enter.slide-up-enter-active.ant-calendar-picker-container-placement-topRight,
.ant-calendar-picker-container.slide-up-appear.slide-up-appear-active.ant-calendar-picker-container-placement-topLeft,
.ant-calendar-picker-container.slide-up-appear.slide-up-appear-active.ant-calendar-picker-container-placement-topRight {
  animation-name: antSlideDownIn;
}
.ant-calendar-picker-container.slide-up-enter.slide-up-enter-active.ant-calendar-picker-container-placement-bottomLeft,
.ant-calendar-picker-container.slide-up-enter.slide-up-enter-active.ant-calendar-picker-container-placement-bottomRight,
.ant-calendar-picker-container.slide-up-appear.slide-up-appear-active.ant-calendar-picker-container-placement-bottomLeft,
.ant-calendar-picker-container.slide-up-appear.slide-up-appear-active.ant-calendar-picker-container-placement-bottomRight {
  animation-name: antSlideUpIn;
}
.ant-calendar-picker-container.slide-up-leave.slide-up-leave-active.ant-calendar-picker-container-placement-topLeft,
.ant-calendar-picker-container.slide-up-leave.slide-up-leave-active.ant-calendar-picker-container-placement-topRight {
  animation-name: antSlideDownOut;
}
.ant-calendar-picker-container.slide-up-leave.slide-up-leave-active.ant-calendar-picker-container-placement-bottomLeft,
.ant-calendar-picker-container.slide-up-leave.slide-up-leave-active.ant-calendar-picker-container-placement-bottomRight {
  animation-name: antSlideUpOut;
}
.ant-calendar-picker {
  position: relative;
  display: inline-block;
  outline: none;
  font-size: 12px;
  transition: opacity 0.3s;
}
.ant-calendar-picker-input {
  outline: none;
  display: block;
}
.ant-calendar-picker:hover .ant-calendar-picker-input:not(.ant-input-disabled) {
  border-color: #3FCE9E;
}
.ant-calendar-picker-clear,
.ant-calendar-picker-icon {
  position: absolute;
  width: 14px;
  height: 14px;
  right: 8px;
  top: 50%;
  margin-top: -7px;
  line-height: 14px;
  font-size: 12px;
  transition: all .3s;
  user-select: none;
}
.ant-calendar-picker-clear {
  opacity: 0;
  z-index: 1;
  color: rgba(0, 0, 0, 0.25);
  background: #fff;
  pointer-events: none;
  cursor: pointer;
}
.ant-calendar-picker-clear:hover {
  color: rgba(0, 0, 0, 0.43);
}
.ant-calendar-picker:hover .ant-calendar-picker-clear {
  opacity: 1;
  pointer-events: auto;
}
.ant-calendar-picker-icon {
  color: rgba(0, 0, 0, 0.43);
}
.ant-calendar-picker-icon:after {
  content: "\\e6bb";
  font-family: "anticon";
  font-size: 12px;
  color: rgba(0, 0, 0, 0.43);
  display: inline-block;
  line-height: 1;
}
.ant-calendar {
  position: relative;
  outline: none;
  width: 231px;
  border: 1px solid #fff;
  list-style: none;
  font-size: 12px;
  text-align: left;
  background-color: #fff;
  border-radius: 4px;
  box-shadow: 0 1px 6px rgba(0, 0, 0, 0.2);
  background-clip: padding-box;
  line-height: 1.5;
}
.ant-calendar-input-wrap {
  height: 34px;
  padding: 6px;
  border-bottom: 1px solid #e9e9e9;
}
.ant-calendar-input {
  border: 0;
  width: 100%;
  cursor: auto;
  outline: 0;
  height: 22px;
  color: rgba(0, 0, 0, 0.65);
  background: #fff;
}
.ant-calendar-input::-moz-placeholder {
  color: rgba(0, 0, 0, 0.25);
  opacity: 1;
}
.ant-calendar-input:-ms-input-placeholder {
  color: rgba(0, 0, 0, 0.25);
}
.ant-calendar-input::-webkit-input-placeholder {
  color: rgba(0, 0, 0, 0.25);
}
.ant-calendar-week-number {
  width: 286px;
}
.ant-calendar-week-number-cell {
  text-align: center;
}
.ant-calendar-header {
  height: 34px;
  line-height: 34px;
  text-align: center;
  user-select: none;
  border-bottom: 1px solid #e9e9e9;
}
.ant-calendar-header a:hover {
  color: #6ddab5;
}
.ant-calendar-header .ant-calendar-century-select,
.ant-calendar-header .ant-calendar-decade-select,
.ant-calendar-header .ant-calendar-year-select,
.ant-calendar-header .ant-calendar-month-select {
  padding: 0 2px;
  font-weight: bold;
  display: inline-block;
  color: rgba(0, 0, 0, 0.65);
  line-height: 34px;
}
.ant-calendar-header .ant-calendar-century-select-arrow,
.ant-calendar-header .ant-calendar-decade-select-arrow,
.ant-calendar-header .ant-calendar-year-select-arrow,
.ant-calendar-header .ant-calendar-month-select-arrow {
  display: none;
}
.ant-calendar-header .ant-calendar-prev-century-btn,
.ant-calendar-header .ant-calendar-next-century-btn,
.ant-calendar-header .ant-calendar-prev-decade-btn,
.ant-calendar-header .ant-calendar-next-decade-btn,
.ant-calendar-header .ant-calendar-prev-month-btn,
.ant-calendar-header .ant-calendar-next-month-btn,
.ant-calendar-header .ant-calendar-prev-year-btn,
.ant-calendar-header .ant-calendar-next-year-btn {
  position: absolute;
  top: 0;
  color: rgba(0, 0, 0, 0.43);
  font-family: Arial, "Hiragino Sans GB", "Microsoft Yahei", "Microsoft Sans Serif", sans-serif;
  padding: 0 5px;
  font-size: 16px;
  display: inline-block;
  line-height: 34px;
}
.ant-calendar-header .ant-calendar-prev-century-btn,
.ant-calendar-header .ant-calendar-prev-decade-btn,
.ant-calendar-header .ant-calendar-prev-year-btn {
  left: 7px;
}
.ant-calendar-header .ant-calendar-prev-century-btn:after,
.ant-calendar-header .ant-calendar-prev-decade-btn:after,
.ant-calendar-header .ant-calendar-prev-year-btn:after {
  content: '«';
}
.ant-calendar-header .ant-calendar-next-century-btn,
.ant-calendar-header .ant-calendar-next-decade-btn,
.ant-calendar-header .ant-calendar-next-year-btn {
  right: 7px;
}
.ant-calendar-header .ant-calendar-next-century-btn:after,
.ant-calendar-header .ant-calendar-next-decade-btn:after,
.ant-calendar-header .ant-calendar-next-year-btn:after {
  content: '»';
}
.ant-calendar-header .ant-calendar-prev-month-btn {
  left: 29px;
}
.ant-calendar-header .ant-calendar-prev-month-btn:after {
  content: '‹';
}
.ant-calendar-header .ant-calendar-next-month-btn {
  right: 29px;
}
.ant-calendar-header .ant-calendar-next-month-btn:after {
  content: '›';
}
.ant-calendar-body {
  padding: 4px 8px;
}
.ant-calendar table {
  border-collapse: collapse;
  max-width: 100%;
  background-color: transparent;
  width: 100%;
}
.ant-calendar table,
.ant-calendar th,
.ant-calendar td {
  border: 0;
}
.ant-calendar-calendar-table {
  border-spacing: 0;
  margin-bottom: 0;
}
.ant-calendar-column-header {
  line-height: 18px;
  width: 33px;
  padding: 6px 0;
  text-align: center;
}
.ant-calendar-column-header .ant-calendar-column-header-inner {
  display: block;
  font-weight: normal;
}
.ant-calendar-week-number-header .ant-calendar-column-header-inner {
  display: none;
}
.ant-calendar-cell {
  padding: 4px 0;
}
.ant-calendar-date {
  display: block;
  margin: 0 auto;
  color: rgba(0, 0, 0, 0.65);
  border-radius: 2px;
  width: 20px;
  height: 20px;
  line-height: 18px;
  border: 1px solid transparent;
  padding: 0;
  background: transparent;
  text-align: center;
  transition: background 0.3s ease;
}
.ant-calendar-date-panel {
  position: relative;
}
.ant-calendar-date:hover {
  background: #f0fbf7;
  cursor: pointer;
}
.ant-calendar-date:active {
  color: #fff;
  background: #6ddab5;
}
.ant-calendar-today .ant-calendar-date {
  border-color: #3FCE9E;
  font-weight: bold;
  color: #3FCE9E;
}
.ant-calendar-last-month-cell .ant-calendar-date,
.ant-calendar-next-month-btn-day .ant-calendar-date {
  color: rgba(0, 0, 0, 0.25);
}
.ant-calendar-selected-day .ant-calendar-date {
  background: #3FCE9E;
  color: #fff;
  border: 1px solid transparent;
}
.ant-calendar-selected-day .ant-calendar-date:hover {
  background: #3FCE9E;
}
.ant-calendar-disabled-cell .ant-calendar-date {
  cursor: not-allowed;
  color: #bcbcbc;
  background: #f7f7f7;
  border-radius: 0;
  width: auto;
  border: 1px solid transparent;
}
.ant-calendar-disabled-cell .ant-calendar-date:hover {
  background: #f7f7f7;
}
.ant-calendar-disabled-cell.ant-calendar-today .ant-calendar-date {
  position: relative;
  margin-right: 5px;
  padding-left: 5px;
}
.ant-calendar-disabled-cell.ant-calendar-today .ant-calendar-date:before {
  content: " ";
  position: absolute;
  top: -1px;
  left: 5px;
  width: 20px;
  height: 20px;
  border: 1px solid #bcbcbc;
  border-radius: 4px;
}
.ant-calendar-disabled-cell-first-of-row .ant-calendar-date {
  border-top-left-radius: 4px;
  border-bottom-left-radius: 4px;
}
.ant-calendar-disabled-cell-last-of-row .ant-calendar-date {
  border-top-right-radius: 4px;
  border-bottom-right-radius: 4px;
}
.ant-calendar-footer {
  border-top: 1px solid #e9e9e9;
  line-height: 38px;
  padding: 0 12px;
}
.ant-calendar-footer:empty {
  border-top: 0;
}
.ant-calendar-footer-btn {
  text-align: center;
  display: block;
}
.ant-calendar-footer-extra + .ant-calendar-footer-btn {
  border-top: 1px solid #e9e9e9;
  margin: 0 -12px;
  padding: 0 12px;
}
.ant-calendar .ant-calendar-today-btn,
.ant-calendar .ant-calendar-clear-btn {
  display: inline-block;
  text-align: center;
  margin: 0 0 0 8px;
}
.ant-calendar .ant-calendar-today-btn-disabled,
.ant-calendar .ant-calendar-clear-btn-disabled {
  color: rgba(0, 0, 0, 0.25);
  cursor: not-allowed;
}
.ant-calendar .ant-calendar-today-btn:only-child,
.ant-calendar .ant-calendar-clear-btn:only-child {
  margin: 0;
}
.ant-calendar .ant-calendar-clear-btn {
  display: none;
  position: absolute;
  right: 5px;
  text-indent: -76px;
  overflow: hidden;
  width: 20px;
  height: 20px;
  text-align: center;
  line-height: 20px;
  top: 7px;
  margin: 0;
}
.ant-calendar .ant-calendar-clear-btn:after {
  font-family: 'anticon';
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  content: "\\e62e";
  font-size: 12px;
  color: rgba(0, 0, 0, 0.25);
  display: inline-block;
  line-height: 1;
  width: 20px;
  text-indent: 43px;
  transition: color 0.3s ease;
}
.ant-calendar .ant-calendar-clear-btn:hover:after {
  color: rgba(0, 0, 0, 0.43);
}
.ant-calendar .ant-calendar-ok-btn {
  display: inline-block;
  margin-bottom: 0;
  font-weight: 500;
  text-align: center;
  touch-action: manipulation;
  cursor: pointer;
  background-image: none;
  border: 1px solid transparent;
  white-space: nowrap;
  line-height: 1.15;
  padding: 0 15px;
  height: 28px;
  user-select: none;
  transition: all 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
  position: relative;
  color: #fff;
  background-color: #3FCE9E;
  border-color: #3FCE9E;
  padding: 0 7px;
  font-size: 12px;
  border-radius: 4px;
  height: 22px;
  line-height: 1.5;
}
.ant-calendar .ant-calendar-ok-btn > .anticon {
  line-height: 1;
}
.ant-calendar .ant-calendar-ok-btn,
.ant-calendar .ant-calendar-ok-btn:active,
.ant-calendar .ant-calendar-ok-btn:focus {
  outline: 0;
}
.ant-calendar .ant-calendar-ok-btn:not([disabled]):hover {
  text-decoration: none;
}
.ant-calendar .ant-calendar-ok-btn:not([disabled]):active {
  outline: 0;
  transition: none;
}
.ant-calendar .ant-calendar-ok-btn.disabled,
.ant-calendar .ant-calendar-ok-btn[disabled] {
  cursor: not-allowed;
}
.ant-calendar .ant-calendar-ok-btn.disabled > *,
.ant-calendar .ant-calendar-ok-btn[disabled] > * {
  pointer-events: none;
}
.ant-calendar .ant-calendar-ok-btn-lg {
  padding: 0 15px;
  font-size: 14px;
  border-radius: 4px;
  height: 32px;
}
.ant-calendar .ant-calendar-ok-btn-sm {
  padding: 0 7px;
  font-size: 12px;
  border-radius: 4px;
  height: 22px;
}
.ant-calendar .ant-calendar-ok-btn > a:only-child {
  color: currentColor;
}
.ant-calendar .ant-calendar-ok-btn > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-calendar .ant-calendar-ok-btn:hover,
.ant-calendar .ant-calendar-ok-btn:focus {
  color: #fff;
  background-color: #6ddab5;
  border-color: #6ddab5;
}
.ant-calendar .ant-calendar-ok-btn:hover > a:only-child,
.ant-calendar .ant-calendar-ok-btn:focus > a:only-child {
  color: currentColor;
}
.ant-calendar .ant-calendar-ok-btn:hover > a:only-child:after,
.ant-calendar .ant-calendar-ok-btn:focus > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-calendar .ant-calendar-ok-btn:active,
.ant-calendar .ant-calendar-ok-btn.active {
  color: #fff;
  background-color: #36b38c;
  border-color: #36b38c;
}
.ant-calendar .ant-calendar-ok-btn:active > a:only-child,
.ant-calendar .ant-calendar-ok-btn.active > a:only-child {
  color: currentColor;
}
.ant-calendar .ant-calendar-ok-btn:active > a:only-child:after,
.ant-calendar .ant-calendar-ok-btn.active > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-calendar .ant-calendar-ok-btn.disabled,
.ant-calendar .ant-calendar-ok-btn[disabled],
.ant-calendar .ant-calendar-ok-btn.disabled:hover,
.ant-calendar .ant-calendar-ok-btn[disabled]:hover,
.ant-calendar .ant-calendar-ok-btn.disabled:focus,
.ant-calendar .ant-calendar-ok-btn[disabled]:focus,
.ant-calendar .ant-calendar-ok-btn.disabled:active,
.ant-calendar .ant-calendar-ok-btn[disabled]:active,
.ant-calendar .ant-calendar-ok-btn.disabled.active,
.ant-calendar .ant-calendar-ok-btn[disabled].active {
  color: rgba(0, 0, 0, 0.25);
  background-color: #f7f7f7;
  border-color: #d9d9d9;
}
.ant-calendar .ant-calendar-ok-btn.disabled > a:only-child,
.ant-calendar .ant-calendar-ok-btn[disabled] > a:only-child,
.ant-calendar .ant-calendar-ok-btn.disabled:hover > a:only-child,
.ant-calendar .ant-calendar-ok-btn[disabled]:hover > a:only-child,
.ant-calendar .ant-calendar-ok-btn.disabled:focus > a:only-child,
.ant-calendar .ant-calendar-ok-btn[disabled]:focus > a:only-child,
.ant-calendar .ant-calendar-ok-btn.disabled:active > a:only-child,
.ant-calendar .ant-calendar-ok-btn[disabled]:active > a:only-child,
.ant-calendar .ant-calendar-ok-btn.disabled.active > a:only-child,
.ant-calendar .ant-calendar-ok-btn[disabled].active > a:only-child {
  color: currentColor;
}
.ant-calendar .ant-calendar-ok-btn.disabled > a:only-child:after,
.ant-calendar .ant-calendar-ok-btn[disabled] > a:only-child:after,
.ant-calendar .ant-calendar-ok-btn.disabled:hover > a:only-child:after,
.ant-calendar .ant-calendar-ok-btn[disabled]:hover > a:only-child:after,
.ant-calendar .ant-calendar-ok-btn.disabled:focus > a:only-child:after,
.ant-calendar .ant-calendar-ok-btn[disabled]:focus > a:only-child:after,
.ant-calendar .ant-calendar-ok-btn.disabled:active > a:only-child:after,
.ant-calendar .ant-calendar-ok-btn[disabled]:active > a:only-child:after,
.ant-calendar .ant-calendar-ok-btn.disabled.active > a:only-child:after,
.ant-calendar .ant-calendar-ok-btn[disabled].active > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-calendar .ant-calendar-ok-btn-disabled {
  color: rgba(0, 0, 0, 0.25);
  background-color: #f7f7f7;
  border-color: #d9d9d9;
  cursor: not-allowed;
}
.ant-calendar .ant-calendar-ok-btn-disabled > a:only-child {
  color: currentColor;
}
.ant-calendar .ant-calendar-ok-btn-disabled > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-calendar .ant-calendar-ok-btn-disabled:hover {
  color: rgba(0, 0, 0, 0.25);
  background-color: #f7f7f7;
  border-color: #d9d9d9;
}
.ant-calendar .ant-calendar-ok-btn-disabled:hover > a:only-child {
  color: currentColor;
}
.ant-calendar .ant-calendar-ok-btn-disabled:hover > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-calendar-time-picker {
  position: absolute;
  width: 100%;
  top: 34px;
  background-color: #fff;
}
.ant-calendar-time-picker-panel {
  z-index: 1050;
  position: absolute;
  width: 100%;
}
.ant-calendar-time-picker-inner {
  display: inline-block;
  position: relative;
  outline: none;
  list-style: none;
  font-size: 12px;
  text-align: left;
  background-color: #fff;
  background-clip: padding-box;
  line-height: 1.5;
  overflow: hidden;
  width: 100%;
}
.ant-calendar-time-picker-combobox {
  width: 100%;
}
.ant-calendar-time-picker-column-1,
.ant-calendar-time-picker-column-1 .ant-calendar-time-picker-select {
  width: 100%;
}
.ant-calendar-time-picker-column-2 .ant-calendar-time-picker-select {
  width: 50%;
}
.ant-calendar-time-picker-column-3 .ant-calendar-time-picker-select {
  width: 33.33%;
}
.ant-calendar-time-picker-column-4 .ant-calendar-time-picker-select {
  width: 25%;
}
.ant-calendar-time-picker-input-wrap {
  display: none;
}
.ant-calendar-time-picker-select {
  float: left;
  font-size: 12px;
  border-right: 1px solid #e9e9e9;
  box-sizing: border-box;
  overflow: hidden;
  position: relative;
  height: 206px;
}
.ant-calendar-time-picker-select:hover {
  overflow-y: auto;
}
.ant-calendar-time-picker-select:first-child {
  border-left: 0;
  margin-left: 0;
}
.ant-calendar-time-picker-select:last-child {
  border-right: 0;
}
.ant-calendar-time-picker-select ul {
  list-style: none;
  box-sizing: border-box;
  margin: 0;
  padding: 0;
  width: 100%;
  max-height: 206px;
}
.ant-calendar-time-picker-select li {
  text-align: center;
  list-style: none;
  box-sizing: content-box;
  margin: 0;
  width: 100%;
  height: 24px;
  line-height: 24px;
  cursor: pointer;
  user-select: none;
  transition: background 0.3s ease;
}
.ant-calendar-time-picker-select li:last-child:after {
  content: '';
  height: 182px;
  display: block;
}
.ant-calendar-time-picker-select li:hover {
  background: #f0fbf7;
}
li.ant-calendar-time-picker-select-option-selected {
  background: #f7f7f7;
  font-weight: bold;
}
li.ant-calendar-time-picker-select-option-disabled {
  color: rgba(0, 0, 0, 0.25);
}
li.ant-calendar-time-picker-select-option-disabled:hover {
  background: transparent;
  cursor: not-allowed;
}
.ant-calendar-time .ant-calendar-day-select {
  padding: 0 2px;
  font-weight: bold;
  display: inline-block;
  color: rgba(0, 0, 0, 0.65);
  line-height: 34px;
}
.ant-calendar-time .ant-calendar-footer {
  position: relative;
  height: auto;
  line-height: auto;
}
.ant-calendar-time .ant-calendar-footer-btn {
  text-align: right;
}
.ant-calendar-time .ant-calendar-footer .ant-calendar-today-btn {
  float: left;
  margin: 0;
}
.ant-calendar-time .ant-calendar-footer .ant-calendar-time-picker-btn {
  display: inline-block;
  margin-right: 8px;
}
.ant-calendar-time .ant-calendar-footer .ant-calendar-time-picker-btn-disabled {
  color: rgba(0, 0, 0, 0.25);
}
.ant-calendar-time-picker {
  position: absolute;
  width: 100%;
  top: 34px;
  background-color: #fff;
}
.ant-calendar-time-picker-panel {
  z-index: 1050;
  position: absolute;
  width: 100%;
}
.ant-calendar-time-picker-inner {
  display: inline-block;
  position: relative;
  outline: none;
  list-style: none;
  font-size: 12px;
  text-align: left;
  background-color: #fff;
  background-clip: padding-box;
  line-height: 1.5;
  overflow: hidden;
  width: 100%;
}
.ant-calendar-time-picker-combobox {
  width: 100%;
}
.ant-calendar-time-picker-column-1,
.ant-calendar-time-picker-column-1 .ant-calendar-time-picker-select {
  width: 100%;
}
.ant-calendar-time-picker-column-2 .ant-calendar-time-picker-select {
  width: 50%;
}
.ant-calendar-time-picker-column-3 .ant-calendar-time-picker-select {
  width: 33.33%;
}
.ant-calendar-time-picker-column-4 .ant-calendar-time-picker-select {
  width: 25%;
}
.ant-calendar-time-picker-input-wrap {
  display: none;
}
.ant-calendar-time-picker-select {
  float: left;
  font-size: 12px;
  border-right: 1px solid #e9e9e9;
  box-sizing: border-box;
  overflow: hidden;
  position: relative;
  height: 206px;
}
.ant-calendar-time-picker-select:hover {
  overflow-y: auto;
}
.ant-calendar-time-picker-select:first-child {
  border-left: 0;
  margin-left: 0;
}
.ant-calendar-time-picker-select:last-child {
  border-right: 0;
}
.ant-calendar-time-picker-select ul {
  list-style: none;
  box-sizing: border-box;
  margin: 0;
  padding: 0;
  width: 100%;
  max-height: 206px;
}
.ant-calendar-time-picker-select li {
  text-align: center;
  list-style: none;
  box-sizing: content-box;
  margin: 0;
  width: 100%;
  height: 24px;
  line-height: 24px;
  cursor: pointer;
  user-select: none;
  transition: background 0.3s ease;
}
.ant-calendar-time-picker-select li:last-child:after {
  content: '';
  height: 182px;
  display: block;
}
.ant-calendar-time-picker-select li:hover {
  background: #f0fbf7;
}
li.ant-calendar-time-picker-select-option-selected {
  background: #f7f7f7;
  font-weight: bold;
}
li.ant-calendar-time-picker-select-option-disabled {
  color: rgba(0, 0, 0, 0.25);
}
li.ant-calendar-time-picker-select-option-disabled:hover {
  background: transparent;
  cursor: not-allowed;
}
.ant-calendar-time .ant-calendar-day-select {
  padding: 0 2px;
  font-weight: bold;
  display: inline-block;
  color: rgba(0, 0, 0, 0.65);
  line-height: 34px;
}
.ant-calendar-time .ant-calendar-footer {
  position: relative;
  height: auto;
  line-height: auto;
}
.ant-calendar-time .ant-calendar-footer-btn {
  text-align: right;
}
.ant-calendar-time .ant-calendar-footer .ant-calendar-today-btn {
  float: left;
  margin: 0;
}
.ant-calendar-time .ant-calendar-footer .ant-calendar-time-picker-btn {
  display: inline-block;
  margin-right: 8px;
}
.ant-calendar-time .ant-calendar-footer .ant-calendar-time-picker-btn-disabled {
  color: rgba(0, 0, 0, 0.25);
}
.ant-calendar-month-panel {
  position: absolute;
  top: 1px;
  right: 0;
  bottom: 0;
  left: 0;
  z-index: 10;
  border-radius: 4px;
  background: #fff;
  outline: none;
}
.ant-calendar-month-panel > div {
  height: 100%;
}
.ant-calendar-month-panel-hidden {
  display: none;
}
.ant-calendar-month-panel-header {
  height: 34px;
  line-height: 34px;
  text-align: center;
  user-select: none;
  border-bottom: 1px solid #e9e9e9;
}
.ant-calendar-month-panel-header a:hover {
  color: #6ddab5;
}
.ant-calendar-month-panel-header .ant-calendar-month-panel-century-select,
.ant-calendar-month-panel-header .ant-calendar-month-panel-decade-select,
.ant-calendar-month-panel-header .ant-calendar-month-panel-year-select,
.ant-calendar-month-panel-header .ant-calendar-month-panel-month-select {
  padding: 0 2px;
  font-weight: bold;
  display: inline-block;
  color: rgba(0, 0, 0, 0.65);
  line-height: 34px;
}
.ant-calendar-month-panel-header .ant-calendar-month-panel-century-select-arrow,
.ant-calendar-month-panel-header .ant-calendar-month-panel-decade-select-arrow,
.ant-calendar-month-panel-header .ant-calendar-month-panel-year-select-arrow,
.ant-calendar-month-panel-header .ant-calendar-month-panel-month-select-arrow {
  display: none;
}
.ant-calendar-month-panel-header .ant-calendar-month-panel-prev-century-btn,
.ant-calendar-month-panel-header .ant-calendar-month-panel-next-century-btn,
.ant-calendar-month-panel-header .ant-calendar-month-panel-prev-decade-btn,
.ant-calendar-month-panel-header .ant-calendar-month-panel-next-decade-btn,
.ant-calendar-month-panel-header .ant-calendar-month-panel-prev-month-btn,
.ant-calendar-month-panel-header .ant-calendar-month-panel-next-month-btn,
.ant-calendar-month-panel-header .ant-calendar-month-panel-prev-year-btn,
.ant-calendar-month-panel-header .ant-calendar-month-panel-next-year-btn {
  position: absolute;
  top: 0;
  color: rgba(0, 0, 0, 0.43);
  font-family: Arial, "Hiragino Sans GB", "Microsoft Yahei", "Microsoft Sans Serif", sans-serif;
  padding: 0 5px;
  font-size: 16px;
  display: inline-block;
  line-height: 34px;
}
.ant-calendar-month-panel-header .ant-calendar-month-panel-prev-century-btn,
.ant-calendar-month-panel-header .ant-calendar-month-panel-prev-decade-btn,
.ant-calendar-month-panel-header .ant-calendar-month-panel-prev-year-btn {
  left: 7px;
}
.ant-calendar-month-panel-header .ant-calendar-month-panel-prev-century-btn:after,
.ant-calendar-month-panel-header .ant-calendar-month-panel-prev-decade-btn:after,
.ant-calendar-month-panel-header .ant-calendar-month-panel-prev-year-btn:after {
  content: '«';
}
.ant-calendar-month-panel-header .ant-calendar-month-panel-next-century-btn,
.ant-calendar-month-panel-header .ant-calendar-month-panel-next-decade-btn,
.ant-calendar-month-panel-header .ant-calendar-month-panel-next-year-btn {
  right: 7px;
}
.ant-calendar-month-panel-header .ant-calendar-month-panel-next-century-btn:after,
.ant-calendar-month-panel-header .ant-calendar-month-panel-next-decade-btn:after,
.ant-calendar-month-panel-header .ant-calendar-month-panel-next-year-btn:after {
  content: '»';
}
.ant-calendar-month-panel-header .ant-calendar-month-panel-prev-month-btn {
  left: 29px;
}
.ant-calendar-month-panel-header .ant-calendar-month-panel-prev-month-btn:after {
  content: '‹';
}
.ant-calendar-month-panel-header .ant-calendar-month-panel-next-month-btn {
  right: 29px;
}
.ant-calendar-month-panel-header .ant-calendar-month-panel-next-month-btn:after {
  content: '›';
}
.ant-calendar-month-panel-body {
  height: calc(100% - 34px);
}
.ant-calendar-month-panel-table {
  table-layout: fixed;
  width: 100%;
  height: 100%;
  border-collapse: separate;
}
.ant-calendar-month-panel-selected-cell .ant-calendar-month-panel-month {
  background: #3FCE9E;
  color: #fff;
}
.ant-calendar-month-panel-selected-cell .ant-calendar-month-panel-month:hover {
  background: #3FCE9E;
  color: #fff;
}
.ant-calendar-month-panel-cell {
  text-align: center;
}
.ant-calendar-month-panel-cell-disabled .ant-calendar-month-panel-month,
.ant-calendar-month-panel-cell-disabled .ant-calendar-month-panel-month:hover {
  cursor: not-allowed;
  color: #bcbcbc;
  background: #f7f7f7;
}
.ant-calendar-month-panel-month {
  display: inline-block;
  margin: 0 auto;
  color: rgba(0, 0, 0, 0.65);
  background: transparent;
  text-align: center;
  height: 24px;
  line-height: 24px;
  padding: 0 6px;
  border-radius: 4px;
  transition: background 0.3s ease;
}
.ant-calendar-month-panel-month:hover {
  background: #f0fbf7;
  cursor: pointer;
}
.ant-calendar-year-panel {
  position: absolute;
  top: 1px;
  right: 0;
  bottom: 0;
  left: 0;
  z-index: 10;
  border-radius: 4px;
  background: #fff;
  outline: none;
}
.ant-calendar-year-panel > div {
  height: 100%;
}
.ant-calendar-year-panel-hidden {
  display: none;
}
.ant-calendar-year-panel-header {
  height: 34px;
  line-height: 34px;
  text-align: center;
  user-select: none;
  border-bottom: 1px solid #e9e9e9;
}
.ant-calendar-year-panel-header a:hover {
  color: #6ddab5;
}
.ant-calendar-year-panel-header .ant-calendar-year-panel-century-select,
.ant-calendar-year-panel-header .ant-calendar-year-panel-decade-select,
.ant-calendar-year-panel-header .ant-calendar-year-panel-year-select,
.ant-calendar-year-panel-header .ant-calendar-year-panel-month-select {
  padding: 0 2px;
  font-weight: bold;
  display: inline-block;
  color: rgba(0, 0, 0, 0.65);
  line-height: 34px;
}
.ant-calendar-year-panel-header .ant-calendar-year-panel-century-select-arrow,
.ant-calendar-year-panel-header .ant-calendar-year-panel-decade-select-arrow,
.ant-calendar-year-panel-header .ant-calendar-year-panel-year-select-arrow,
.ant-calendar-year-panel-header .ant-calendar-year-panel-month-select-arrow {
  display: none;
}
.ant-calendar-year-panel-header .ant-calendar-year-panel-prev-century-btn,
.ant-calendar-year-panel-header .ant-calendar-year-panel-next-century-btn,
.ant-calendar-year-panel-header .ant-calendar-year-panel-prev-decade-btn,
.ant-calendar-year-panel-header .ant-calendar-year-panel-next-decade-btn,
.ant-calendar-year-panel-header .ant-calendar-year-panel-prev-month-btn,
.ant-calendar-year-panel-header .ant-calendar-year-panel-next-month-btn,
.ant-calendar-year-panel-header .ant-calendar-year-panel-prev-year-btn,
.ant-calendar-year-panel-header .ant-calendar-year-panel-next-year-btn {
  position: absolute;
  top: 0;
  color: rgba(0, 0, 0, 0.43);
  font-family: Arial, "Hiragino Sans GB", "Microsoft Yahei", "Microsoft Sans Serif", sans-serif;
  padding: 0 5px;
  font-size: 16px;
  display: inline-block;
  line-height: 34px;
}
.ant-calendar-year-panel-header .ant-calendar-year-panel-prev-century-btn,
.ant-calendar-year-panel-header .ant-calendar-year-panel-prev-decade-btn,
.ant-calendar-year-panel-header .ant-calendar-year-panel-prev-year-btn {
  left: 7px;
}
.ant-calendar-year-panel-header .ant-calendar-year-panel-prev-century-btn:after,
.ant-calendar-year-panel-header .ant-calendar-year-panel-prev-decade-btn:after,
.ant-calendar-year-panel-header .ant-calendar-year-panel-prev-year-btn:after {
  content: '«';
}
.ant-calendar-year-panel-header .ant-calendar-year-panel-next-century-btn,
.ant-calendar-year-panel-header .ant-calendar-year-panel-next-decade-btn,
.ant-calendar-year-panel-header .ant-calendar-year-panel-next-year-btn {
  right: 7px;
}
.ant-calendar-year-panel-header .ant-calendar-year-panel-next-century-btn:after,
.ant-calendar-year-panel-header .ant-calendar-year-panel-next-decade-btn:after,
.ant-calendar-year-panel-header .ant-calendar-year-panel-next-year-btn:after {
  content: '»';
}
.ant-calendar-year-panel-header .ant-calendar-year-panel-prev-month-btn {
  left: 29px;
}
.ant-calendar-year-panel-header .ant-calendar-year-panel-prev-month-btn:after {
  content: '‹';
}
.ant-calendar-year-panel-header .ant-calendar-year-panel-next-month-btn {
  right: 29px;
}
.ant-calendar-year-panel-header .ant-calendar-year-panel-next-month-btn:after {
  content: '›';
}
.ant-calendar-year-panel-body {
  height: calc(100% - 34px);
}
.ant-calendar-year-panel-table {
  table-layout: fixed;
  width: 100%;
  height: 100%;
  border-collapse: separate;
}
.ant-calendar-year-panel-cell {
  text-align: center;
}
.ant-calendar-year-panel-year {
  display: inline-block;
  margin: 0 auto;
  color: rgba(0, 0, 0, 0.65);
  background: transparent;
  text-align: center;
  height: 24px;
  line-height: 24px;
  padding: 0 6px;
  border-radius: 4px;
  transition: background 0.3s ease;
}
.ant-calendar-year-panel-year:hover {
  background: #f0fbf7;
  cursor: pointer;
}
.ant-calendar-year-panel-selected-cell .ant-calendar-year-panel-year {
  background: #3FCE9E;
  color: #fff;
}
.ant-calendar-year-panel-selected-cell .ant-calendar-year-panel-year:hover {
  background: #3FCE9E;
  color: #fff;
}
.ant-calendar-year-panel-last-decade-cell .ant-calendar-year-panel-year,
.ant-calendar-year-panel-next-decade-cell .ant-calendar-year-panel-year {
  user-select: none;
  color: rgba(0, 0, 0, 0.25);
}
.ant-calendar-decade-panel {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  z-index: 10;
  background: #fff;
  border-radius: 4px;
  outline: none;
}
.ant-calendar-decade-panel-hidden {
  display: none;
}
.ant-calendar-decade-panel-header {
  height: 34px;
  line-height: 34px;
  text-align: center;
  user-select: none;
  border-bottom: 1px solid #e9e9e9;
}
.ant-calendar-decade-panel-header a:hover {
  color: #6ddab5;
}
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-century-select,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-decade-select,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-year-select,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-month-select {
  padding: 0 2px;
  font-weight: bold;
  display: inline-block;
  color: rgba(0, 0, 0, 0.65);
  line-height: 34px;
}
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-century-select-arrow,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-decade-select-arrow,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-year-select-arrow,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-month-select-arrow {
  display: none;
}
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-prev-century-btn,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-next-century-btn,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-prev-decade-btn,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-next-decade-btn,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-prev-month-btn,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-next-month-btn,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-prev-year-btn,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-next-year-btn {
  position: absolute;
  top: 0;
  color: rgba(0, 0, 0, 0.43);
  font-family: Arial, "Hiragino Sans GB", "Microsoft Yahei", "Microsoft Sans Serif", sans-serif;
  padding: 0 5px;
  font-size: 16px;
  display: inline-block;
  line-height: 34px;
}
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-prev-century-btn,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-prev-decade-btn,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-prev-year-btn {
  left: 7px;
}
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-prev-century-btn:after,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-prev-decade-btn:after,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-prev-year-btn:after {
  content: '«';
}
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-next-century-btn,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-next-decade-btn,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-next-year-btn {
  right: 7px;
}
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-next-century-btn:after,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-next-decade-btn:after,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-next-year-btn:after {
  content: '»';
}
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-prev-month-btn {
  left: 29px;
}
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-prev-month-btn:after {
  content: '‹';
}
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-next-month-btn {
  right: 29px;
}
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-next-month-btn:after {
  content: '›';
}
.ant-calendar-decade-panel-body {
  height: calc(100% - 34px);
}
.ant-calendar-decade-panel-table {
  table-layout: fixed;
  width: 100%;
  height: 100%;
  border-collapse: separate;
}
.ant-calendar-decade-panel-cell {
  text-align: center;
  white-space: nowrap;
}
.ant-calendar-decade-panel-decade {
  display: inline-block;
  margin: 0 auto;
  color: rgba(0, 0, 0, 0.65);
  background: transparent;
  text-align: center;
  height: 24px;
  line-height: 24px;
  padding: 0 6px;
  border-radius: 4px;
  transition: background 0.3s ease;
}
.ant-calendar-decade-panel-decade:hover {
  background: #f0fbf7;
  cursor: pointer;
}
.ant-calendar-decade-panel-selected-cell .ant-calendar-decade-panel-decade {
  background: #3FCE9E;
  color: #fff;
}
.ant-calendar-decade-panel-selected-cell .ant-calendar-decade-panel-decade:hover {
  background: #3FCE9E;
  color: #fff;
}
.ant-calendar-decade-panel-last-century-cell .ant-calendar-decade-panel-decade,
.ant-calendar-decade-panel-next-century-cell .ant-calendar-decade-panel-decade {
  user-select: none;
  color: rgba(0, 0, 0, 0.25);
}
.ant-calendar-month .ant-calendar-month-panel,
.ant-calendar-month .ant-calendar-year-panel {
  top: 0;
  height: 248px;
}
`,
                    `nz-datepicker {
  display: inline-block;
  position: relative;
}
/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-calendar-picker-container {
  position: absolute;
  z-index: 1050;
}
.ant-calendar-picker-container.slide-up-enter.slide-up-enter-active.ant-calendar-picker-container-placement-topLeft,
.ant-calendar-picker-container.slide-up-enter.slide-up-enter-active.ant-calendar-picker-container-placement-topRight,
.ant-calendar-picker-container.slide-up-appear.slide-up-appear-active.ant-calendar-picker-container-placement-topLeft,
.ant-calendar-picker-container.slide-up-appear.slide-up-appear-active.ant-calendar-picker-container-placement-topRight {
  animation-name: antSlideDownIn;
}
.ant-calendar-picker-container.slide-up-enter.slide-up-enter-active.ant-calendar-picker-container-placement-bottomLeft,
.ant-calendar-picker-container.slide-up-enter.slide-up-enter-active.ant-calendar-picker-container-placement-bottomRight,
.ant-calendar-picker-container.slide-up-appear.slide-up-appear-active.ant-calendar-picker-container-placement-bottomLeft,
.ant-calendar-picker-container.slide-up-appear.slide-up-appear-active.ant-calendar-picker-container-placement-bottomRight {
  animation-name: antSlideUpIn;
}
.ant-calendar-picker-container.slide-up-leave.slide-up-leave-active.ant-calendar-picker-container-placement-topLeft,
.ant-calendar-picker-container.slide-up-leave.slide-up-leave-active.ant-calendar-picker-container-placement-topRight {
  animation-name: antSlideDownOut;
}
.ant-calendar-picker-container.slide-up-leave.slide-up-leave-active.ant-calendar-picker-container-placement-bottomLeft,
.ant-calendar-picker-container.slide-up-leave.slide-up-leave-active.ant-calendar-picker-container-placement-bottomRight {
  animation-name: antSlideUpOut;
}
.ant-calendar-picker {
  position: relative;
  display: inline-block;
  outline: none;
  font-size: 12px;
  transition: opacity 0.3s;
}
.ant-calendar-picker-input {
  outline: none;
  display: block;
}
.ant-calendar-picker:hover .ant-calendar-picker-input:not(.ant-input-disabled) {
  border-color: #3FCE9E;
}
.ant-calendar-picker-clear,
.ant-calendar-picker-icon {
  position: absolute;
  width: 14px;
  height: 14px;
  right: 8px;
  top: 50%;
  margin-top: -7px;
  line-height: 14px;
  font-size: 12px;
  transition: all .3s;
  user-select: none;
}
.ant-calendar-picker-clear {
  opacity: 0;
  z-index: 1;
  color: rgba(0, 0, 0, 0.25);
  background: #fff;
  pointer-events: none;
  cursor: pointer;
}
.ant-calendar-picker-clear:hover {
  color: rgba(0, 0, 0, 0.43);
}
.ant-calendar-picker:hover .ant-calendar-picker-clear {
  opacity: 1;
  pointer-events: auto;
}
.ant-calendar-picker-icon {
  color: rgba(0, 0, 0, 0.43);
}
.ant-calendar-picker-icon:after {
  content: "\\e6bb";
  font-family: "anticon";
  font-size: 12px;
  color: rgba(0, 0, 0, 0.43);
  display: inline-block;
  line-height: 1;
}
.ant-calendar {
  position: relative;
  outline: none;
  width: 231px;
  border: 1px solid #fff;
  list-style: none;
  font-size: 12px;
  text-align: left;
  background-color: #fff;
  border-radius: 4px;
  box-shadow: 0 1px 6px rgba(0, 0, 0, 0.2);
  background-clip: padding-box;
  line-height: 1.5;
}
.ant-calendar-input-wrap {
  height: 34px;
  padding: 6px;
  border-bottom: 1px solid #e9e9e9;
}
.ant-calendar-input {
  border: 0;
  width: 100%;
  cursor: auto;
  outline: 0;
  height: 22px;
  color: rgba(0, 0, 0, 0.65);
  background: #fff;
}
.ant-calendar-input::-moz-placeholder {
  color: rgba(0, 0, 0, 0.25);
  opacity: 1;
}
.ant-calendar-input:-ms-input-placeholder {
  color: rgba(0, 0, 0, 0.25);
}
.ant-calendar-input::-webkit-input-placeholder {
  color: rgba(0, 0, 0, 0.25);
}
.ant-calendar-week-number {
  width: 286px;
}
.ant-calendar-week-number-cell {
  text-align: center;
}
.ant-calendar-header {
  height: 34px;
  line-height: 34px;
  text-align: center;
  user-select: none;
  border-bottom: 1px solid #e9e9e9;
}
.ant-calendar-header a:hover {
  color: #6ddab5;
}
.ant-calendar-header .ant-calendar-century-select,
.ant-calendar-header .ant-calendar-decade-select,
.ant-calendar-header .ant-calendar-year-select,
.ant-calendar-header .ant-calendar-month-select {
  padding: 0 2px;
  font-weight: bold;
  display: inline-block;
  color: rgba(0, 0, 0, 0.65);
  line-height: 34px;
}
.ant-calendar-header .ant-calendar-century-select-arrow,
.ant-calendar-header .ant-calendar-decade-select-arrow,
.ant-calendar-header .ant-calendar-year-select-arrow,
.ant-calendar-header .ant-calendar-month-select-arrow {
  display: none;
}
.ant-calendar-header .ant-calendar-prev-century-btn,
.ant-calendar-header .ant-calendar-next-century-btn,
.ant-calendar-header .ant-calendar-prev-decade-btn,
.ant-calendar-header .ant-calendar-next-decade-btn,
.ant-calendar-header .ant-calendar-prev-month-btn,
.ant-calendar-header .ant-calendar-next-month-btn,
.ant-calendar-header .ant-calendar-prev-year-btn,
.ant-calendar-header .ant-calendar-next-year-btn {
  position: absolute;
  top: 0;
  color: rgba(0, 0, 0, 0.43);
  font-family: Arial, "Hiragino Sans GB", "Microsoft Yahei", "Microsoft Sans Serif", sans-serif;
  padding: 0 5px;
  font-size: 16px;
  display: inline-block;
  line-height: 34px;
}
.ant-calendar-header .ant-calendar-prev-century-btn,
.ant-calendar-header .ant-calendar-prev-decade-btn,
.ant-calendar-header .ant-calendar-prev-year-btn {
  left: 7px;
}
.ant-calendar-header .ant-calendar-prev-century-btn:after,
.ant-calendar-header .ant-calendar-prev-decade-btn:after,
.ant-calendar-header .ant-calendar-prev-year-btn:after {
  content: '«';
}
.ant-calendar-header .ant-calendar-next-century-btn,
.ant-calendar-header .ant-calendar-next-decade-btn,
.ant-calendar-header .ant-calendar-next-year-btn {
  right: 7px;
}
.ant-calendar-header .ant-calendar-next-century-btn:after,
.ant-calendar-header .ant-calendar-next-decade-btn:after,
.ant-calendar-header .ant-calendar-next-year-btn:after {
  content: '»';
}
.ant-calendar-header .ant-calendar-prev-month-btn {
  left: 29px;
}
.ant-calendar-header .ant-calendar-prev-month-btn:after {
  content: '‹';
}
.ant-calendar-header .ant-calendar-next-month-btn {
  right: 29px;
}
.ant-calendar-header .ant-calendar-next-month-btn:after {
  content: '›';
}
.ant-calendar-body {
  padding: 4px 8px;
}
.ant-calendar table {
  border-collapse: collapse;
  max-width: 100%;
  background-color: transparent;
  width: 100%;
}
.ant-calendar table,
.ant-calendar th,
.ant-calendar td {
  border: 0;
}
.ant-calendar-calendar-table {
  border-spacing: 0;
  margin-bottom: 0;
}
.ant-calendar-column-header {
  line-height: 18px;
  width: 33px;
  padding: 6px 0;
  text-align: center;
}
.ant-calendar-column-header .ant-calendar-column-header-inner {
  display: block;
  font-weight: normal;
}
.ant-calendar-week-number-header .ant-calendar-column-header-inner {
  display: none;
}
.ant-calendar-cell {
  padding: 4px 0;
}
.ant-calendar-date {
  display: block;
  margin: 0 auto;
  color: rgba(0, 0, 0, 0.65);
  border-radius: 2px;
  width: 20px;
  height: 20px;
  line-height: 18px;
  border: 1px solid transparent;
  padding: 0;
  background: transparent;
  text-align: center;
  transition: background 0.3s ease;
}
.ant-calendar-date-panel {
  position: relative;
}
.ant-calendar-date:hover {
  background: #f0fbf7;
  cursor: pointer;
}
.ant-calendar-date:active {
  color: #fff;
  background: #6ddab5;
}
.ant-calendar-today .ant-calendar-date {
  border-color: #3FCE9E;
  font-weight: bold;
  color: #3FCE9E;
}
.ant-calendar-last-month-cell .ant-calendar-date,
.ant-calendar-next-month-btn-day .ant-calendar-date {
  color: rgba(0, 0, 0, 0.25);
}
.ant-calendar-selected-day .ant-calendar-date {
  background: #3FCE9E;
  color: #fff;
  border: 1px solid transparent;
}
.ant-calendar-selected-day .ant-calendar-date:hover {
  background: #3FCE9E;
}
.ant-calendar-disabled-cell .ant-calendar-date {
  cursor: not-allowed;
  color: #bcbcbc;
  background: #f7f7f7;
  border-radius: 0;
  width: auto;
  border: 1px solid transparent;
}
.ant-calendar-disabled-cell .ant-calendar-date:hover {
  background: #f7f7f7;
}
.ant-calendar-disabled-cell.ant-calendar-today .ant-calendar-date {
  position: relative;
  margin-right: 5px;
  padding-left: 5px;
}
.ant-calendar-disabled-cell.ant-calendar-today .ant-calendar-date:before {
  content: " ";
  position: absolute;
  top: -1px;
  left: 5px;
  width: 20px;
  height: 20px;
  border: 1px solid #bcbcbc;
  border-radius: 4px;
}
.ant-calendar-disabled-cell-first-of-row .ant-calendar-date {
  border-top-left-radius: 4px;
  border-bottom-left-radius: 4px;
}
.ant-calendar-disabled-cell-last-of-row .ant-calendar-date {
  border-top-right-radius: 4px;
  border-bottom-right-radius: 4px;
}
.ant-calendar-footer {
  border-top: 1px solid #e9e9e9;
  line-height: 38px;
  padding: 0 12px;
}
.ant-calendar-footer:empty {
  border-top: 0;
}
.ant-calendar-footer-btn {
  text-align: center;
  display: block;
}
.ant-calendar-footer-extra + .ant-calendar-footer-btn {
  border-top: 1px solid #e9e9e9;
  margin: 0 -12px;
  padding: 0 12px;
}
.ant-calendar .ant-calendar-today-btn,
.ant-calendar .ant-calendar-clear-btn {
  display: inline-block;
  text-align: center;
  margin: 0 0 0 8px;
}
.ant-calendar .ant-calendar-today-btn-disabled,
.ant-calendar .ant-calendar-clear-btn-disabled {
  color: rgba(0, 0, 0, 0.25);
  cursor: not-allowed;
}
.ant-calendar .ant-calendar-today-btn:only-child,
.ant-calendar .ant-calendar-clear-btn:only-child {
  margin: 0;
}
.ant-calendar .ant-calendar-clear-btn {
  display: none;
  position: absolute;
  right: 5px;
  text-indent: -76px;
  overflow: hidden;
  width: 20px;
  height: 20px;
  text-align: center;
  line-height: 20px;
  top: 7px;
  margin: 0;
}
.ant-calendar .ant-calendar-clear-btn:after {
  font-family: 'anticon';
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  content: "\\e62e";
  font-size: 12px;
  color: rgba(0, 0, 0, 0.25);
  display: inline-block;
  line-height: 1;
  width: 20px;
  text-indent: 43px;
  transition: color 0.3s ease;
}
.ant-calendar .ant-calendar-clear-btn:hover:after {
  color: rgba(0, 0, 0, 0.43);
}
.ant-calendar .ant-calendar-ok-btn {
  display: inline-block;
  margin-bottom: 0;
  font-weight: 500;
  text-align: center;
  touch-action: manipulation;
  cursor: pointer;
  background-image: none;
  border: 1px solid transparent;
  white-space: nowrap;
  line-height: 1.15;
  padding: 0 15px;
  height: 28px;
  user-select: none;
  transition: all 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
  position: relative;
  color: #fff;
  background-color: #3FCE9E;
  border-color: #3FCE9E;
  padding: 0 7px;
  font-size: 12px;
  border-radius: 4px;
  height: 22px;
  line-height: 1.5;
}
.ant-calendar .ant-calendar-ok-btn > .anticon {
  line-height: 1;
}
.ant-calendar .ant-calendar-ok-btn,
.ant-calendar .ant-calendar-ok-btn:active,
.ant-calendar .ant-calendar-ok-btn:focus {
  outline: 0;
}
.ant-calendar .ant-calendar-ok-btn:not([disabled]):hover {
  text-decoration: none;
}
.ant-calendar .ant-calendar-ok-btn:not([disabled]):active {
  outline: 0;
  transition: none;
}
.ant-calendar .ant-calendar-ok-btn.disabled,
.ant-calendar .ant-calendar-ok-btn[disabled] {
  cursor: not-allowed;
}
.ant-calendar .ant-calendar-ok-btn.disabled > *,
.ant-calendar .ant-calendar-ok-btn[disabled] > * {
  pointer-events: none;
}
.ant-calendar .ant-calendar-ok-btn-lg {
  padding: 0 15px;
  font-size: 14px;
  border-radius: 4px;
  height: 32px;
}
.ant-calendar .ant-calendar-ok-btn-sm {
  padding: 0 7px;
  font-size: 12px;
  border-radius: 4px;
  height: 22px;
}
.ant-calendar .ant-calendar-ok-btn > a:only-child {
  color: currentColor;
}
.ant-calendar .ant-calendar-ok-btn > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-calendar .ant-calendar-ok-btn:hover,
.ant-calendar .ant-calendar-ok-btn:focus {
  color: #fff;
  background-color: #6ddab5;
  border-color: #6ddab5;
}
.ant-calendar .ant-calendar-ok-btn:hover > a:only-child,
.ant-calendar .ant-calendar-ok-btn:focus > a:only-child {
  color: currentColor;
}
.ant-calendar .ant-calendar-ok-btn:hover > a:only-child:after,
.ant-calendar .ant-calendar-ok-btn:focus > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-calendar .ant-calendar-ok-btn:active,
.ant-calendar .ant-calendar-ok-btn.active {
  color: #fff;
  background-color: #36b38c;
  border-color: #36b38c;
}
.ant-calendar .ant-calendar-ok-btn:active > a:only-child,
.ant-calendar .ant-calendar-ok-btn.active > a:only-child {
  color: currentColor;
}
.ant-calendar .ant-calendar-ok-btn:active > a:only-child:after,
.ant-calendar .ant-calendar-ok-btn.active > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-calendar .ant-calendar-ok-btn.disabled,
.ant-calendar .ant-calendar-ok-btn[disabled],
.ant-calendar .ant-calendar-ok-btn.disabled:hover,
.ant-calendar .ant-calendar-ok-btn[disabled]:hover,
.ant-calendar .ant-calendar-ok-btn.disabled:focus,
.ant-calendar .ant-calendar-ok-btn[disabled]:focus,
.ant-calendar .ant-calendar-ok-btn.disabled:active,
.ant-calendar .ant-calendar-ok-btn[disabled]:active,
.ant-calendar .ant-calendar-ok-btn.disabled.active,
.ant-calendar .ant-calendar-ok-btn[disabled].active {
  color: rgba(0, 0, 0, 0.25);
  background-color: #f7f7f7;
  border-color: #d9d9d9;
}
.ant-calendar .ant-calendar-ok-btn.disabled > a:only-child,
.ant-calendar .ant-calendar-ok-btn[disabled] > a:only-child,
.ant-calendar .ant-calendar-ok-btn.disabled:hover > a:only-child,
.ant-calendar .ant-calendar-ok-btn[disabled]:hover > a:only-child,
.ant-calendar .ant-calendar-ok-btn.disabled:focus > a:only-child,
.ant-calendar .ant-calendar-ok-btn[disabled]:focus > a:only-child,
.ant-calendar .ant-calendar-ok-btn.disabled:active > a:only-child,
.ant-calendar .ant-calendar-ok-btn[disabled]:active > a:only-child,
.ant-calendar .ant-calendar-ok-btn.disabled.active > a:only-child,
.ant-calendar .ant-calendar-ok-btn[disabled].active > a:only-child {
  color: currentColor;
}
.ant-calendar .ant-calendar-ok-btn.disabled > a:only-child:after,
.ant-calendar .ant-calendar-ok-btn[disabled] > a:only-child:after,
.ant-calendar .ant-calendar-ok-btn.disabled:hover > a:only-child:after,
.ant-calendar .ant-calendar-ok-btn[disabled]:hover > a:only-child:after,
.ant-calendar .ant-calendar-ok-btn.disabled:focus > a:only-child:after,
.ant-calendar .ant-calendar-ok-btn[disabled]:focus > a:only-child:after,
.ant-calendar .ant-calendar-ok-btn.disabled:active > a:only-child:after,
.ant-calendar .ant-calendar-ok-btn[disabled]:active > a:only-child:after,
.ant-calendar .ant-calendar-ok-btn.disabled.active > a:only-child:after,
.ant-calendar .ant-calendar-ok-btn[disabled].active > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-calendar .ant-calendar-ok-btn-disabled {
  color: rgba(0, 0, 0, 0.25);
  background-color: #f7f7f7;
  border-color: #d9d9d9;
  cursor: not-allowed;
}
.ant-calendar .ant-calendar-ok-btn-disabled > a:only-child {
  color: currentColor;
}
.ant-calendar .ant-calendar-ok-btn-disabled > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-calendar .ant-calendar-ok-btn-disabled:hover {
  color: rgba(0, 0, 0, 0.25);
  background-color: #f7f7f7;
  border-color: #d9d9d9;
}
.ant-calendar .ant-calendar-ok-btn-disabled:hover > a:only-child {
  color: currentColor;
}
.ant-calendar .ant-calendar-ok-btn-disabled:hover > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-calendar-time-picker {
  position: absolute;
  width: 100%;
  top: 34px;
  background-color: #fff;
}
.ant-calendar-time-picker-panel {
  z-index: 1050;
  position: absolute;
  width: 100%;
}
.ant-calendar-time-picker-inner {
  display: inline-block;
  position: relative;
  outline: none;
  list-style: none;
  font-size: 12px;
  text-align: left;
  background-color: #fff;
  background-clip: padding-box;
  line-height: 1.5;
  overflow: hidden;
  width: 100%;
}
.ant-calendar-time-picker-combobox {
  width: 100%;
}
.ant-calendar-time-picker-column-1,
.ant-calendar-time-picker-column-1 .ant-calendar-time-picker-select {
  width: 100%;
}
.ant-calendar-time-picker-column-2 .ant-calendar-time-picker-select {
  width: 50%;
}
.ant-calendar-time-picker-column-3 .ant-calendar-time-picker-select {
  width: 33.33%;
}
.ant-calendar-time-picker-column-4 .ant-calendar-time-picker-select {
  width: 25%;
}
.ant-calendar-time-picker-input-wrap {
  display: none;
}
.ant-calendar-time-picker-select {
  float: left;
  font-size: 12px;
  border-right: 1px solid #e9e9e9;
  box-sizing: border-box;
  overflow: hidden;
  position: relative;
  height: 206px;
}
.ant-calendar-time-picker-select:hover {
  overflow-y: auto;
}
.ant-calendar-time-picker-select:first-child {
  border-left: 0;
  margin-left: 0;
}
.ant-calendar-time-picker-select:last-child {
  border-right: 0;
}
.ant-calendar-time-picker-select ul {
  list-style: none;
  box-sizing: border-box;
  margin: 0;
  padding: 0;
  width: 100%;
  max-height: 206px;
}
.ant-calendar-time-picker-select li {
  text-align: center;
  list-style: none;
  box-sizing: content-box;
  margin: 0;
  width: 100%;
  height: 24px;
  line-height: 24px;
  cursor: pointer;
  user-select: none;
  transition: background 0.3s ease;
}
.ant-calendar-time-picker-select li:last-child:after {
  content: '';
  height: 182px;
  display: block;
}
.ant-calendar-time-picker-select li:hover {
  background: #f0fbf7;
}
li.ant-calendar-time-picker-select-option-selected {
  background: #f7f7f7;
  font-weight: bold;
}
li.ant-calendar-time-picker-select-option-disabled {
  color: rgba(0, 0, 0, 0.25);
}
li.ant-calendar-time-picker-select-option-disabled:hover {
  background: transparent;
  cursor: not-allowed;
}
.ant-calendar-time .ant-calendar-day-select {
  padding: 0 2px;
  font-weight: bold;
  display: inline-block;
  color: rgba(0, 0, 0, 0.65);
  line-height: 34px;
}
.ant-calendar-time .ant-calendar-footer {
  position: relative;
  height: auto;
  line-height: auto;
}
.ant-calendar-time .ant-calendar-footer-btn {
  text-align: right;
}
.ant-calendar-time .ant-calendar-footer .ant-calendar-today-btn {
  float: left;
  margin: 0;
}
.ant-calendar-time .ant-calendar-footer .ant-calendar-time-picker-btn {
  display: inline-block;
  margin-right: 8px;
}
.ant-calendar-time .ant-calendar-footer .ant-calendar-time-picker-btn-disabled {
  color: rgba(0, 0, 0, 0.25);
}
.ant-calendar-time-picker {
  position: absolute;
  width: 100%;
  top: 34px;
  background-color: #fff;
}
.ant-calendar-time-picker-panel {
  z-index: 1050;
  position: absolute;
  width: 100%;
}
.ant-calendar-time-picker-inner {
  display: inline-block;
  position: relative;
  outline: none;
  list-style: none;
  font-size: 12px;
  text-align: left;
  background-color: #fff;
  background-clip: padding-box;
  line-height: 1.5;
  overflow: hidden;
  width: 100%;
}
.ant-calendar-time-picker-combobox {
  width: 100%;
}
.ant-calendar-time-picker-column-1,
.ant-calendar-time-picker-column-1 .ant-calendar-time-picker-select {
  width: 100%;
}
.ant-calendar-time-picker-column-2 .ant-calendar-time-picker-select {
  width: 50%;
}
.ant-calendar-time-picker-column-3 .ant-calendar-time-picker-select {
  width: 33.33%;
}
.ant-calendar-time-picker-column-4 .ant-calendar-time-picker-select {
  width: 25%;
}
.ant-calendar-time-picker-input-wrap {
  display: none;
}
.ant-calendar-time-picker-select {
  float: left;
  font-size: 12px;
  border-right: 1px solid #e9e9e9;
  box-sizing: border-box;
  overflow: hidden;
  position: relative;
  height: 206px;
}
.ant-calendar-time-picker-select:hover {
  overflow-y: auto;
}
.ant-calendar-time-picker-select:first-child {
  border-left: 0;
  margin-left: 0;
}
.ant-calendar-time-picker-select:last-child {
  border-right: 0;
}
.ant-calendar-time-picker-select ul {
  list-style: none;
  box-sizing: border-box;
  margin: 0;
  padding: 0;
  width: 100%;
  max-height: 206px;
}
.ant-calendar-time-picker-select li {
  text-align: center;
  list-style: none;
  box-sizing: content-box;
  margin: 0;
  width: 100%;
  height: 24px;
  line-height: 24px;
  cursor: pointer;
  user-select: none;
  transition: background 0.3s ease;
}
.ant-calendar-time-picker-select li:last-child:after {
  content: '';
  height: 182px;
  display: block;
}
.ant-calendar-time-picker-select li:hover {
  background: #f0fbf7;
}
li.ant-calendar-time-picker-select-option-selected {
  background: #f7f7f7;
  font-weight: bold;
}
li.ant-calendar-time-picker-select-option-disabled {
  color: rgba(0, 0, 0, 0.25);
}
li.ant-calendar-time-picker-select-option-disabled:hover {
  background: transparent;
  cursor: not-allowed;
}
.ant-calendar-time .ant-calendar-day-select {
  padding: 0 2px;
  font-weight: bold;
  display: inline-block;
  color: rgba(0, 0, 0, 0.65);
  line-height: 34px;
}
.ant-calendar-time .ant-calendar-footer {
  position: relative;
  height: auto;
  line-height: auto;
}
.ant-calendar-time .ant-calendar-footer-btn {
  text-align: right;
}
.ant-calendar-time .ant-calendar-footer .ant-calendar-today-btn {
  float: left;
  margin: 0;
}
.ant-calendar-time .ant-calendar-footer .ant-calendar-time-picker-btn {
  display: inline-block;
  margin-right: 8px;
}
.ant-calendar-time .ant-calendar-footer .ant-calendar-time-picker-btn-disabled {
  color: rgba(0, 0, 0, 0.25);
}
.ant-calendar-month-panel {
  position: absolute;
  top: 1px;
  right: 0;
  bottom: 0;
  left: 0;
  z-index: 10;
  border-radius: 4px;
  background: #fff;
  outline: none;
}
.ant-calendar-month-panel > div {
  height: 100%;
}
.ant-calendar-month-panel-hidden {
  display: none;
}
.ant-calendar-month-panel-header {
  height: 34px;
  line-height: 34px;
  text-align: center;
  user-select: none;
  border-bottom: 1px solid #e9e9e9;
}
.ant-calendar-month-panel-header a:hover {
  color: #6ddab5;
}
.ant-calendar-month-panel-header .ant-calendar-month-panel-century-select,
.ant-calendar-month-panel-header .ant-calendar-month-panel-decade-select,
.ant-calendar-month-panel-header .ant-calendar-month-panel-year-select,
.ant-calendar-month-panel-header .ant-calendar-month-panel-month-select {
  padding: 0 2px;
  font-weight: bold;
  display: inline-block;
  color: rgba(0, 0, 0, 0.65);
  line-height: 34px;
}
.ant-calendar-month-panel-header .ant-calendar-month-panel-century-select-arrow,
.ant-calendar-month-panel-header .ant-calendar-month-panel-decade-select-arrow,
.ant-calendar-month-panel-header .ant-calendar-month-panel-year-select-arrow,
.ant-calendar-month-panel-header .ant-calendar-month-panel-month-select-arrow {
  display: none;
}
.ant-calendar-month-panel-header .ant-calendar-month-panel-prev-century-btn,
.ant-calendar-month-panel-header .ant-calendar-month-panel-next-century-btn,
.ant-calendar-month-panel-header .ant-calendar-month-panel-prev-decade-btn,
.ant-calendar-month-panel-header .ant-calendar-month-panel-next-decade-btn,
.ant-calendar-month-panel-header .ant-calendar-month-panel-prev-month-btn,
.ant-calendar-month-panel-header .ant-calendar-month-panel-next-month-btn,
.ant-calendar-month-panel-header .ant-calendar-month-panel-prev-year-btn,
.ant-calendar-month-panel-header .ant-calendar-month-panel-next-year-btn {
  position: absolute;
  top: 0;
  color: rgba(0, 0, 0, 0.43);
  font-family: Arial, "Hiragino Sans GB", "Microsoft Yahei", "Microsoft Sans Serif", sans-serif;
  padding: 0 5px;
  font-size: 16px;
  display: inline-block;
  line-height: 34px;
}
.ant-calendar-month-panel-header .ant-calendar-month-panel-prev-century-btn,
.ant-calendar-month-panel-header .ant-calendar-month-panel-prev-decade-btn,
.ant-calendar-month-panel-header .ant-calendar-month-panel-prev-year-btn {
  left: 7px;
}
.ant-calendar-month-panel-header .ant-calendar-month-panel-prev-century-btn:after,
.ant-calendar-month-panel-header .ant-calendar-month-panel-prev-decade-btn:after,
.ant-calendar-month-panel-header .ant-calendar-month-panel-prev-year-btn:after {
  content: '«';
}
.ant-calendar-month-panel-header .ant-calendar-month-panel-next-century-btn,
.ant-calendar-month-panel-header .ant-calendar-month-panel-next-decade-btn,
.ant-calendar-month-panel-header .ant-calendar-month-panel-next-year-btn {
  right: 7px;
}
.ant-calendar-month-panel-header .ant-calendar-month-panel-next-century-btn:after,
.ant-calendar-month-panel-header .ant-calendar-month-panel-next-decade-btn:after,
.ant-calendar-month-panel-header .ant-calendar-month-panel-next-year-btn:after {
  content: '»';
}
.ant-calendar-month-panel-header .ant-calendar-month-panel-prev-month-btn {
  left: 29px;
}
.ant-calendar-month-panel-header .ant-calendar-month-panel-prev-month-btn:after {
  content: '‹';
}
.ant-calendar-month-panel-header .ant-calendar-month-panel-next-month-btn {
  right: 29px;
}
.ant-calendar-month-panel-header .ant-calendar-month-panel-next-month-btn:after {
  content: '›';
}
.ant-calendar-month-panel-body {
  height: calc(100% - 34px);
}
.ant-calendar-month-panel-table {
  table-layout: fixed;
  width: 100%;
  height: 100%;
  border-collapse: separate;
}
.ant-calendar-month-panel-selected-cell .ant-calendar-month-panel-month {
  background: #3FCE9E;
  color: #fff;
}
.ant-calendar-month-panel-selected-cell .ant-calendar-month-panel-month:hover {
  background: #3FCE9E;
  color: #fff;
}
.ant-calendar-month-panel-cell {
  text-align: center;
}
.ant-calendar-month-panel-cell-disabled .ant-calendar-month-panel-month,
.ant-calendar-month-panel-cell-disabled .ant-calendar-month-panel-month:hover {
  cursor: not-allowed;
  color: #bcbcbc;
  background: #f7f7f7;
}
.ant-calendar-month-panel-month {
  display: inline-block;
  margin: 0 auto;
  color: rgba(0, 0, 0, 0.65);
  background: transparent;
  text-align: center;
  height: 24px;
  line-height: 24px;
  padding: 0 6px;
  border-radius: 4px;
  transition: background 0.3s ease;
}
.ant-calendar-month-panel-month:hover {
  background: #f0fbf7;
  cursor: pointer;
}
.ant-calendar-year-panel {
  position: absolute;
  top: 1px;
  right: 0;
  bottom: 0;
  left: 0;
  z-index: 10;
  border-radius: 4px;
  background: #fff;
  outline: none;
}
.ant-calendar-year-panel > div {
  height: 100%;
}
.ant-calendar-year-panel-hidden {
  display: none;
}
.ant-calendar-year-panel-header {
  height: 34px;
  line-height: 34px;
  text-align: center;
  user-select: none;
  border-bottom: 1px solid #e9e9e9;
}
.ant-calendar-year-panel-header a:hover {
  color: #6ddab5;
}
.ant-calendar-year-panel-header .ant-calendar-year-panel-century-select,
.ant-calendar-year-panel-header .ant-calendar-year-panel-decade-select,
.ant-calendar-year-panel-header .ant-calendar-year-panel-year-select,
.ant-calendar-year-panel-header .ant-calendar-year-panel-month-select {
  padding: 0 2px;
  font-weight: bold;
  display: inline-block;
  color: rgba(0, 0, 0, 0.65);
  line-height: 34px;
}
.ant-calendar-year-panel-header .ant-calendar-year-panel-century-select-arrow,
.ant-calendar-year-panel-header .ant-calendar-year-panel-decade-select-arrow,
.ant-calendar-year-panel-header .ant-calendar-year-panel-year-select-arrow,
.ant-calendar-year-panel-header .ant-calendar-year-panel-month-select-arrow {
  display: none;
}
.ant-calendar-year-panel-header .ant-calendar-year-panel-prev-century-btn,
.ant-calendar-year-panel-header .ant-calendar-year-panel-next-century-btn,
.ant-calendar-year-panel-header .ant-calendar-year-panel-prev-decade-btn,
.ant-calendar-year-panel-header .ant-calendar-year-panel-next-decade-btn,
.ant-calendar-year-panel-header .ant-calendar-year-panel-prev-month-btn,
.ant-calendar-year-panel-header .ant-calendar-year-panel-next-month-btn,
.ant-calendar-year-panel-header .ant-calendar-year-panel-prev-year-btn,
.ant-calendar-year-panel-header .ant-calendar-year-panel-next-year-btn {
  position: absolute;
  top: 0;
  color: rgba(0, 0, 0, 0.43);
  font-family: Arial, "Hiragino Sans GB", "Microsoft Yahei", "Microsoft Sans Serif", sans-serif;
  padding: 0 5px;
  font-size: 16px;
  display: inline-block;
  line-height: 34px;
}
.ant-calendar-year-panel-header .ant-calendar-year-panel-prev-century-btn,
.ant-calendar-year-panel-header .ant-calendar-year-panel-prev-decade-btn,
.ant-calendar-year-panel-header .ant-calendar-year-panel-prev-year-btn {
  left: 7px;
}
.ant-calendar-year-panel-header .ant-calendar-year-panel-prev-century-btn:after,
.ant-calendar-year-panel-header .ant-calendar-year-panel-prev-decade-btn:after,
.ant-calendar-year-panel-header .ant-calendar-year-panel-prev-year-btn:after {
  content: '«';
}
.ant-calendar-year-panel-header .ant-calendar-year-panel-next-century-btn,
.ant-calendar-year-panel-header .ant-calendar-year-panel-next-decade-btn,
.ant-calendar-year-panel-header .ant-calendar-year-panel-next-year-btn {
  right: 7px;
}
.ant-calendar-year-panel-header .ant-calendar-year-panel-next-century-btn:after,
.ant-calendar-year-panel-header .ant-calendar-year-panel-next-decade-btn:after,
.ant-calendar-year-panel-header .ant-calendar-year-panel-next-year-btn:after {
  content: '»';
}
.ant-calendar-year-panel-header .ant-calendar-year-panel-prev-month-btn {
  left: 29px;
}
.ant-calendar-year-panel-header .ant-calendar-year-panel-prev-month-btn:after {
  content: '‹';
}
.ant-calendar-year-panel-header .ant-calendar-year-panel-next-month-btn {
  right: 29px;
}
.ant-calendar-year-panel-header .ant-calendar-year-panel-next-month-btn:after {
  content: '›';
}
.ant-calendar-year-panel-body {
  height: calc(100% - 34px);
}
.ant-calendar-year-panel-table {
  table-layout: fixed;
  width: 100%;
  height: 100%;
  border-collapse: separate;
}
.ant-calendar-year-panel-cell {
  text-align: center;
}
.ant-calendar-year-panel-year {
  display: inline-block;
  margin: 0 auto;
  color: rgba(0, 0, 0, 0.65);
  background: transparent;
  text-align: center;
  height: 24px;
  line-height: 24px;
  padding: 0 6px;
  border-radius: 4px;
  transition: background 0.3s ease;
}
.ant-calendar-year-panel-year:hover {
  background: #f0fbf7;
  cursor: pointer;
}
.ant-calendar-year-panel-selected-cell .ant-calendar-year-panel-year {
  background: #3FCE9E;
  color: #fff;
}
.ant-calendar-year-panel-selected-cell .ant-calendar-year-panel-year:hover {
  background: #3FCE9E;
  color: #fff;
}
.ant-calendar-year-panel-last-decade-cell .ant-calendar-year-panel-year,
.ant-calendar-year-panel-next-decade-cell .ant-calendar-year-panel-year {
  user-select: none;
  color: rgba(0, 0, 0, 0.25);
}
.ant-calendar-decade-panel {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  z-index: 10;
  background: #fff;
  border-radius: 4px;
  outline: none;
}
.ant-calendar-decade-panel-hidden {
  display: none;
}
.ant-calendar-decade-panel-header {
  height: 34px;
  line-height: 34px;
  text-align: center;
  user-select: none;
  border-bottom: 1px solid #e9e9e9;
}
.ant-calendar-decade-panel-header a:hover {
  color: #6ddab5;
}
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-century-select,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-decade-select,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-year-select,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-month-select {
  padding: 0 2px;
  font-weight: bold;
  display: inline-block;
  color: rgba(0, 0, 0, 0.65);
  line-height: 34px;
}
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-century-select-arrow,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-decade-select-arrow,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-year-select-arrow,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-month-select-arrow {
  display: none;
}
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-prev-century-btn,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-next-century-btn,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-prev-decade-btn,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-next-decade-btn,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-prev-month-btn,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-next-month-btn,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-prev-year-btn,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-next-year-btn {
  position: absolute;
  top: 0;
  color: rgba(0, 0, 0, 0.43);
  font-family: Arial, "Hiragino Sans GB", "Microsoft Yahei", "Microsoft Sans Serif", sans-serif;
  padding: 0 5px;
  font-size: 16px;
  display: inline-block;
  line-height: 34px;
}
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-prev-century-btn,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-prev-decade-btn,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-prev-year-btn {
  left: 7px;
}
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-prev-century-btn:after,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-prev-decade-btn:after,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-prev-year-btn:after {
  content: '«';
}
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-next-century-btn,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-next-decade-btn,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-next-year-btn {
  right: 7px;
}
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-next-century-btn:after,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-next-decade-btn:after,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-next-year-btn:after {
  content: '»';
}
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-prev-month-btn {
  left: 29px;
}
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-prev-month-btn:after {
  content: '‹';
}
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-next-month-btn {
  right: 29px;
}
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-next-month-btn:after {
  content: '›';
}
.ant-calendar-decade-panel-body {
  height: calc(100% - 34px);
}
.ant-calendar-decade-panel-table {
  table-layout: fixed;
  width: 100%;
  height: 100%;
  border-collapse: separate;
}
.ant-calendar-decade-panel-cell {
  text-align: center;
  white-space: nowrap;
}
.ant-calendar-decade-panel-decade {
  display: inline-block;
  margin: 0 auto;
  color: rgba(0, 0, 0, 0.65);
  background: transparent;
  text-align: center;
  height: 24px;
  line-height: 24px;
  padding: 0 6px;
  border-radius: 4px;
  transition: background 0.3s ease;
}
.ant-calendar-decade-panel-decade:hover {
  background: #f0fbf7;
  cursor: pointer;
}
.ant-calendar-decade-panel-selected-cell .ant-calendar-decade-panel-decade {
  background: #3FCE9E;
  color: #fff;
}
.ant-calendar-decade-panel-selected-cell .ant-calendar-decade-panel-decade:hover {
  background: #3FCE9E;
  color: #fff;
}
.ant-calendar-decade-panel-last-century-cell .ant-calendar-decade-panel-decade,
.ant-calendar-decade-panel-next-century-cell .ant-calendar-decade-panel-decade {
  user-select: none;
  color: rgba(0, 0, 0, 0.25);
}
.ant-calendar-month .ant-calendar-month-panel,
.ant-calendar-month .ant-calendar-year-panel {
  top: 0;
  height: 248px;
}
.ant-calendar-picker-container {
  position: relative;
  left: -2px;
}
.ant-calendar-picker-container.top {
  bottom: -2px;
}
.ant-calendar-picker-container.bottom {
  top: -2px;
}
`
                ]
            },] },
];
/**
 * @nocollapse
 */
NzDatePickerComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: ChangeDetectorRef, },
];
NzDatePickerComponent.propDecorators = {
    'nzDisabledDate': [{ type: Input },],
    'nzAllowClear': [{ type: Input },],
    'nzShowTime': [{ type: Input },],
    'nzPlaceHolder': [{ type: Input },],
    'nzFormat': [{ type: Input },],
    'nzSize': [{ type: Input },],
    'trigger': [{ type: ViewChild, args: ['trigger',] },],
    'timePickerInner': [{ type: ViewChild, args: [NzTimePickerInnerComponent,] },],
    '_nzCalendarPicker': [{ type: HostBinding, args: ['class.ant-calendar-picker',] },],
    'nzDisabled': [{ type: Input },],
};

class NzTimePickerComponent extends NzTimePickerInnerComponent {
    constructor() {
        super(...arguments);
        this._disabled = false;
        this._dropDownPosition = 'bottom';
        this._triggerWidth = 0;
        this._positions = [...DEFAULT_DATEPICKER_POSITIONS];
    }
    /**
     * @return {?}
     */
    get nzDisabled() {
        return this._disabled;
    }
    ;
    /**
     * @param {?} value
     * @return {?}
     */
    set nzDisabled(value) {
        this._disabled = value;
        this._closeCalendar();
    }
    /**
     * @return {?}
     */
    _setTriggerWidth() {
        this._triggerWidth = this.trigger.nativeElement.getBoundingClientRect().width;
    }
    /**
     * @param {?} position
     * @return {?}
     */
    onPositionChange(position) {
        const /** @type {?} */ _position = position.connectionPair.originY === 'bottom' ? 'top' : 'bottom';
        if (this._dropDownPosition !== _position) {
            this._dropDownPosition = _position;
            this._cdr.detectChanges();
        }
    }
    /**
     * @param {?} box
     * @return {?}
     */
    _manualChangeInput(box) {
        const /** @type {?} */ _tempMoment = moment(box.value, this._format);
        if (Date.parse(_tempMoment.toDate().toString())) {
            this.nzValue = new Date((moment(this._value).hour(_tempMoment.hour()).minute(_tempMoment.minute()).second(_tempMoment.second())).toDate().getTime());
            this.onChange(this._value);
        }
        // this._closeCalendar();
    }
    /**
     * @return {?}
     */
    _overHour() {
        const /** @type {?} */ _start = this._format.indexOf('HH');
        const /** @type {?} */ _end = _start + 2;
        this._inputTimeInstance.nativeElement.setSelectionRange(_start, _end);
    }
    /**
     * @return {?}
     */
    _overMinute() {
        const /** @type {?} */ _start = this._format.indexOf('mm');
        const /** @type {?} */ _end = _start + 2;
        this._inputTimeInstance.nativeElement.setSelectionRange(_start, _end);
    }
    /**
     * @return {?}
     */
    _overSecond() {
        const /** @type {?} */ _start = this._format.indexOf('ss');
        const /** @type {?} */ _end = _start + 2;
        this._inputTimeInstance.nativeElement.setSelectionRange(_start, _end);
    }
    /**
     * @return {?}
     */
    _clearValue() {
        this.nzValue = null;
        this._selectedHour = null;
        this._selectedMinute = null;
        this.onChange(this._value);
        this._selectedSecond = null;
    }
    /**
     * @return {?}
     */
    _openCalendar() {
        this._open = true;
        this._setTriggerWidth();
        setTimeout(_ => {
            this._initPosition();
            this._inputTimeInstance.nativeElement.setSelectionRange(0, 8);
        });
    }
    /**
     * @return {?}
     */
    _closeCalendar() {
        if (!this._open) {
            return;
        }
        this._open = false;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.nzDisabled = isDisabled;
    }
}
NzTimePickerComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-timepicker',
                encapsulation: ViewEncapsulation.None,
                animations: [
                    DropDownAnimation
                ],
                template: `
    <span
      class="ant-time-picker"
      [class.ant-time-picker-large]="nzSize=='large'"
      [class.ant-time-picker-small]="nzSize=='small'"
      nz-overlay-origin #origin="nzOverlayOrigin"
      #trigger>
      <input
        [disabled]="nzDisabled"
        class="ant-time-picker-input"
        [attr.placeholder]="nzPlaceHolder"
        (click)="_openCalendar()"
        (blur)="onTouched()"
        [value]="_value|nzDate:_format">
      <span class="ant-time-picker-icon"></span>
    </span>
    <ng-template
      nz-connected-overlay
      hasBackdrop
      [positions]="_positions"
      [origin]="origin"
      (backdropClick)="_closeCalendar()"
      (detach)="_closeCalendar()"
      (positionChange)="onPositionChange($event)"
      [open]="_open">
      <div class="ant-time-picker-panel"
        [class.top]="_dropDownPosition==='top'"
        [class.bottom]="_dropDownPosition==='bottom'"
        [style.width]="_width"
        [@dropDownAnimation]="_dropDownPosition">
        <div class="ant-time-picker-panel-inner">
          <div class="ant-time-picker-panel-input-wrap">
            <input class="ant-time-picker-panel-input"
              [attr.placeholder]="nzPlaceHolder"
              #inputTimeInstance
              [value]="_value|nzDate:_format"
              (blur)="_manualChangeInput(inputTimeInstance)"
              (keydown.Enter)="_manualChangeInput(inputTimeInstance)">
            <a class="ant-time-picker-panel-clear-btn" title="清除" (click)="_clearValue()"></a>
          </div>
          <div class="ant-time-picker-panel-combobox">
            <div class="ant-time-picker-panel-select"
              #hourListInstance *ngIf="_showHour"
              (mouseover)="_overHour()">
              <ul>
                <ng-template
                  ngFor
                  let-_hour
                  [ngForOf]="_hourList"
                  let-i="index">
                  <li
                    [class.ant-time-picker-panel-select-option-selected]="_hour.index===_selectedHour"
                    [class.ant-time-picker-panel-select-option-disabled]="_hour.disabled"
                    [ngClass]="_hour.name"
                    *ngIf="!(nzHideDisabledOptions&&_hour.disabled)"
                    (click)="_selectHour(hourListInstance,_hour.index,_hour.disabled)">
                    {{_hour.name}}
                  </li>
                </ng-template>
              </ul>
            </div>
            <div
              class="ant-time-picker-panel-select"
              #minuteListInstance
              *ngIf="_showMinute"
              (mouseover)="_overMinute()">
              <ul>
                <ng-template
                  ngFor
                  let-_minute
                  [ngForOf]="_minuteList"
                  let-i="index">
                  <li
                    [ngClass]="_minute.name"
                    *ngIf="!(nzHideDisabledOptions&&_minute.disabled)"
                    [class.ant-time-picker-panel-select-option-selected]="_minute.index===_selectedMinute"
                    [class.ant-time-picker-panel-select-option-disabled]="_minute.disabled"
                    (click)="_selectMinute(minuteListInstance,_minute.index,_minute.disabled)">
                    {{_minute.name}}
                  </li>
                </ng-template>
              </ul>
            </div>
            <div
              class="ant-time-picker-panel-select"
              #secondListInstance *ngIf="_showSecond"
              (mouseover)="_overSecond()">
              <ul>
                <ng-template
                  ngFor
                  let-_second
                  [ngForOf]="_secondList"
                  let-i="index">
                  <li
                    [ngClass]="_second.name"
                    [class.ant-time-picker-panel-select-option-selected]="_second.index===_selectedSecond"
                    [class.ant-time-picker-panel-select-option-disabled]="_second.disabled"
                    *ngIf="!(nzHideDisabledOptions&&_second.disabled)"
                    (click)="_selectSecond(secondListInstance,_second.index,_second.disabled)">
                    {{_second.name}}
                  </li>
                </ng-template>
              </ul>
            </div>
          </div>
        </div>
      </div>
    </ng-template>`,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => NzTimePickerComponent),
                        multi: true
                    }
                ],
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-time-picker-panel {
  z-index: 1050;
  position: absolute;
}
.ant-time-picker-panel-inner {
  position: relative;
  outline: none;
  list-style: none;
  font-size: 12px;
  text-align: left;
  background-color: #fff;
  border-radius: 4px;
  box-shadow: 0 1px 6px rgba(0, 0, 0, 0.2);
  background-clip: padding-box;
  line-height: 1.5;
  overflow: hidden;
  left: -2px;
}
.ant-time-picker-panel-input {
  margin: 0;
  padding: 0;
  border: 0;
  width: 100%;
  cursor: auto;
  line-height: 1.5;
  outline: 0;
}
.ant-time-picker-panel-input::-moz-placeholder {
  color: rgba(0, 0, 0, 0.25);
  opacity: 1;
}
.ant-time-picker-panel-input:-ms-input-placeholder {
  color: rgba(0, 0, 0, 0.25);
}
.ant-time-picker-panel-input::-webkit-input-placeholder {
  color: rgba(0, 0, 0, 0.25);
}
.ant-time-picker-panel-input-wrap {
  box-sizing: border-box;
  position: relative;
  padding: 6px;
  border-bottom: 1px solid #e9e9e9;
}
.ant-time-picker-panel-input-invalid {
  border-color: red;
}
.ant-time-picker-panel-clear-btn {
  position: absolute;
  right: 5px;
  cursor: pointer;
  overflow: hidden;
  width: 20px;
  height: 20px;
  text-align: center;
  line-height: 20px;
  top: 5px;
  margin: 0;
}
.ant-time-picker-panel-clear-btn:after {
  font-size: 12px;
  color: rgba(0, 0, 0, 0.25);
  display: inline-block;
  line-height: 1;
  width: 20px;
  transition: color 0.3s ease;
  font-family: 'anticon';
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  content: "\\e62e";
}
.ant-time-picker-panel-clear-btn:hover:after {
  color: rgba(0, 0, 0, 0.43);
}
.ant-time-picker-panel-narrow .ant-time-picker-panel-input-wrap {
  max-width: 112px;
}
.ant-time-picker-panel-select {
  float: left;
  font-size: 12px;
  border-left: 1px solid #e9e9e9;
  box-sizing: border-box;
  width: 56px;
  overflow: hidden;
  position: relative;
  max-height: 144px;
}
.ant-time-picker-panel-select:hover {
  overflow-y: auto;
}
.ant-time-picker-panel-select:first-child {
  border-left: 0;
  margin-left: 0;
}
.ant-time-picker-panel-select:last-child {
  border-right: 0;
}
.ant-time-picker-panel-select:only-child {
  width: 100%;
}
.ant-time-picker-panel-select ul {
  list-style: none;
  box-sizing: border-box;
  margin: 0;
  padding: 0 0 120px;
  width: 100%;
}
.ant-time-picker-panel-select li {
  list-style: none;
  box-sizing: content-box;
  margin: 0;
  padding: 0 0 0 8px;
  width: 100%;
  height: 24px;
  line-height: 24px;
  text-align: left;
  cursor: pointer;
  user-select: none;
  transition: background 0.3s;
}
.ant-time-picker-panel-select li:hover {
  background: #f0fbf7;
}
li.ant-time-picker-panel-select-option-selected {
  background: #f7f7f7;
  font-weight: bold;
}
li.ant-time-picker-panel-select-option-selected:hover {
  background: #f7f7f7;
}
li.ant-time-picker-panel-select-option-disabled {
  color: rgba(0, 0, 0, 0.25);
}
li.ant-time-picker-panel-select-option-disabled:hover {
  background: transparent;
  cursor: not-allowed;
}
.ant-time-picker-panel-combobox {
  zoom: 1;
}
.ant-time-picker-panel-combobox:before,
.ant-time-picker-panel-combobox:after {
  content: " ";
  display: table;
}
.ant-time-picker-panel-combobox:after {
  clear: both;
  visibility: hidden;
  font-size: 0;
  height: 0;
}
.ant-time-picker-panel-addon {
  padding: 8px;
  border-top: 1px solid #e9e9e9;
}
.ant-time-picker-panel.slide-up-enter.slide-up-enter-active.ant-time-picker-panel-placement-topLeft,
.ant-time-picker-panel.slide-up-enter.slide-up-enter-active.ant-time-picker-panel-placement-topRight,
.ant-time-picker-panel.slide-up-appear.slide-up-appear-active.ant-time-picker-panel-placement-topLeft,
.ant-time-picker-panel.slide-up-appear.slide-up-appear-active.ant-time-picker-panel-placement-topRight {
  animation-name: antSlideDownIn;
}
.ant-time-picker-panel.slide-up-enter.slide-up-enter-active.ant-time-picker-panel-placement-bottomLeft,
.ant-time-picker-panel.slide-up-enter.slide-up-enter-active.ant-time-picker-panel-placement-bottomRight,
.ant-time-picker-panel.slide-up-appear.slide-up-appear-active.ant-time-picker-panel-placement-bottomLeft,
.ant-time-picker-panel.slide-up-appear.slide-up-appear-active.ant-time-picker-panel-placement-bottomRight {
  animation-name: antSlideUpIn;
}
.ant-time-picker-panel.slide-up-leave.slide-up-leave-active.ant-time-picker-panel-placement-topLeft,
.ant-time-picker-panel.slide-up-leave.slide-up-leave-active.ant-time-picker-panel-placement-topRight {
  animation-name: antSlideDownOut;
}
.ant-time-picker-panel.slide-up-leave.slide-up-leave-active.ant-time-picker-panel-placement-bottomLeft,
.ant-time-picker-panel.slide-up-leave.slide-up-leave-active.ant-time-picker-panel-placement-bottomRight {
  animation-name: antSlideUpOut;
}
.ant-time-picker {
  position: relative;
  display: inline-block;
  outline: none;
  font-size: 12px;
  transition: opacity 0.3s ease;
  width: 100px;
}
.ant-time-picker-input {
  position: relative;
  display: inline-block;
  padding: 4px 7px;
  width: 100%;
  height: 28px;
  cursor: text;
  font-size: 12px;
  line-height: 1.5;
  color: rgba(0, 0, 0, 0.65);
  background-color: #fff;
  background-image: none;
  border: 1px solid #d9d9d9;
  border-radius: 4px;
  transition: all .3s;
}
.ant-time-picker-input::-moz-placeholder {
  color: rgba(0, 0, 0, 0.25);
  opacity: 1;
}
.ant-time-picker-input:-ms-input-placeholder {
  color: rgba(0, 0, 0, 0.25);
}
.ant-time-picker-input::-webkit-input-placeholder {
  color: rgba(0, 0, 0, 0.25);
}
.ant-time-picker-input:hover {
  border-color: #6ddab5;
}
.ant-time-picker-input:focus {
  border-color: #6ddab5;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(63, 206, 158, 0.2);
}
.ant-time-picker-input-disabled {
  background-color: #f7f7f7;
  opacity: 1;
  cursor: not-allowed;
  color: rgba(0, 0, 0, 0.25);
}
.ant-time-picker-input-disabled:hover {
  border-color: #e2e2e2;
}
textarea.ant-time-picker-input {
  max-width: 100%;
  height: auto;
  vertical-align: bottom;
}
.ant-time-picker-input-lg {
  padding: 6px 7px;
  height: 32px;
}
.ant-time-picker-input-sm {
  padding: 1px 7px;
  height: 22px;
}
.ant-time-picker-input[disabled] {
  background-color: #f7f7f7;
  opacity: 1;
  cursor: not-allowed;
  color: rgba(0, 0, 0, 0.25);
}
.ant-time-picker-input[disabled]:hover {
  border-color: #e2e2e2;
}
.ant-time-picker-large .ant-time-picker-input {
  padding: 6px 7px;
  height: 32px;
}
.ant-time-picker-small .ant-time-picker-input {
  padding: 1px 7px;
  height: 22px;
}
.ant-time-picker-open {
  opacity: 0;
}
.ant-time-picker-icon {
  position: absolute;
  user-select: none;
  transition: all 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
  width: 12px;
  height: 12px;
  line-height: 12px;
  right: 8px;
  color: rgba(0, 0, 0, 0.43);
  top: 50%;
  margin-top: -6px;
}
.ant-time-picker-icon:after {
  content: "\\e641";
  font-family: "anticon";
  font-size: 12px;
  color: rgba(0, 0, 0, 0.43);
  display: block;
  line-height: 1;
}
`,
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-time-picker-panel {
  z-index: 1050;
  position: absolute;
}
.ant-time-picker-panel-inner {
  position: relative;
  outline: none;
  list-style: none;
  font-size: 12px;
  text-align: left;
  background-color: #fff;
  border-radius: 4px;
  box-shadow: 0 1px 6px rgba(0, 0, 0, 0.2);
  background-clip: padding-box;
  line-height: 1.5;
  overflow: hidden;
  left: -2px;
}
.ant-time-picker-panel-input {
  margin: 0;
  padding: 0;
  border: 0;
  width: 100%;
  cursor: auto;
  line-height: 1.5;
  outline: 0;
}
.ant-time-picker-panel-input::-moz-placeholder {
  color: rgba(0, 0, 0, 0.25);
  opacity: 1;
}
.ant-time-picker-panel-input:-ms-input-placeholder {
  color: rgba(0, 0, 0, 0.25);
}
.ant-time-picker-panel-input::-webkit-input-placeholder {
  color: rgba(0, 0, 0, 0.25);
}
.ant-time-picker-panel-input-wrap {
  box-sizing: border-box;
  position: relative;
  padding: 6px;
  border-bottom: 1px solid #e9e9e9;
}
.ant-time-picker-panel-input-invalid {
  border-color: red;
}
.ant-time-picker-panel-clear-btn {
  position: absolute;
  right: 5px;
  cursor: pointer;
  overflow: hidden;
  width: 20px;
  height: 20px;
  text-align: center;
  line-height: 20px;
  top: 5px;
  margin: 0;
}
.ant-time-picker-panel-clear-btn:after {
  font-size: 12px;
  color: rgba(0, 0, 0, 0.25);
  display: inline-block;
  line-height: 1;
  width: 20px;
  transition: color 0.3s ease;
  font-family: 'anticon';
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  content: "\\e62e";
}
.ant-time-picker-panel-clear-btn:hover:after {
  color: rgba(0, 0, 0, 0.43);
}
.ant-time-picker-panel-narrow .ant-time-picker-panel-input-wrap {
  max-width: 112px;
}
.ant-time-picker-panel-select {
  float: left;
  font-size: 12px;
  border-left: 1px solid #e9e9e9;
  box-sizing: border-box;
  width: 56px;
  overflow: hidden;
  position: relative;
  max-height: 144px;
}
.ant-time-picker-panel-select:hover {
  overflow-y: auto;
}
.ant-time-picker-panel-select:first-child {
  border-left: 0;
  margin-left: 0;
}
.ant-time-picker-panel-select:last-child {
  border-right: 0;
}
.ant-time-picker-panel-select:only-child {
  width: 100%;
}
.ant-time-picker-panel-select ul {
  list-style: none;
  box-sizing: border-box;
  margin: 0;
  padding: 0 0 120px;
  width: 100%;
}
.ant-time-picker-panel-select li {
  list-style: none;
  box-sizing: content-box;
  margin: 0;
  padding: 0 0 0 8px;
  width: 100%;
  height: 24px;
  line-height: 24px;
  text-align: left;
  cursor: pointer;
  user-select: none;
  transition: background 0.3s;
}
.ant-time-picker-panel-select li:hover {
  background: #f0fbf7;
}
li.ant-time-picker-panel-select-option-selected {
  background: #f7f7f7;
  font-weight: bold;
}
li.ant-time-picker-panel-select-option-selected:hover {
  background: #f7f7f7;
}
li.ant-time-picker-panel-select-option-disabled {
  color: rgba(0, 0, 0, 0.25);
}
li.ant-time-picker-panel-select-option-disabled:hover {
  background: transparent;
  cursor: not-allowed;
}
.ant-time-picker-panel-combobox {
  zoom: 1;
}
.ant-time-picker-panel-combobox:before,
.ant-time-picker-panel-combobox:after {
  content: " ";
  display: table;
}
.ant-time-picker-panel-combobox:after {
  clear: both;
  visibility: hidden;
  font-size: 0;
  height: 0;
}
.ant-time-picker-panel-addon {
  padding: 8px;
  border-top: 1px solid #e9e9e9;
}
.ant-time-picker-panel.slide-up-enter.slide-up-enter-active.ant-time-picker-panel-placement-topLeft,
.ant-time-picker-panel.slide-up-enter.slide-up-enter-active.ant-time-picker-panel-placement-topRight,
.ant-time-picker-panel.slide-up-appear.slide-up-appear-active.ant-time-picker-panel-placement-topLeft,
.ant-time-picker-panel.slide-up-appear.slide-up-appear-active.ant-time-picker-panel-placement-topRight {
  animation-name: antSlideDownIn;
}
.ant-time-picker-panel.slide-up-enter.slide-up-enter-active.ant-time-picker-panel-placement-bottomLeft,
.ant-time-picker-panel.slide-up-enter.slide-up-enter-active.ant-time-picker-panel-placement-bottomRight,
.ant-time-picker-panel.slide-up-appear.slide-up-appear-active.ant-time-picker-panel-placement-bottomLeft,
.ant-time-picker-panel.slide-up-appear.slide-up-appear-active.ant-time-picker-panel-placement-bottomRight {
  animation-name: antSlideUpIn;
}
.ant-time-picker-panel.slide-up-leave.slide-up-leave-active.ant-time-picker-panel-placement-topLeft,
.ant-time-picker-panel.slide-up-leave.slide-up-leave-active.ant-time-picker-panel-placement-topRight {
  animation-name: antSlideDownOut;
}
.ant-time-picker-panel.slide-up-leave.slide-up-leave-active.ant-time-picker-panel-placement-bottomLeft,
.ant-time-picker-panel.slide-up-leave.slide-up-leave-active.ant-time-picker-panel-placement-bottomRight {
  animation-name: antSlideUpOut;
}
.ant-time-picker {
  position: relative;
  display: inline-block;
  outline: none;
  font-size: 12px;
  transition: opacity 0.3s ease;
  width: 100px;
}
.ant-time-picker-input {
  position: relative;
  display: inline-block;
  padding: 4px 7px;
  width: 100%;
  height: 28px;
  cursor: text;
  font-size: 12px;
  line-height: 1.5;
  color: rgba(0, 0, 0, 0.65);
  background-color: #fff;
  background-image: none;
  border: 1px solid #d9d9d9;
  border-radius: 4px;
  transition: all .3s;
}
.ant-time-picker-input::-moz-placeholder {
  color: rgba(0, 0, 0, 0.25);
  opacity: 1;
}
.ant-time-picker-input:-ms-input-placeholder {
  color: rgba(0, 0, 0, 0.25);
}
.ant-time-picker-input::-webkit-input-placeholder {
  color: rgba(0, 0, 0, 0.25);
}
.ant-time-picker-input:hover {
  border-color: #6ddab5;
}
.ant-time-picker-input:focus {
  border-color: #6ddab5;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(63, 206, 158, 0.2);
}
.ant-time-picker-input-disabled {
  background-color: #f7f7f7;
  opacity: 1;
  cursor: not-allowed;
  color: rgba(0, 0, 0, 0.25);
}
.ant-time-picker-input-disabled:hover {
  border-color: #e2e2e2;
}
textarea.ant-time-picker-input {
  max-width: 100%;
  height: auto;
  vertical-align: bottom;
}
.ant-time-picker-input-lg {
  padding: 6px 7px;
  height: 32px;
}
.ant-time-picker-input-sm {
  padding: 1px 7px;
  height: 22px;
}
.ant-time-picker-input[disabled] {
  background-color: #f7f7f7;
  opacity: 1;
  cursor: not-allowed;
  color: rgba(0, 0, 0, 0.25);
}
.ant-time-picker-input[disabled]:hover {
  border-color: #e2e2e2;
}
.ant-time-picker-large .ant-time-picker-input {
  padding: 6px 7px;
  height: 32px;
}
.ant-time-picker-small .ant-time-picker-input {
  padding: 1px 7px;
  height: 22px;
}
.ant-time-picker-open {
  opacity: 0;
}
.ant-time-picker-icon {
  position: absolute;
  user-select: none;
  transition: all 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
  width: 12px;
  height: 12px;
  line-height: 12px;
  right: 8px;
  color: rgba(0, 0, 0, 0.43);
  top: 50%;
  margin-top: -6px;
}
.ant-time-picker-icon:after {
  content: "\\e641";
  font-family: "anticon";
  font-size: 12px;
  color: rgba(0, 0, 0, 0.43);
  display: block;
  line-height: 1;
}
.ant-time-picker-panel {
  position: relative;
  left: 0;
}
.ant-time-picker-panel.top {
  bottom: -8px;
}
.ant-time-picker-panel.bottom {
  top: -2px;
}
`
                ]
            },] },
];
/**
 * @nocollapse
 */
NzTimePickerComponent.ctorParameters = () => [];
NzTimePickerComponent.propDecorators = {
    'trigger': [{ type: ViewChild, args: ['trigger',] },],
    'nzDisabled': [{ type: Input },],
};

class NzDatePipe {
    /**
     * @param {?} value
     * @param {?} formatString
     * @return {?}
     */
    transform(value, formatString) {
        if (value) {
            return moment(+value).format(formatString);
        }
        else {
            return '';
        }
    }
}
NzDatePipe.decorators = [
    { type: Pipe, args: [{ name: 'nzDate' },] },
];
/**
 * @nocollapse
 */
NzDatePipe.ctorParameters = () => [];

class NzUtilModule {
}
NzUtilModule.decorators = [
    { type: NgModule, args: [{
                declarations: [NzDatePipe],
                exports: [NzDatePipe]
            },] },
];
/**
 * @nocollapse
 */
NzUtilModule.ctorParameters = () => [];

class NzTimePickerModule {
}
NzTimePickerModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, NzUtilModule, OverlayModule],
                declarations: [NzTimePickerComponent, NzTimePickerInnerComponent],
                exports: [NzTimePickerComponent, NzTimePickerInnerComponent]
            },] },
];
/**
 * @nocollapse
 */
NzTimePickerModule.ctorParameters = () => [];

class NzDatePickerModule {
}
NzDatePickerModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, NzTimePickerModule, NzUtilModule, NzInputModule, NzCalendarModule, FormsModule, OverlayModule],
                declarations: [NzDatePickerComponent],
                exports: [NzDatePickerComponent]
            },] },
];
/**
 * @nocollapse
 */
NzDatePickerModule.ctorParameters = () => [];

class NzFormComponent {
    /**
     * @param {?} _elementRef
     * @param {?} _renderer
     */
    constructor(_elementRef, _renderer) {
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this._classList = [];
        this._prefixCls = 'ant-form';
        /**
         * @deprecated Use `nzLayout` instead.
         */
        this.nzType = 'horizontal';
        this._el = this._elementRef.nativeElement;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzLayout(value) {
        this.nzType = value;
        this.setClassMap();
    }
    /**
     * @return {?}
     */
    setClassMap() {
        this._classList.forEach(_className => {
            this._renderer.removeClass(this._el, _className);
        });
        this._classList = [
            this.nzType && `${this._prefixCls}-${this.nzType}`
        ].filter((item) => {
            return !!item;
        });
        this._classList.forEach(_className => {
            this._renderer.addClass(this._el, _className);
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.setClassMap();
    }
}
NzFormComponent.decorators = [
    { type: Component, args: [{
                selector: '[nz-form]',
                encapsulation: ViewEncapsulation.None,
                template: `
    <ng-content></ng-content>
  `,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
legend {
  display: block;
  width: 100%;
  padding: 0;
  margin-bottom: 20px;
  font-size: 14px;
  line-height: inherit;
  color: rgba(0, 0, 0, 0.43);
  border: 0;
  border-bottom: 1px solid #d9d9d9;
}
label {
  font-size: 12px;
}
input[type="search"] {
  box-sizing: border-box;
}
input[type="radio"],
input[type="checkbox"] {
  line-height: normal;
}
input[type="file"] {
  display: block;
}
input[type="range"] {
  display: block;
  width: 100%;
}
select[multiple],
select[size] {
  height: auto;
}
input[type="file"]:focus,
input[type="radio"]:focus,
input[type="checkbox"]:focus {
  outline: thin dotted;
  outline: 5px auto -webkit-focus-ring-color;
  outline-offset: -2px;
}
output {
  display: block;
  padding-top: 15px;
  font-size: 12px;
  line-height: 1.5;
  color: rgba(0, 0, 0, 0.65);
}
label {
  position: relative;
}
label > .anticon {
  vertical-align: top;
  font-size: 12px;
}
.ant-form-item-required:before {
  display: inline-block;
  margin-right: 4px;
  content: "*";
  font-family: SimSun;
  line-height: 1;
  font-size: 12px;
  color: #f04134;
}
.ant-form-hide-required-mark .ant-form-item-required:before {
  display: none;
}
input[type="radio"][disabled],
input[type="checkbox"][disabled],
input[type="radio"].disabled,
input[type="checkbox"].disabled {
  cursor: not-allowed;
}
.ant-radio-inline.disabled,
.ant-radio-vertical.disabled,
.ant-checkbox-inline.disabled,
.ant-checkbox-vertical.disabled {
  cursor: not-allowed;
}
.ant-radio.disabled label,
.ant-checkbox.disabled label {
  cursor: not-allowed;
}
.ant-form-item {
  font-size: 12px;
  margin-bottom: 24px;
  color: rgba(0, 0, 0, 0.65);
  vertical-align: top;
}
.ant-form-item > .ant-form-item,
.ant-form-item :not(.ant-form) > .ant-form-item {
  margin-bottom: -24px;
}
.ant-form-item-control {
  line-height: 32px;
  position: relative;
  zoom: 1;
}
.ant-form-item-control:before,
.ant-form-item-control:after {
  content: " ";
  display: table;
}
.ant-form-item-control:after {
  clear: both;
  visibility: hidden;
  font-size: 0;
  height: 0;
}
.ant-form-item-with-help {
  margin-bottom: 6px;
}
.ant-form-item-label {
  text-align: right;
  vertical-align: middle;
  line-height: 32px;
  display: inline-block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}
.ant-form-item-label label {
  color: rgba(0, 0, 0, 0.85);
}
.ant-form-item-label label:after {
  content: ":";
  margin: 0 8px 0 2px;
  position: relative;
  top: -0.5px;
}
.ant-form-item .ant-switch {
  margin: 4px 0;
}
.ant-form-item-no-colon .ant-form-item-label label:after {
  content: " ";
}
.ant-form-explain,
.ant-form-extra {
  color: rgba(0, 0, 0, 0.43);
  line-height: 1.5;
}
.ant-form-extra {
  padding-top: 4px;
}
.ant-form-text {
  display: inline-block;
  padding-right: 8px;
}
.ant-form-split {
  display: block;
  text-align: center;
}
form .has-feedback .ant-input {
  padding-right: 24px;
}
form .has-feedback > .ant-select .ant-select-arrow,
form .has-feedback > .ant-select .ant-select-selection__clear,
form .has-feedback :not(.ant-input-group-addon) > .ant-select .ant-select-arrow,
form .has-feedback :not(.ant-input-group-addon) > .ant-select .ant-select-selection__clear {
  right: 28px;
}
form .has-feedback > .ant-select .ant-select-selection-selected-value,
form .has-feedback :not(.ant-input-group-addon) > .ant-select .ant-select-selection-selected-value {
  padding-right: 42px;
}
form .has-feedback .ant-cascader-picker-arrow {
  padding-right: 36px;
}
form .has-feedback .ant-cascader-picker-clear {
  right: 28px;
}
form .has-feedback .ant-calendar-picker-icon,
form .has-feedback .ant-calendar-picker-clear {
  right: 28px;
}
form textarea.ant-input {
  height: auto;
}
form .ant-upload {
  background: transparent;
}
form input[type="radio"],
form input[type="checkbox"] {
  width: 14px;
  height: 14px;
}
form .ant-radio-inline,
form .ant-checkbox-inline {
  display: inline-block;
  vertical-align: middle;
  font-weight: normal;
  cursor: pointer;
  margin-left: 8px;
}
form .ant-radio-inline:first-child,
form .ant-checkbox-inline:first-child {
  margin-left: 0;
}
form .ant-checkbox-vertical,
form .ant-radio-vertical {
  display: block;
}
form .ant-checkbox-vertical + .ant-checkbox-vertical,
form .ant-radio-vertical + .ant-radio-vertical {
  margin-left: 0;
}
form .ant-input-number {
  margin-top: -1px;
  margin-right: 8px;
}
form .ant-select,
form .ant-cascader-picker {
  width: 100%;
}
form .ant-select:only-child,
form .ant-cascader-picker:only-child {
  display: block;
}
form .ant-input-group .ant-select,
form .ant-input-group .ant-cascader-picker {
  width: auto;
}
form .ant-input-group-addon .ant-select:only-child,
form .ant-input-group-addon .ant-cascader-picker:only-child {
  display: inline-block;
}
.ant-input-group-wrap .ant-select-selection {
  border-bottom-left-radius: 0;
  border-top-left-radius: 0;
}
.ant-input-group-wrap .ant-select-selection:hover {
  border-color: #d9d9d9;
}
.ant-input-group-wrap .ant-select-selection--single {
  margin-left: -1px;
  height: 32px;
  background-color: #eee;
}
.ant-input-group-wrap .ant-select-selection--single .ant-select-selection__rendered {
  padding-left: 8px;
  padding-right: 25px;
  line-height: 30px;
}
.ant-input-group-wrap .ant-select-open .ant-select-selection {
  border-color: #d9d9d9;
  box-shadow: none;
}
.ant-form-vertical .ant-form-item-label,
.ant-col-24.ant-form-item-label,
.ant-col-xl-24.ant-form-item-label {
  padding: 0 0 8px;
  display: block;
  text-align: left;
  line-height: 1.5;
}
.ant-form-vertical .ant-form-item-label label:after,
.ant-col-24.ant-form-item-label label:after,
.ant-col-xl-24.ant-form-item-label label:after {
  display: none;
}
@media (max-width: 767px) {
  .ant-col-xs-24.ant-form-item-label {
    padding: 0 0 8px;
    display: block;
    text-align: left;
    line-height: 1.5;
  }
  .ant-col-xs-24.ant-form-item-label label:after {
    display: none;
  }
}
@media (max-width: 991px) {
  .ant-col-sm-24.ant-form-item-label {
    padding: 0 0 8px;
    display: block;
    text-align: left;
    line-height: 1.5;
  }
  .ant-col-sm-24.ant-form-item-label label:after {
    display: none;
  }
}
@media (max-width: 1199px) {
  .ant-col-md-24.ant-form-item-label {
    padding: 0 0 8px;
    display: block;
    text-align: left;
    line-height: 1.5;
  }
  .ant-col-md-24.ant-form-item-label label:after {
    display: none;
  }
}
@media (max-width: 1599px) {
  .ant-col-lg-24.ant-form-item-label {
    padding: 0 0 8px;
    display: block;
    text-align: left;
    line-height: 1.5;
  }
  .ant-col-lg-24.ant-form-item-label label:after {
    display: none;
  }
}
.ant-form-inline .ant-form-item {
  display: inline-block;
  margin-right: 16px;
  margin-bottom: 0;
}
.ant-form-inline .ant-form-item-with-help {
  margin-bottom: 24px;
}
.ant-form-inline .ant-form-item > div {
  display: inline-block;
  vertical-align: middle;
}
.ant-form-inline .ant-form-text {
  display: inline-block;
}
.ant-form-inline .has-feedback {
  display: inline-block;
}
.ant-form-inline .ant-form-explain {
  position: absolute;
}
.has-success.has-feedback:after,
.has-warning.has-feedback:after,
.has-error.has-feedback:after,
.is-validating.has-feedback:after {
  position: absolute;
  top: 0;
  right: 0;
  visibility: visible;
  pointer-events: none;
  width: 32px;
  height: 32px;
  line-height: 32px;
  text-align: center;
  font-size: 14px;
  animation: zoomIn 0.3s cubic-bezier(0.12, 0.4, 0.29, 1.46);
  font-family: 'anticon';
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  content: "";
  z-index: 1;
}
.has-success.has-feedback:after {
  animation-name: diffZoomIn1 !important;
}
.has-error.has-feedback:after {
  animation-name: diffZoomIn2 !important;
}
.has-warning.has-feedback:after {
  animation-name: diffZoomIn3 !important;
}
.has-success.has-feedback:after {
  content: '\\e630';
  color: #00a854;
}
.has-warning .ant-form-explain,
.has-warning .ant-form-split {
  color: #ffbf00;
}
.has-warning .ant-input,
.has-warning .ant-input:hover {
  border-color: #ffbf00;
}
.has-warning .ant-input:focus {
  border-color: #ffce3d;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(255, 191, 0, 0.2);
}
.has-warning .ant-input:not([disabled]):hover {
  border-color: #ffbf00;
}
.has-warning .ant-calendar-picker-open .ant-calendar-picker-input {
  border-color: #ffce3d;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(255, 191, 0, 0.2);
}
.has-warning .ant-input-prefix {
  color: #ffbf00;
}
.has-warning .ant-input-group-addon {
  color: #ffbf00;
  border-color: #ffbf00;
  background-color: #fff;
}
.has-warning .has-feedback {
  color: #ffbf00;
}
.has-warning.has-feedback:after {
  content: '\\e62c';
  color: #ffbf00;
}
.has-warning .ant-select-selection {
  border-color: #ffbf00;
}
.has-warning .ant-select-open .ant-select-selection,
.has-warning .ant-select-focused .ant-select-selection {
  border-color: #ffce3d;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(255, 191, 0, 0.2);
}
.has-warning .ant-calendar-picker-icon:after,
.has-warning .ant-picker-icon:after,
.has-warning .ant-select-arrow,
.has-warning .ant-cascader-picker-arrow {
  color: #ffbf00;
}
.has-warning .ant-input-number,
.has-warning .ant-time-picker-input {
  border-color: #ffbf00;
}
.has-warning .ant-input-number-focused,
.has-warning .ant-time-picker-input-focused,
.has-warning .ant-input-number:focus,
.has-warning .ant-time-picker-input:focus {
  border-color: #ffce3d;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(255, 191, 0, 0.2);
}
.has-warning .ant-input-number:not([disabled]):hover,
.has-warning .ant-time-picker-input:not([disabled]):hover {
  border-color: #ffbf00;
}
.has-error .ant-form-explain,
.has-error .ant-form-split {
  color: #f04134;
}
.has-error .ant-input,
.has-error .ant-input:hover {
  border-color: #f04134;
}
.has-error .ant-input:focus {
  border-color: #f46e65;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(240, 65, 52, 0.2);
}
.has-error .ant-input:not([disabled]):hover {
  border-color: #f04134;
}
.has-error .ant-calendar-picker-open .ant-calendar-picker-input {
  border-color: #f46e65;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(240, 65, 52, 0.2);
}
.has-error .ant-input-prefix {
  color: #f04134;
}
.has-error .ant-input-group-addon {
  color: #f04134;
  border-color: #f04134;
  background-color: #fff;
}
.has-error .has-feedback {
  color: #f04134;
}
.has-error.has-feedback:after {
  content: '\\e62e';
  color: #f04134;
}
.has-error .ant-select-selection {
  border-color: #f04134;
}
.has-error .ant-select-open .ant-select-selection,
.has-error .ant-select-focused .ant-select-selection {
  border-color: #f46e65;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(240, 65, 52, 0.2);
}
.has-error .ant-input-group-addon .ant-select-selection {
  border-color: transparent;
  box-shadow: none;
}
.has-error .ant-calendar-picker-icon:after,
.has-error .ant-picker-icon:after,
.has-error .ant-select-arrow,
.has-error .ant-cascader-picker-arrow {
  color: #f04134;
}
.has-error .ant-input-number,
.has-error .ant-time-picker-input {
  border-color: #f04134;
}
.has-error .ant-input-number-focused,
.has-error .ant-time-picker-input-focused,
.has-error .ant-input-number:focus,
.has-error .ant-time-picker-input:focus {
  border-color: #f46e65;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(240, 65, 52, 0.2);
}
.has-error .ant-input-number:not([disabled]):hover,
.has-error .ant-time-picker-input:not([disabled]):hover {
  border-color: #f04134;
}
.has-error .ant-mention-wrapper .ant-mention-editor,
.has-error .ant-mention-wrapper .ant-mention-editor:not([disabled]):hover {
  border-color: #f04134;
}
.has-error .ant-mention-wrapper.ant-mention-active .ant-mention-editor,
.has-error .ant-mention-wrapper .ant-mention-editor:not([disabled]):focus {
  border-color: #f46e65;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(240, 65, 52, 0.2);
}
.is-validating.has-feedback:after {
  display: inline-block;
  animation: loadingCircle 1s infinite linear;
  content: "\\e64d";
  color: #3FCE9E;
}
.ant-advanced-search-form .ant-form-item {
  margin-bottom: 16px;
}
.ant-advanced-search-form .ant-input,
.ant-advanced-search-form .ant-input-group .ant-input,
.ant-advanced-search-form .ant-input-group .ant-input-group-addon {
  height: 28px;
}
@keyframes diffZoomIn1 {
  0% {
    transform: scale(0);
  }
  100% {
    transform: scale(1);
  }
}
@keyframes diffZoomIn2 {
  0% {
    transform: scale(0);
  }
  100% {
    transform: scale(1);
  }
}
@keyframes diffZoomIn3 {
  0% {
    transform: scale(0);
  }
  100% {
    transform: scale(1);
  }
}
`,
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
legend {
  display: block;
  width: 100%;
  padding: 0;
  margin-bottom: 20px;
  font-size: 14px;
  line-height: inherit;
  color: rgba(0, 0, 0, 0.43);
  border: 0;
  border-bottom: 1px solid #d9d9d9;
}
label {
  font-size: 12px;
}
input[type="search"] {
  box-sizing: border-box;
}
input[type="radio"],
input[type="checkbox"] {
  line-height: normal;
}
input[type="file"] {
  display: block;
}
input[type="range"] {
  display: block;
  width: 100%;
}
select[multiple],
select[size] {
  height: auto;
}
input[type="file"]:focus,
input[type="radio"]:focus,
input[type="checkbox"]:focus {
  outline: thin dotted;
  outline: 5px auto -webkit-focus-ring-color;
  outline-offset: -2px;
}
output {
  display: block;
  padding-top: 15px;
  font-size: 12px;
  line-height: 1.5;
  color: rgba(0, 0, 0, 0.65);
}
label {
  position: relative;
}
label > .anticon {
  vertical-align: top;
  font-size: 12px;
}
.ant-form-item-required:before {
  display: inline-block;
  margin-right: 4px;
  content: "*";
  font-family: SimSun;
  line-height: 1;
  font-size: 12px;
  color: #f04134;
}
.ant-form-hide-required-mark .ant-form-item-required:before {
  display: none;
}
input[type="radio"][disabled],
input[type="checkbox"][disabled],
input[type="radio"].disabled,
input[type="checkbox"].disabled {
  cursor: not-allowed;
}
.ant-radio-inline.disabled,
.ant-radio-vertical.disabled,
.ant-checkbox-inline.disabled,
.ant-checkbox-vertical.disabled {
  cursor: not-allowed;
}
.ant-radio.disabled label,
.ant-checkbox.disabled label {
  cursor: not-allowed;
}
.ant-form-item {
  font-size: 12px;
  margin-bottom: 24px;
  color: rgba(0, 0, 0, 0.65);
  vertical-align: top;
}
.ant-form-item > .ant-form-item,
.ant-form-item :not(.ant-form) > .ant-form-item {
  margin-bottom: -24px;
}
.ant-form-item-control {
  line-height: 32px;
  position: relative;
  zoom: 1;
}
.ant-form-item-control:before,
.ant-form-item-control:after {
  content: " ";
  display: table;
}
.ant-form-item-control:after {
  clear: both;
  visibility: hidden;
  font-size: 0;
  height: 0;
}
.ant-form-item-with-help {
  margin-bottom: 6px;
}
.ant-form-item-label {
  text-align: right;
  vertical-align: middle;
  line-height: 32px;
  display: inline-block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}
.ant-form-item-label label {
  color: rgba(0, 0, 0, 0.85);
}
.ant-form-item-label label:after {
  content: ":";
  margin: 0 8px 0 2px;
  position: relative;
  top: -0.5px;
}
.ant-form-item .ant-switch {
  margin: 4px 0;
}
.ant-form-item-no-colon .ant-form-item-label label:after {
  content: " ";
}
.ant-form-explain,
.ant-form-extra {
  color: rgba(0, 0, 0, 0.43);
  line-height: 1.5;
}
.ant-form-extra {
  padding-top: 4px;
}
.ant-form-text {
  display: inline-block;
  padding-right: 8px;
}
.ant-form-split {
  display: block;
  text-align: center;
}
form .has-feedback .ant-input {
  padding-right: 24px;
}
form .has-feedback > .ant-select .ant-select-arrow,
form .has-feedback > .ant-select .ant-select-selection__clear,
form .has-feedback :not(.ant-input-group-addon) > .ant-select .ant-select-arrow,
form .has-feedback :not(.ant-input-group-addon) > .ant-select .ant-select-selection__clear {
  right: 28px;
}
form .has-feedback > .ant-select .ant-select-selection-selected-value,
form .has-feedback :not(.ant-input-group-addon) > .ant-select .ant-select-selection-selected-value {
  padding-right: 42px;
}
form .has-feedback .ant-cascader-picker-arrow {
  padding-right: 36px;
}
form .has-feedback .ant-cascader-picker-clear {
  right: 28px;
}
form .has-feedback .ant-calendar-picker-icon,
form .has-feedback .ant-calendar-picker-clear {
  right: 28px;
}
form textarea.ant-input {
  height: auto;
}
form .ant-upload {
  background: transparent;
}
form input[type="radio"],
form input[type="checkbox"] {
  width: 14px;
  height: 14px;
}
form .ant-radio-inline,
form .ant-checkbox-inline {
  display: inline-block;
  vertical-align: middle;
  font-weight: normal;
  cursor: pointer;
  margin-left: 8px;
}
form .ant-radio-inline:first-child,
form .ant-checkbox-inline:first-child {
  margin-left: 0;
}
form .ant-checkbox-vertical,
form .ant-radio-vertical {
  display: block;
}
form .ant-checkbox-vertical + .ant-checkbox-vertical,
form .ant-radio-vertical + .ant-radio-vertical {
  margin-left: 0;
}
form .ant-input-number {
  margin-top: -1px;
  margin-right: 8px;
}
form .ant-select,
form .ant-cascader-picker {
  width: 100%;
}
form .ant-select:only-child,
form .ant-cascader-picker:only-child {
  display: block;
}
form .ant-input-group .ant-select,
form .ant-input-group .ant-cascader-picker {
  width: auto;
}
form .ant-input-group-addon .ant-select:only-child,
form .ant-input-group-addon .ant-cascader-picker:only-child {
  display: inline-block;
}
.ant-input-group-wrap .ant-select-selection {
  border-bottom-left-radius: 0;
  border-top-left-radius: 0;
}
.ant-input-group-wrap .ant-select-selection:hover {
  border-color: #d9d9d9;
}
.ant-input-group-wrap .ant-select-selection--single {
  margin-left: -1px;
  height: 32px;
  background-color: #eee;
}
.ant-input-group-wrap .ant-select-selection--single .ant-select-selection__rendered {
  padding-left: 8px;
  padding-right: 25px;
  line-height: 30px;
}
.ant-input-group-wrap .ant-select-open .ant-select-selection {
  border-color: #d9d9d9;
  box-shadow: none;
}
.ant-form-vertical .ant-form-item-label,
.ant-col-24.ant-form-item-label,
.ant-col-xl-24.ant-form-item-label {
  padding: 0 0 8px;
  display: block;
  text-align: left;
  line-height: 1.5;
}
.ant-form-vertical .ant-form-item-label label:after,
.ant-col-24.ant-form-item-label label:after,
.ant-col-xl-24.ant-form-item-label label:after {
  display: none;
}
@media (max-width: 767px) {
  .ant-col-xs-24.ant-form-item-label {
    padding: 0 0 8px;
    display: block;
    text-align: left;
    line-height: 1.5;
  }
  .ant-col-xs-24.ant-form-item-label label:after {
    display: none;
  }
}
@media (max-width: 991px) {
  .ant-col-sm-24.ant-form-item-label {
    padding: 0 0 8px;
    display: block;
    text-align: left;
    line-height: 1.5;
  }
  .ant-col-sm-24.ant-form-item-label label:after {
    display: none;
  }
}
@media (max-width: 1199px) {
  .ant-col-md-24.ant-form-item-label {
    padding: 0 0 8px;
    display: block;
    text-align: left;
    line-height: 1.5;
  }
  .ant-col-md-24.ant-form-item-label label:after {
    display: none;
  }
}
@media (max-width: 1599px) {
  .ant-col-lg-24.ant-form-item-label {
    padding: 0 0 8px;
    display: block;
    text-align: left;
    line-height: 1.5;
  }
  .ant-col-lg-24.ant-form-item-label label:after {
    display: none;
  }
}
.ant-form-inline .ant-form-item {
  display: inline-block;
  margin-right: 16px;
  margin-bottom: 0;
}
.ant-form-inline .ant-form-item-with-help {
  margin-bottom: 24px;
}
.ant-form-inline .ant-form-item > div {
  display: inline-block;
  vertical-align: middle;
}
.ant-form-inline .ant-form-text {
  display: inline-block;
}
.ant-form-inline .has-feedback {
  display: inline-block;
}
.ant-form-inline .ant-form-explain {
  position: absolute;
}
.has-success.has-feedback:after,
.has-warning.has-feedback:after,
.has-error.has-feedback:after,
.is-validating.has-feedback:after {
  position: absolute;
  top: 0;
  right: 0;
  visibility: visible;
  pointer-events: none;
  width: 32px;
  height: 32px;
  line-height: 32px;
  text-align: center;
  font-size: 14px;
  animation: zoomIn 0.3s cubic-bezier(0.12, 0.4, 0.29, 1.46);
  font-family: 'anticon';
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  content: "";
  z-index: 1;
}
.has-success.has-feedback:after {
  animation-name: diffZoomIn1 !important;
}
.has-error.has-feedback:after {
  animation-name: diffZoomIn2 !important;
}
.has-warning.has-feedback:after {
  animation-name: diffZoomIn3 !important;
}
.has-success.has-feedback:after {
  content: '\\e630';
  color: #00a854;
}
.has-warning .ant-form-explain,
.has-warning .ant-form-split {
  color: #ffbf00;
}
.has-warning .ant-input,
.has-warning .ant-input:hover {
  border-color: #ffbf00;
}
.has-warning .ant-input:focus {
  border-color: #ffce3d;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(255, 191, 0, 0.2);
}
.has-warning .ant-input:not([disabled]):hover {
  border-color: #ffbf00;
}
.has-warning .ant-calendar-picker-open .ant-calendar-picker-input {
  border-color: #ffce3d;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(255, 191, 0, 0.2);
}
.has-warning .ant-input-prefix {
  color: #ffbf00;
}
.has-warning .ant-input-group-addon {
  color: #ffbf00;
  border-color: #ffbf00;
  background-color: #fff;
}
.has-warning .has-feedback {
  color: #ffbf00;
}
.has-warning.has-feedback:after {
  content: '\\e62c';
  color: #ffbf00;
}
.has-warning .ant-select-selection {
  border-color: #ffbf00;
}
.has-warning .ant-select-open .ant-select-selection,
.has-warning .ant-select-focused .ant-select-selection {
  border-color: #ffce3d;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(255, 191, 0, 0.2);
}
.has-warning .ant-calendar-picker-icon:after,
.has-warning .ant-picker-icon:after,
.has-warning .ant-select-arrow,
.has-warning .ant-cascader-picker-arrow {
  color: #ffbf00;
}
.has-warning .ant-input-number,
.has-warning .ant-time-picker-input {
  border-color: #ffbf00;
}
.has-warning .ant-input-number-focused,
.has-warning .ant-time-picker-input-focused,
.has-warning .ant-input-number:focus,
.has-warning .ant-time-picker-input:focus {
  border-color: #ffce3d;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(255, 191, 0, 0.2);
}
.has-warning .ant-input-number:not([disabled]):hover,
.has-warning .ant-time-picker-input:not([disabled]):hover {
  border-color: #ffbf00;
}
.has-error .ant-form-explain,
.has-error .ant-form-split {
  color: #f04134;
}
.has-error .ant-input,
.has-error .ant-input:hover {
  border-color: #f04134;
}
.has-error .ant-input:focus {
  border-color: #f46e65;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(240, 65, 52, 0.2);
}
.has-error .ant-input:not([disabled]):hover {
  border-color: #f04134;
}
.has-error .ant-calendar-picker-open .ant-calendar-picker-input {
  border-color: #f46e65;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(240, 65, 52, 0.2);
}
.has-error .ant-input-prefix {
  color: #f04134;
}
.has-error .ant-input-group-addon {
  color: #f04134;
  border-color: #f04134;
  background-color: #fff;
}
.has-error .has-feedback {
  color: #f04134;
}
.has-error.has-feedback:after {
  content: '\\e62e';
  color: #f04134;
}
.has-error .ant-select-selection {
  border-color: #f04134;
}
.has-error .ant-select-open .ant-select-selection,
.has-error .ant-select-focused .ant-select-selection {
  border-color: #f46e65;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(240, 65, 52, 0.2);
}
.has-error .ant-input-group-addon .ant-select-selection {
  border-color: transparent;
  box-shadow: none;
}
.has-error .ant-calendar-picker-icon:after,
.has-error .ant-picker-icon:after,
.has-error .ant-select-arrow,
.has-error .ant-cascader-picker-arrow {
  color: #f04134;
}
.has-error .ant-input-number,
.has-error .ant-time-picker-input {
  border-color: #f04134;
}
.has-error .ant-input-number-focused,
.has-error .ant-time-picker-input-focused,
.has-error .ant-input-number:focus,
.has-error .ant-time-picker-input:focus {
  border-color: #f46e65;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(240, 65, 52, 0.2);
}
.has-error .ant-input-number:not([disabled]):hover,
.has-error .ant-time-picker-input:not([disabled]):hover {
  border-color: #f04134;
}
.has-error .ant-mention-wrapper .ant-mention-editor,
.has-error .ant-mention-wrapper .ant-mention-editor:not([disabled]):hover {
  border-color: #f04134;
}
.has-error .ant-mention-wrapper.ant-mention-active .ant-mention-editor,
.has-error .ant-mention-wrapper .ant-mention-editor:not([disabled]):focus {
  border-color: #f46e65;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(240, 65, 52, 0.2);
}
.is-validating.has-feedback:after {
  display: inline-block;
  animation: loadingCircle 1s infinite linear;
  content: "\\e64d";
  color: #3FCE9E;
}
.ant-advanced-search-form .ant-form-item {
  margin-bottom: 16px;
}
.ant-advanced-search-form .ant-input,
.ant-advanced-search-form .ant-input-group .ant-input,
.ant-advanced-search-form .ant-input-group .ant-input-group-addon {
  height: 28px;
}
@keyframes diffZoomIn1 {
  0% {
    transform: scale(0);
  }
  100% {
    transform: scale(1);
  }
}
@keyframes diffZoomIn2 {
  0% {
    transform: scale(0);
  }
  100% {
    transform: scale(1);
  }
}
@keyframes diffZoomIn3 {
  0% {
    transform: scale(0);
  }
  100% {
    transform: scale(1);
  }
}
.ant-form-item > label {
  color: rgba(0, 0, 0, 0.85);
  text-align: right;
  vertical-align: middle;
  padding: 7px 0;
  display: inline-block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}
.ant-form-item > label:after {
  content: ":";
  margin: 0 8px 0 2px;
  position: relative;
  top: -0.5px;
}
.ant-form-item-control nz-input {
  width: 100%;
}
`
                ]
            },] },
];
/**
 * @nocollapse
 */
NzFormComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
];
NzFormComponent.propDecorators = {
    'nzType': [{ type: Input },],
    'nzLayout': [{ type: Input },],
};

class NzFormItemDirective {
    constructor() {
        this._withHelp = 0;
        this._nzFormItem = true;
    }
    /**
     * @return {?}
     */
    enableHelp() {
        this._withHelp++;
    }
    ;
    /**
     * @return {?}
     */
    disableHelp() {
        this._withHelp--;
    }
    ;
    /**
     * @return {?}
     */
    get withHelp() {
        return this._withHelp > 0;
    }
    ;
}
NzFormItemDirective.decorators = [
    { type: Directive, args: [{
                selector: '[nz-form-item]'
            },] },
];
/**
 * @nocollapse
 */
NzFormItemDirective.ctorParameters = () => [];
NzFormItemDirective.propDecorators = {
    '_nzFormItem': [{ type: HostBinding, args: [`class.ant-form-item`,] },],
    'withHelp': [{ type: HostBinding, args: [`class.ant-form-item-with-help`,] },],
};

class NzFormControlComponent {
    constructor() {
        this._hasFeedback = false;
        this._nzFormItemControlWrapper = true;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzHasFeedback(value) {
        if (value === '') {
            this._hasFeedback = true;
        }
        else {
            this._hasFeedback = (value);
        }
    }
    /**
     * @return {?}
     */
    get nzHasFeedback() {
        return this._hasFeedback;
    }
    /**
     * @return {?}
     */
    get isWarning() {
        return this._isDirtyAndError('warning');
    }
    ;
    /**
     * @return {?}
     */
    get isValidate() {
        return this._isDirtyAndError('validating') || this.nzValidateStatus === 'pending' || this.nzValidateStatus && this.nzValidateStatus.dirty && this.nzValidateStatus.pending;
    }
    ;
    /**
     * @return {?}
     */
    get isError() {
        return this._isDirtyAndError('error')
            || this._isDirtyAndError('required')
            || this._isDirtyAndError('pattern')
            || this._isDirtyAndError('email')
            || this._isDirtyAndError('maxlength')
            || this._isDirtyAndError('minlength');
    }
    ;
    /**
     * @return {?}
     */
    get isSuccess() {
        return this.nzValidateStatus === 'success' || this.nzValidateStatus && this.nzValidateStatus.dirty && this.nzValidateStatus.valid;
    }
    ;
    /**
     * @return {?}
     */
    get hasFeedBack() {
        return (this.nzHasFeedback);
    }
    ;
    /**
     * @param {?} name
     * @return {?}
     */
    _isDirtyAndError(name) {
        return this.nzValidateStatus === name || this.nzValidateStatus && this.nzValidateStatus.dirty && this.nzValidateStatus.hasError && this.nzValidateStatus.hasError(name);
    }
}
NzFormControlComponent.decorators = [
    { type: Component, args: [{
                selector: '[nz-form-control]',
                template: `
    <div class="ant-form-item-control"
      [class.has-warning]="isWarning"
      [class.has-error]="isError"
      [class.has-success]="isSuccess"
      [class.has-feedback]="hasFeedBack"
      [class.is-validating]="isValidate">
      <ng-content></ng-content>
    </div>
  `,
                styles: []
            },] },
];
/**
 * @nocollapse
 */
NzFormControlComponent.ctorParameters = () => [];
NzFormControlComponent.propDecorators = {
    '_nzFormItemControlWrapper': [{ type: HostBinding, args: [`class.ant-form-item-control-wrapper`,] },],
    'nzHasFeedback': [{ type: Input },],
    'nzValidateStatus': [{ type: Input },],
};

class NzFormExplainComponent {
    /**
     * @param {?} _nzFormItem
     */
    constructor(_nzFormItem) {
        this._nzFormItem = _nzFormItem;
        this._nzFormExplain = true;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._nzFormItem.disableHelp();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._nzFormItem.enableHelp();
    }
}
NzFormExplainComponent.decorators = [
    { type: Component, args: [{
                selector: '[nz-form-explain]',
                encapsulation: ViewEncapsulation.None,
                template: `
    <ng-content></ng-content>
  `,
                styles: []
            },] },
];
/**
 * @nocollapse
 */
NzFormExplainComponent.ctorParameters = () => [
    { type: NzFormItemDirective, },
];
NzFormExplainComponent.propDecorators = {
    '_nzFormExplain': [{ type: HostBinding, args: [`class.ant-form-explain`,] },],
};

class NzFormTextDirective {
    constructor() {
        this._nzFormText = true;
    }
}
NzFormTextDirective.decorators = [
    { type: Directive, args: [{
                selector: '[nz-form-text]'
            },] },
];
/**
 * @nocollapse
 */
NzFormTextDirective.ctorParameters = () => [];
NzFormTextDirective.propDecorators = {
    '_nzFormText': [{ type: HostBinding, args: [`class.ant-form-text`,] },],
};

class NzFormSplitDirective {
    constructor() {
        this._nzFormSplit = true;
    }
}
NzFormSplitDirective.decorators = [
    { type: Directive, args: [{
                selector: '[nz-form-split]'
            },] },
];
/**
 * @nocollapse
 */
NzFormSplitDirective.ctorParameters = () => [];
NzFormSplitDirective.propDecorators = {
    '_nzFormSplit': [{ type: HostBinding, args: [`class.ant-form-split`,] },],
};

class NzFormExtraDirective {
    constructor() {
        this._nzFormExtra = true;
    }
}
NzFormExtraDirective.decorators = [
    { type: Directive, args: [{
                selector: '[nz-form-extra]'
            },] },
];
/**
 * @nocollapse
 */
NzFormExtraDirective.ctorParameters = () => [];
NzFormExtraDirective.propDecorators = {
    '_nzFormExtra': [{ type: HostBinding, args: [`class.ant-form-extra`,] },],
};

class NzFormLabelDirective {
    constructor() {
        this._nzFormItemLabel = true;
    }
}
NzFormLabelDirective.decorators = [
    { type: Directive, args: [{
                selector: '[nz-form-label]'
            },] },
];
/**
 * @nocollapse
 */
NzFormLabelDirective.ctorParameters = () => [];
NzFormLabelDirective.propDecorators = {
    '_nzFormItemLabel': [{ type: HostBinding, args: [`class.ant-form-item-label`,] },],
};

class NzFormItemRequiredDirective {
    constructor() {
        this.nzRequired = true;
    }
}
NzFormItemRequiredDirective.decorators = [
    { type: Directive, args: [{
                selector: '[nz-form-item-required]'
            },] },
];
/**
 * @nocollapse
 */
NzFormItemRequiredDirective.ctorParameters = () => [];
NzFormItemRequiredDirective.propDecorators = {
    'nzRequired': [{ type: Input }, { type: HostBinding, args: [`class.ant-form-item-required`,] },],
};

class NzFormModule {
}
NzFormModule.decorators = [
    { type: NgModule, args: [{
                declarations: [NzFormExtraDirective, NzFormLabelDirective, NzFormComponent, NzFormItemDirective, NzFormControlComponent, NzFormExplainComponent, NzFormTextDirective, NzFormSplitDirective, NzFormItemRequiredDirective],
                exports: [NzFormExtraDirective, NzFormLabelDirective, NzFormComponent, NzFormItemDirective, NzFormControlComponent, NzFormExplainComponent, NzFormTextDirective, NzFormSplitDirective, NzFormItemRequiredDirective],
                imports: [CommonModule]
            },] },
];
/**
 * @nocollapse
 */
NzFormModule.ctorParameters = () => [];

class NzInputNumberComponent {
    /**
     * @param {?} _elementRef
     * @param {?} _renderer
     */
    constructor(_elementRef, _renderer) {
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this._size = 'default';
        this._prefixCls = 'ant-input-number';
        this._step = 1;
        this._precisionStep = 0;
        this._precisionFactor = 1;
        this._disabledUp = false;
        this._disabledDown = false;
        // ngModel Access
        this.onChange = Function.prototype;
        this.onTouched = Function.prototype;
        this.nzPlaceHolder = '';
        this.nzMin = -Infinity;
        this.nzMax = Infinity;
        this.nzDisabled = false;
        this._el = this._elementRef.nativeElement;
        this._renderer.addClass(this._el, `${this._prefixCls}`);
    }
    /**
     * @return {?}
     */
    get nzSize() {
        return this._size;
    }
    ;
    /**
     * @param {?} value
     * @return {?}
     */
    set nzSize(value) {
        this._renderer.removeClass(this._el, `${this._prefixCls}-${this._size}`);
        this._size = { large: 'lg', small: 'sm' }[value];
        this._renderer.addClass(this._el, `${this._prefixCls}-${this._size}`);
    }
    /**
     * @return {?}
     */
    get nzStep() {
        return this._step;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzStep(value) {
        this._step = value;
        const /** @type {?} */ stepString = value.toString();
        if (stepString.indexOf('e-') >= 0) {
            this._precisionStep = parseInt(stepString.slice(stepString.indexOf('e-')), 10);
        }
        if (stepString.indexOf('.') >= 0) {
            this._precisionStep = stepString.length - stepString.indexOf('.') - 1;
        }
        this._precisionFactor = Math.pow(10, this._precisionStep);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    _numberUp($event) {
        $event.preventDefault();
        $event.stopPropagation();
        if (this.nzValue === undefined) {
            this.nzValue = this.nzMin || 0;
        }
        if (!this._disabledUp) {
            this.nzValue = this.toPrecisionAsStep((this._precisionFactor * this.nzValue + this._precisionFactor * this.nzStep) / this._precisionFactor);
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    _numberDown($event) {
        $event.preventDefault();
        $event.stopPropagation();
        if (this.nzValue === undefined) {
            this.nzValue = this.nzMin || 0;
        }
        if (!this._disabledDown) {
            this.nzValue = this.toPrecisionAsStep((this._precisionFactor * this.nzValue - this._precisionFactor * this.nzStep) / this._precisionFactor);
        }
    }
    /**
     * @return {?}
     */
    get nzValue() {
        return this._value;
    }
    ;
    /**
     * @param {?} value
     * @return {?}
     */
    set nzValue(value) {
        this._updateValue(value);
    }
    /**
     * @return {?}
     */
    _userInputChange() {
        const /** @type {?} */ numberValue = +this._displayValue;
        if (this._isNumber(numberValue) && (numberValue <= this.nzMax) && (numberValue >= this.nzMin)) {
            this.nzValue = numberValue;
        }
    }
    /**
     * @return {?}
     */
    _checkValue() {
        this._displayValue = this.nzValue;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    _getBoundValue(value) {
        if (value > this.nzMax) {
            return this.nzMax;
        }
        else if (value < this.nzMin) {
            return this.nzMin;
        }
        else {
            return value;
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    _isNumber(value) {
        return !isNaN(value) && isFinite(value);
    }
    /**
     * @param {?} num
     * @return {?}
     */
    toPrecisionAsStep(num) {
        if (isNaN(num) || num === '') {
            return num;
        }
        return Number(Number(num).toFixed(this._precisionStep));
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        // this.nzValue = value;
        this._updateValue(value, false);
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.nzDisabled = isDisabled;
    }
    /**
     * @param {?} value
     * @param {?=} emitChange
     * @return {?}
     */
    _updateValue(value, emitChange = true) {
        if (this._value === value) {
            return;
        }
        this._value = this._getBoundValue(value);
        this._displayValue = this._value;
        this._inputNumber.nativeElement.value = this._value;
        if (emitChange) {
            this.onChange(this._value);
        }
        this._disabledUp = (this.nzValue !== undefined) && !((this.nzValue + this.nzStep) <= this.nzMax);
        this._disabledDown = (this.nzValue !== undefined) && !((this.nzValue - this.nzStep) >= this.nzMin);
    }
}
NzInputNumberComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-input-number',
                encapsulation: ViewEncapsulation.None,
                template: `
    <div class="ant-input-number-handler-wrap">
      <a class="ant-input-number-handler ant-input-number-handler-up"
        [ngClass]="{'ant-input-number-handler-up-disabled':_disabledUp}"
        (click)="_numberUp($event)">
        <span
          class="ant-input-number-handler-up-inner"
          (click)="$event.preventDefault();"></span>
      </a>
      <a
        class="ant-input-number-handler ant-input-number-handler-down"
        [ngClass]="{'ant-input-number-handler-down-disabled':_disabledDown}"
        (click)="_numberDown($event)">
        <span
          class="ant-input-number-handler-down-inner"
          (click)="$event.preventDefault();">
        </span>
      </a>
    </div>
    <div
      class="ant-input-number-input-wrap">
      <input class="ant-input-number-input"
        #inputNumber
        (blur)="onTouched();_checkValue()"
        [placeholder]="nzPlaceHolder"
        [disabled]="nzDisabled"
        [(ngModel)]="_displayValue"
        (ngModelChange)="_userInputChange()"
        [attr.min]="nzMin"
        [attr.max]="nzMax"
        [attr.step]="_step"
        autocomplete="off">
    </div>`,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => NzInputNumberComponent),
                        multi: true
                    }
                ],
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-input-number {
  position: relative;
  padding: 4px 7px;
  width: 100%;
  cursor: text;
  line-height: 1.5;
  color: rgba(0, 0, 0, 0.65);
  background-color: #fff;
  background-image: none;
  transition: all .3s;
  margin: 0;
  padding: 0;
  font-size: 12px;
  height: 28px;
  display: inline-block;
  border: 1px solid #d9d9d9;
  border-radius: 4px;
  width: 80px;
}
.ant-input-number::-moz-placeholder {
  color: rgba(0, 0, 0, 0.25);
  opacity: 1;
}
.ant-input-number:-ms-input-placeholder {
  color: rgba(0, 0, 0, 0.25);
}
.ant-input-number::-webkit-input-placeholder {
  color: rgba(0, 0, 0, 0.25);
}
.ant-input-number:hover {
  border-color: #6ddab5;
}
.ant-input-number:focus {
  border-color: #6ddab5;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(63, 206, 158, 0.2);
}
.ant-input-number-disabled {
  background-color: #f7f7f7;
  opacity: 1;
  cursor: not-allowed;
  color: rgba(0, 0, 0, 0.25);
}
.ant-input-number-disabled:hover {
  border-color: #e2e2e2;
}
textarea.ant-input-number {
  max-width: 100%;
  height: auto;
  vertical-align: bottom;
}
.ant-input-number-lg {
  padding: 6px 7px;
  height: 32px;
}
.ant-input-number-sm {
  padding: 1px 7px;
  height: 22px;
}
.ant-input-number-handler {
  text-align: center;
  line-height: 0;
  height: 50%;
  overflow: hidden;
  color: rgba(0, 0, 0, 0.43);
  position: relative;
  transition: all 0.1s linear;
  display: block;
  width: 100%;
  font-weight: bold;
}
.ant-input-number-handler:active {
  background: #f4f4f4;
}
.ant-input-number-handler:hover .ant-input-number-handler-up-inner,
.ant-input-number-handler:hover .ant-input-number-handler-down-inner {
  color: #6ddab5;
}
.ant-input-number-handler-up-inner,
.ant-input-number-handler-down-inner {
  font-style: normal;
  vertical-align: baseline;
  text-align: center;
  text-transform: none;
  line-height: 1;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  line-height: 12px;
  user-select: none;
  position: absolute;
  width: 12px;
  height: 12px;
  transition: all 0.1s linear;
  display: inline-block;
  font-size: 12px;
  font-size: 7px \9;
  transform: scale(0.58333333) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
  right: 4px;
  color: rgba(0, 0, 0, 0.43);
}
.ant-input-number-handler-up-inner:before,
.ant-input-number-handler-down-inner:before {
  display: block;
  font-family: "anticon" !important;
}
:root .ant-input-number-handler-up-inner,
:root .ant-input-number-handler-down-inner {
  filter: none;
}
:root .ant-input-number-handler-up-inner,
:root .ant-input-number-handler-down-inner {
  font-size: 12px;
}
.ant-input-number:hover {
  border-color: #6ddab5;
}
.ant-input-number-focused {
  border-color: #6ddab5;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(63, 206, 158, 0.2);
}
.ant-input-number-disabled {
  background-color: #f7f7f7;
  opacity: 1;
  cursor: not-allowed;
  color: rgba(0, 0, 0, 0.25);
}
.ant-input-number-disabled:hover {
  border-color: #e2e2e2;
}
.ant-input-number-input {
  width: 100%;
  text-align: left;
  outline: 0;
  -moz-appearance: textfield;
  height: 26px;
  transition: all 0.3s linear;
  color: rgba(0, 0, 0, 0.65);
  background-color: #fff;
  border: 0;
  border-radius: 4px;
  padding: 0 7px;
  display: block;
}
.ant-input-number-input::-moz-placeholder {
  color: rgba(0, 0, 0, 0.25);
  opacity: 1;
}
.ant-input-number-input:-ms-input-placeholder {
  color: rgba(0, 0, 0, 0.25);
}
.ant-input-number-input::-webkit-input-placeholder {
  color: rgba(0, 0, 0, 0.25);
}
.ant-input-number-input[disabled] {
  background-color: #f7f7f7;
  opacity: 1;
  cursor: not-allowed;
  color: rgba(0, 0, 0, 0.25);
}
.ant-input-number-input[disabled]:hover {
  border-color: #e2e2e2;
}
.ant-input-number-lg {
  padding: 0;
}
.ant-input-number-lg input {
  height: 30px;
}
.ant-input-number-sm {
  padding: 0;
}
.ant-input-number-sm input {
  height: 20px;
}
.ant-input-number-handler-wrap {
  border-left: 1px solid #d9d9d9;
  width: 22px;
  height: 100%;
  background: #fff;
  position: absolute;
  top: 0;
  right: 0;
  opacity: 0;
  border-radius: 0 4px 4px 0;
  transition: opacity 0.24s linear 0.1s;
  z-index: 2;
}
.ant-input-number-handler-wrap:hover .ant-input-number-handler {
  height: 40%;
}
.ant-input-number:hover .ant-input-number-handler-wrap {
  opacity: 1;
}
.ant-input-number-handler-up {
  cursor: pointer;
}
.ant-input-number-handler-up-inner {
  top: 50%;
  margin-top: -6px;
}
.ant-input-number-handler-up-inner:before {
  text-align: center;
  content: "\\e61e";
}
.ant-input-number-handler-up:hover {
  height: 60% !important;
}
.ant-input-number-handler-down {
  border-top: 1px solid #d9d9d9;
  top: -1px;
  cursor: pointer;
}
.ant-input-number-handler-down-inner {
  top: 50%;
  margin-top: -6px;
}
.ant-input-number-handler-down-inner:before {
  text-align: center;
  content: "\\e61d";
}
.ant-input-number-handler-down:hover {
  height: 60% !important;
}
.ant-input-number-handler-down-disabled .ant-input-number-handler-down-inner,
.ant-input-number-handler-up-disabled .ant-input-number-handler-down-inner,
.ant-input-number-disabled .ant-input-number-handler-down-inner,
.ant-input-number-handler-down-disabled .ant-input-number-handler-up-inner,
.ant-input-number-handler-up-disabled .ant-input-number-handler-up-inner,
.ant-input-number-disabled .ant-input-number-handler-up-inner {
  opacity: 0.72;
  color: #ccc !important;
  cursor: not-allowed;
}
.ant-input-number-disabled .ant-input-number-input {
  opacity: 0.72;
  cursor: not-allowed;
  background-color: #f7f7f7;
}
.ant-input-number-disabled .ant-input-number-handler-wrap {
  display: none;
}
.ant-input-number-disabled .ant-input-number-handler {
  opacity: 0.72;
  color: #ccc !important;
  cursor: not-allowed;
}
`
                ]
            },] },
];
/**
 * @nocollapse
 */
NzInputNumberComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
];
NzInputNumberComponent.propDecorators = {
    '_inputNumber': [{ type: ViewChild, args: ['inputNumber',] },],
    'nzPlaceHolder': [{ type: Input },],
    'nzMin': [{ type: Input },],
    'nzMax': [{ type: Input },],
    'nzDisabled': [{ type: Input }, { type: HostBinding, args: ['class.ant-input-number-disabled',] },],
    'nzSize': [{ type: Input },],
    'nzStep': [{ type: Input },],
};

class NzInputNumberModule {
}
NzInputNumberModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, FormsModule],
                declarations: [NzInputNumberComponent],
                exports: [NzInputNumberComponent]
            },] },
];
/**
 * @nocollapse
 */
NzInputNumberModule.ctorParameters = () => [];

class NzMessageConfig {
}
const NZ_MESSAGE_DEFAULT_CONFIG = new InjectionToken('NZ_MESSAGE_DEFAULT_CONFIG');
const NZ_MESSAGE_CONFIG = new InjectionToken('NZ_MESSAGE_CONFIG');
const NZ_MESSAGE_DEFAULT_CONFIG_PROVIDER = {
    provide: NZ_MESSAGE_DEFAULT_CONFIG,
    useValue: {
        nzDuration: 1500,
        nzAnimate: true,
        nzPauseOnHover: true,
        nzMaxStack: 7,
    }
};

class NzMessageContainerComponent {
    /**
     * @param {?} defaultConfig
     * @param {?} config
     */
    constructor(defaultConfig, config) {
        this.messages = [];
        this.config = Object.assign({}, defaultConfig, config);
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @param {?} message
     * @return {?}
     */
    createMessage(message) {
        if (this.messages.length >= this.config.nzMaxStack) {
            this.messages.splice(0, 1);
        }
        message.options = this._mergeMessageOptions(message.options);
        this.messages.push(message);
    }
    /**
     * @param {?} messageId
     * @return {?}
     */
    removeMessage(messageId) {
        this.messages.some((message, index) => {
            if (message.messageId === messageId) {
                this.messages.splice(index, 1);
                return true;
            }
        });
    }
    /**
     * @return {?}
     */
    removeMessageAll() {
        this.messages = [];
    }
    /**
     * @param {?} options
     * @return {?}
     */
    _mergeMessageOptions(options) {
        const /** @type {?} */ defaultOptions = {
            nzDuration: this.config.nzDuration,
            nzAnimate: this.config.nzAnimate,
            nzPauseOnHover: this.config.nzPauseOnHover
        };
        return Object.assign(defaultOptions, options);
    }
}
NzMessageContainerComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-message-container',
                encapsulation: ViewEncapsulation.None,
                template: `
    <div class="ant-message">
      <nz-message *ngFor="let message of messages; let i = index" [nzMessage]="message" [nzIndex]="i"></nz-message>
    </div>
  `,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-message {
  font-size: 12px;
  position: fixed;
  z-index: 1010;
  width: 100%;
  top: 16px;
  left: 0;
  pointer-events: none;
}
.ant-message-notice {
  padding: 8px;
  text-align: center;
}
.ant-message-notice:first-child {
  margin-top: -8px;
}
.ant-message-notice-content {
  padding: 8px 16px;
  border-radius: 4px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
  background: #fff;
  display: inline-block;
  pointer-events: all;
}
.ant-message-success .anticon {
  color: #00a854;
}
.ant-message-error .anticon {
  color: #f04134;
}
.ant-message-warning .anticon {
  color: #ffbf00;
}
.ant-message-info .anticon,
.ant-message-loading .anticon {
  color: #3FCE9E;
}
.ant-message .anticon {
  margin-right: 8px;
  font-size: 14px;
  top: 1px;
  position: relative;
}
.ant-message-notice.move-up-leave.move-up-leave-active {
  animation-name: MessageMoveOut;
  overflow: hidden;
  animation-duration: .3s;
}
@keyframes MessageMoveOut {
  0% {
    opacity: 1;
    max-height: 150px;
    padding: 8px;
  }
  100% {
    opacity: 0;
    max-height: 0;
    padding: 0;
  }
}
`
                ]
            },] },
];
/**
 * @nocollapse
 */
NzMessageContainerComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NZ_MESSAGE_DEFAULT_CONFIG,] },] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NZ_MESSAGE_CONFIG,] },] },
];

class NzMessageComponent {
    /**
     * @param {?} _messageContainer
     */
    constructor(_messageContainer) {
        this._messageContainer = _messageContainer;
        this._eraseTimer = null;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._options = this.nzMessage.options;
        if (this._options.nzAnimate) {
            this.nzMessage.state = 'enter';
        }
        this._autoErase = this._options.nzDuration > 0;
        if (this._autoErase) {
            this._initErase();
            this._startEraseTimeout();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this._autoErase) {
            this._clearEraseTimeout();
        }
    }
    /**
     * @return {?}
     */
    onEnter() {
        if (this._autoErase && this._options.nzPauseOnHover) {
            this._clearEraseTimeout();
            this._updateTTL();
        }
    }
    /**
     * @return {?}
     */
    onLeave() {
        if (this._autoErase && this._options.nzPauseOnHover) {
            this._startEraseTimeout();
        }
    }
    /**
     * @return {?}
     */
    _destroy() {
        if (this._options.nzAnimate) {
            this.nzMessage.state = 'leave';
            setTimeout(() => this._messageContainer.removeMessage(this.nzMessage.messageId), 200);
        }
        else {
            this._messageContainer.removeMessage(this.nzMessage.messageId);
        }
    }
    /**
     * @return {?}
     */
    _initErase() {
        this._eraseTTL = this._options.nzDuration;
        this._eraseTimingStart = Date.now();
    }
    /**
     * @return {?}
     */
    _updateTTL() {
        if (this._autoErase) {
            this._eraseTTL -= Date.now() - this._eraseTimingStart;
        }
    }
    /**
     * @return {?}
     */
    _startEraseTimeout() {
        if (this._eraseTTL > 0) {
            this._clearEraseTimeout(); // To prevent calling _startEraseTimeout() more times to create more timer
            this._eraseTimer = window.setTimeout(() => this._destroy(), this._eraseTTL);
            this._eraseTimingStart = Date.now();
        }
        else {
            this._destroy();
        }
    }
    /**
     * @return {?}
     */
    _clearEraseTimeout() {
        if (this._eraseTimer !== null) {
            window.clearTimeout(this._eraseTimer);
            this._eraseTimer = null;
        }
    }
}
NzMessageComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-message',
                encapsulation: ViewEncapsulation.None,
                animations: [
                    trigger('enterLeave', [
                        state('enter', style({ opacity: 1, transform: 'translateY(0)' })),
                        transition('* => enter', [
                            style({ opacity: 0, transform: 'translateY(-50%)' }),
                            animate('100ms linear')
                        ]),
                        state('leave', style({ opacity: 0, transform: 'translateY(-50%)' })),
                        transition('* => leave', [
                            style({ opacity: 1, transform: 'translateY(0)' }),
                            animate('100ms linear')
                        ]),
                    ])
                ],
                template: `
    <div class="ant-message-notice"
      [@enterLeave]="nzMessage.state"
      (mouseenter)="onEnter()"
      (mouseleave)="onLeave()">
      <div class="ant-message-notice-content">
        <div *ngIf="!nzMessage.html" class="ant-message-custom-content" [ngClass]="'ant-message-' + nzMessage.type">
          <ng-container [ngSwitch]="nzMessage.type">
            <i *ngSwitchCase="'success'" class="anticon anticon-check-circle"></i>
            <i *ngSwitchCase="'info'" class="anticon anticon-info-circle"></i>
            <i *ngSwitchCase="'warning'" class="anticon anticon-exclamation-circle"></i>
            <i *ngSwitchCase="'error'" class="anticon anticon-cross-circle"></i>
            <i *ngSwitchCase="'loading'" class="anticon anticon-spin anticon-loading"></i>
          </ng-container>
          <span>{{nzMessage.content}}</span>
        </div>
        <div *ngIf="nzMessage.html" [innerHTML]="nzMessage.html"></div>
      </div>
    </div>
  `,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-message {
  font-size: 12px;
  position: fixed;
  z-index: 1010;
  width: 100%;
  top: 16px;
  left: 0;
  pointer-events: none;
}
.ant-message-notice {
  padding: 8px;
  text-align: center;
}
.ant-message-notice:first-child {
  margin-top: -8px;
}
.ant-message-notice-content {
  padding: 8px 16px;
  border-radius: 4px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
  background: #fff;
  display: inline-block;
  pointer-events: all;
}
.ant-message-success .anticon {
  color: #00a854;
}
.ant-message-error .anticon {
  color: #f04134;
}
.ant-message-warning .anticon {
  color: #ffbf00;
}
.ant-message-info .anticon,
.ant-message-loading .anticon {
  color: #3FCE9E;
}
.ant-message .anticon {
  margin-right: 8px;
  font-size: 14px;
  top: 1px;
  position: relative;
}
.ant-message-notice.move-up-leave.move-up-leave-active {
  animation-name: MessageMoveOut;
  overflow: hidden;
  animation-duration: .3s;
}
@keyframes MessageMoveOut {
  0% {
    opacity: 1;
    max-height: 150px;
    padding: 8px;
  }
  100% {
    opacity: 0;
    max-height: 0;
    padding: 0;
  }
}
`
                ]
            },] },
];
/**
 * @nocollapse
 */
NzMessageComponent.ctorParameters = () => [
    { type: NzMessageContainerComponent, },
];
NzMessageComponent.propDecorators = {
    'nzMessage': [{ type: Input },],
    'nzIndex': [{ type: Input },],
};

/**
 * @param {?} value
 * @return {?}
 */
function coerceBooleanProperty$1(value) {
    return value != null && `${value}` !== 'false';
}
// Default set of positions for the overlay. Follows the behavior of a dropdown
const defaultPositionList$1 = [
    new ConnectionPositionPair({ originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' }),
    new ConnectionPositionPair({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' })
];
class FloaterOptions {
    constructor() {
        // ---------------------------------------------------------
        // | Configurations
        // ---------------------------------------------------------
        // Current position strategy
        this.positionStrategyType = 'connected';
        // Whether keep overlay existing except call detach() or destroy() manually
        this.persist = false;
        // ---------------------------------------------------------
        // | Emitters
        // ---------------------------------------------------------
        // Event emitted when the backdrop is clicked
        this.backdropClick = new EventEmitter();
        // Event emitted when the position has changed
        this.positionChange = new EventEmitter();
        // Event emitted when the overlay has been attached
        this.attach = new EventEmitter();
        // Event emitted when the overlay has been detached
        this.detach = new EventEmitter();
    }
}
class FloaterProps extends FloaterOptions {
    /**
     * @param {?} options
     */
    constructor(options) {
        super();
        this._hasBackdrop = false;
        this._emitterSubscriptions = [];
        // Validating
        this._validateOptions(options);
        // Merge options
        Object.assign(this, options);
        // Default values
        this._initDefaultOptions();
        // Event listeners
        this._initEventListeners();
    }
    /**
     * @return {?}
     */
    get hasBackdrop() {
        return this._hasBackdrop;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set hasBackdrop(value) {
        this._hasBackdrop = coerceBooleanProperty$1(value);
    }
    /**
     * @param {?} options
     * @return {?}
     */
    _validateOptions(options) {
        if (!options.content) {
            throw new Error('[FloaterOptions] "content" is required.');
        }
        if (options.content instanceof TemplateRef && !options.viewContainerRef) {
            throw new Error('[FloaterOptions] "viewContainerRef" is required for "content" of TemplateRef.');
        }
        if (options.positionStrategyType === 'connected' && !options.positionStrategyOptions) {
            throw new Error('[FloaterOptions] "positionStrategyOptions" can\'t be empty when position strategy type is "connected".');
        }
    }
    /**
     * @return {?}
     */
    _initDefaultOptions() {
        const /** @type {?} */ strategyOptions = (this.positionStrategyOptions);
        if (this.positionStrategyType === 'connected') {
            if (!strategyOptions.positions || !strategyOptions.positions.length) {
                strategyOptions.positions = defaultPositionList$1;
            }
        }
    }
    /**
     * @return {?}
     */
    _initEventListeners() {
        const /** @type {?} */ subscriptions = this._emitterSubscriptions;
        if (this.onBackdropClick) {
            subscriptions.push(this.backdropClick.subscribe(this.onBackdropClick));
        }
        if (this.onPositionChange) {
            subscriptions.push(this.positionChange.subscribe(this.onPositionChange));
        }
        if (this.onAttach) {
            subscriptions.push(this.attach.subscribe(this.onAttach));
        }
        if (this.onDetach) {
            subscriptions.push(this.detach.subscribe(this.onDetach));
        }
    }
    /**
     * @param {?} position
     * @return {?}
     */
    setPositionStrategy(position) {
        this._position = position;
    }
    /**
     * @return {?}
     */
    getPositionStrategy() {
        return this._position;
    }
    /**
     * @return {?}
     */
    destroy() {
        this._emitterSubscriptions.forEach(subscription => subscription.unsubscribe());
        this._emitterSubscriptions = null;
    }
}

/**
 * Floater object to manage overlay (Enhanced verion of ConnectedOverlayDirective)
 * NOTE: don't like ConnectedOverlayDirective, Floater has no dependencies with directive (such as Component, Directive ...)
 *  but this will means that you should destroy it and incidental resources manually using destroy() method!
 */
class Floater {
    /**
     * @param {?} _overlay
     * @param {?} _renderer
     * @param {?} options
     */
    constructor(_overlay, _renderer, options) {
        this._overlay = _overlay;
        this._renderer = _renderer;
        this._stateAttached = false;
        this._stateDestroyed = false;
        this._props = new FloaterProps(options);
        const { content, viewContainerRef, injector } = this._props;
        if (content instanceof TemplateRef) {
            this._contentPortal = new TemplatePortal(content, viewContainerRef);
        }
        else if (typeof content === 'function') {
            this._contentPortal = new ComponentPortal(content, viewContainerRef, injector);
        }
        else {
            throw new Error('[Floater] Not support "content" type.');
        }
    }
    /**
     * @return {?}
     */
    get overlayRef() {
        return this._overlayRef;
    }
    /**
     * @return {?}
     */
    get attachedResult() {
        return this._attachedResult;
    }
    /**
     * @return {?}
     */
    get dir() {
        return this._props.dir ? this._props.dir.value : 'ltr';
    }
    /**
     * @return {?}
     */
    getComponentInstance() {
        if (!this._isCreatedByComponent()) {
            throw new Error(`Cant't get ComponentRef when created without ComponentType (Should fill the "content" option with value of ComponentType)`);
        }
        return ((this.attachedResult)).instance;
    }
    /**
     * @return {?}
     */
    attach() {
        if (!this._stateAttached) {
            this._stateAttached = true;
            this._attachOverlay();
        }
        return this;
    }
    /**
     * @return {?}
     */
    detach() {
        if (this._stateAttached) {
            this._stateAttached = false;
            this._detachOverlay();
        }
        return this;
    }
    /**
     * @return {?}
     */
    destroy() {
        if (!this._stateDestroyed) {
            this._stateDestroyed = true;
            this._destroyOverlay();
        }
        return this;
    }
    /**
     * @return {?}
     */
    _attachOverlay() {
        // console.log('[Floater] Attach overlay');
        const { hasBackdrop, backdropClick, attach, persist } = this._props;
        if (!this._overlayRef) {
            this._createOverlay();
        }
        const /** @type {?} */ position = this._props.getPositionStrategy();
        if (position instanceof ConnectedPositionStrategy) {
            position.withDirection(this.dir);
        }
        this._overlayRef.getState().direction = this.dir;
        if (!persist) {
            this._initEscapeListener();
        }
        if (!this._overlayRef.hasAttached()) {
            this._attachedResult = this._overlayRef.attach(this._contentPortal);
            if (this._isCreatedByComponent()) {
                this._handleAttachedComponent(/** @type {?} */ (this._attachedResult));
            }
            if (attach) {
                attach.emit();
            }
        }
        if (hasBackdrop && backdropClick) {
            this._backdropSubscription = this._overlayRef.backdropClick().subscribe(() => {
                backdropClick.emit();
            });
        }
    }
    /**
     * @return {?}
     */
    _detachOverlay() {
        // console.log('[Floater] Detach overlay');
        const { detach } = this._props;
        if (this._overlayRef) {
            this._overlayRef.detach();
            if (detach) {
                detach.emit();
            }
        }
        if (this._backdropSubscription) {
            this._backdropSubscription.unsubscribe();
            this._backdropSubscription = null;
        }
        if (this._escapeListener) {
            this._escapeListener();
            this._escapeListener = null;
        }
    }
    /**
     * @return {?}
     */
    _destroyOverlay() {
        // console.log('[Floater] Destroy overlay');
        if (this._overlayRef) {
            this.overlayRef.dispose();
        }
        if (this._backdropSubscription) {
            this._backdropSubscription.unsubscribe();
        }
        if (this._positionSubscription) {
            this._positionSubscription.unsubscribe();
        }
        if (this._escapeListener) {
            this._escapeListener();
        }
        this._props.destroy();
    }
    /**
     * @return {?}
     */
    _createOverlay() {
        this._overlayRef = this._overlay.create(this._buildConfig(), this._props.paneClass);
    }
    /**
     * @return {?}
     */
    _buildConfig() {
        const /** @type {?} */ overlayConfig = new OverlayState();
        const { width, height, minWidth, minHeight, hasBackdrop, backdropClass } = this._props;
        if (width || width === 0) {
            overlayConfig.width = width;
        }
        if (height || height === 0) {
            overlayConfig.height = height;
        }
        if (minWidth || minWidth === 0) {
            overlayConfig.minWidth = minWidth;
        }
        if (minHeight || minHeight === 0) {
            overlayConfig.minHeight = minHeight;
        }
        overlayConfig.hasBackdrop = hasBackdrop;
        if (backdropClass) {
            overlayConfig.backdropClass = backdropClass;
        }
        const /** @type {?} */ strategy = this._createPositionStrategy();
        if (strategy) {
            this._props.setPositionStrategy(strategy);
            overlayConfig.positionStrategy = strategy;
            // Use noop scroll strategy by default
            overlayConfig.scrollStrategy =
                this._props.scrollStrategy ? this._props.scrollStrategy : this._overlay.scrollStrategies.noop();
        }
        return overlayConfig;
    }
    /**
     * @return {?}
     */
    _createPositionStrategy() {
        const { positionStrategyType: strategyType, positionStrategyOptions: strategyOptions } = this._props;
        let /** @type {?} */ strategy = null;
        if (strategyType === 'connected') {
            const { positions, origin, offsetX, offsetY } = (strategyOptions);
            const /** @type {?} */ pos = positions[0];
            const /** @type {?} */ originPoint = { originX: pos.originX, originY: pos.originY };
            const /** @type {?} */ overlayPoint = { overlayX: pos.overlayX, overlayY: pos.overlayY };
            const /** @type {?} */ elementRef = origin instanceof OverlayOrigin ? origin.elementRef : origin;
            strategy = this._overlay.position()
                .connectedTo(elementRef, originPoint, overlayPoint)
                .withOffsetX(offsetX || 0)
                .withOffsetY(offsetY || 0);
            this._handlePositionChanges(strategy);
            if (!this._props.scrollStrategy) {
                this._props.scrollStrategy = this._overlay.scrollStrategies.reposition();
            }
        }
        else if (strategyType === 'free') {
            strategy = this._overlay.position().free();
        }
        return strategy;
    }
    /**
     * @param {?} strategy
     * @return {?}
     */
    _handlePositionChanges(strategy) {
        const { positionStrategyOptions: strategyOptions, positionChange } = this._props;
        const /** @type {?} */ positions = ((strategyOptions)).positions;
        for (let /** @type {?} */ i = 1; i < positions.length; i++) {
            strategy.withFallbackPosition({ originX: positions[i].originX, originY: positions[i].originY }, { overlayX: positions[i].overlayX, overlayY: positions[i].overlayY });
        }
        if (positionChange) {
            this._positionSubscription =
                strategy.onPositionChange.subscribe(pos => positionChange.emit(pos));
        }
    }
    /**
     * @return {?}
     */
    _isCreatedByComponent() {
        return this._contentPortal instanceof ComponentPortal;
    }
    /**
     * @param {?} componentRef
     * @return {?}
     */
    _handleAttachedComponent(componentRef) {
        const /** @type {?} */ instance = componentRef.instance, /** @type {?} */ afterComponentCreated = this._props.afterComponentCreated;
        if (afterComponentCreated) {
            afterComponentCreated(instance);
        }
    }
    /**
     * @return {?}
     */
    _initEscapeListener() {
        const /** @type {?} */ listener = (event) => {
            if (event.keyCode === ESCAPE) {
                this._detachOverlay();
            }
        };
        if (this._renderer instanceof Renderer2) {
            this._escapeListener = this._renderer.listen('document', 'keydown', listener);
        }
        else if (this._renderer instanceof Document) {
            // console.log('[Floater/_initEscapeListener]use document', this._renderer);
            this._renderer.addEventListener('keydown', listener);
            this._escapeListener = () => {
                ((this._renderer)).removeEventListener('keydown', listener);
            };
        }
    }
}

Injectable();
class FloaterService {
    /**
     * @param {?} _overlay
     * @param {?} _document
     */
    constructor(_overlay, _document) {
        this._overlay = _overlay;
        this._document = _document;
        // console.log('[FloaterService] constructed once.');
    }
    /**
     * @template T
     * @param {?} strategyType
     * @param {?} content
     * @param {?=} viewContainerRef
     * @param {?=} strategyOptions
     * @param {?=} options
     * @return {?}
     */
    create(strategyType, content, viewContainerRef, strategyOptions, options) {
        options = Object.assign(options || {}, {
            content: content,
            viewContainerRef: viewContainerRef,
            positionStrategyType: strategyType,
            positionStrategyOptions: strategyOptions
        });
        return new Floater(this._overlay, this._document, options);
    }
    /**
     * @template T
     * @param {?} content
     * @param {?=} viewContainerRef
     * @param {?=} strategyOptions
     * @param {?=} options
     * @return {?}
     */
    createConnected(content, viewContainerRef, strategyOptions, options) {
        return this.create('connected', content, viewContainerRef, strategyOptions, options);
    }
    /**
     * @template T
     * @param {?} content
     * @param {?=} viewContainerRef
     * @param {?=} strategyOptions
     * @param {?=} options
     * @return {?}
     */
    createFree(content, viewContainerRef, strategyOptions, options) {
        return this.create('free', content, viewContainerRef, strategyOptions, options);
    }
    /**
     * Persistently create/initialize a Component and append it's DOM to body(under overlay)
     * NOTE: the attaching operation is persistent, means that it is no methods to detach the component while attached (no relative resources can be released), SO take care of using it!
     * @template T
     * @param {?} component Component class
     * @param {?=} viewContainerRef Container reference that component will created and append to
     * @param {?=} injector Injector that will be used while creating component dynamically
     * @return {?} Instance of the component
     */
    persistAttachComponent(component, viewContainerRef, injector) {
        return this.createFree(component, viewContainerRef, null, {
            injector: injector,
            persist: true
        }).attach().getComponentInstance();
    }
}
/**
 * @nocollapse
 */
FloaterService.ctorParameters = () => [
    { type: Overlay, },
    { type: Document, decorators: [{ type: Inject, args: [DOCUMENT,] },] },
];
/**
 * @param {?} overlay
 * @param {?} doc
 * @param {?} floaterService
 * @return {?}
 */
function FLOATER_SERVICE_PROVIDER_FACTORY(overlay, doc, floaterService) {
    return floaterService || new FloaterService(overlay, doc);
}
const FLOATER_SERVICE_PROVIDER = {
    provide: FloaterService,
    useFactory: FLOATER_SERVICE_PROVIDER_FACTORY,
    deps: [Overlay, DOCUMENT, [new Optional(), new SkipSelf(), FloaterService]]
};

const providers$1 = [
    FLOATER_SERVICE_PROVIDER
];
class FloaterModule {
}
FloaterModule.decorators = [
    { type: NgModule, args: [{
                imports: [OverlayModule],
                providers: providers$1
            },] },
];
/**
 * @nocollapse
 */
FloaterModule.ctorParameters = () => [];

const providers = [
    NZ_MESSAGE_DEFAULT_CONFIG_PROVIDER
];
class NzMessageModule {
}
NzMessageModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, FloaterModule],
                declarations: [NzMessageContainerComponent, NzMessageComponent],
                providers: providers,
                entryComponents: [NzMessageContainerComponent]
            },] },
];
/**
 * @nocollapse
 */
NzMessageModule.ctorParameters = () => [];

class NzModalSubject extends Subject$1 {
    constructor() {
        super();
        this.eventsQueue = {};
        this.subscribe((value) => {
            const eventQueue = this.eventsQueue[value] || [];
            eventQueue.forEach(cb => {
                if (cb) {
                    cb();
                }
            });
        });
    }
    /**
     * @param {?=} type
     * @return {?}
     */
    destroy(type = 'onCancel') {
        if (!this.isStopped && !this.closed) {
            this.next(type);
        }
    }
    /**
     * @param {?} eventType
     * @param {?} cb
     * @return {?}
     */
    on(eventType, cb) {
        if (this.eventsQueue[eventType]) {
            this.eventsQueue[eventType].push(cb);
        }
        else {
            this.eventsQueue[eventType] = [cb];
        }
    }
}
NzModalSubject.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
NzModalSubject.ctorParameters = () => [];

class NzGlobalMonitorService {
    constructor() {
        this.counter = 0;
        this.lastClickPos = {
            x: 0,
            y: 0
        };
        this._navItemSource = new EventEmitter();
        this._observeGlobalEvents();
    }
    /**
     * @return {?}
     */
    getGlobalCount() {
        return ++this.counter;
    }
    /**
     * @param {?} status
     * @return {?}
     */
    setDocumentOverflowHidden(status) {
        document.body.style.overflow = status ? 'hidden' : '';
    }
    ;
    /**
     * @return {?}
     */
    _observeGlobalEvents() {
        // 监听document的点击事件，记录点击坐标，并抛出 documentClick 事件
        document.addEventListener('click', (e) => {
            this.lastClickPos = {
                x: e.clientX,
                y: e.clientY
            };
            this._navItemSource.emit('documentClick');
        });
    }
}
var nzGlobalMonitor = new NzGlobalMonitorService();

class NzModalComponent {
    /**
     * @param {?} subject
     * @param {?} _vcr
     */
    constructor(subject, _vcr) {
        this.subject = subject;
        this._vcr = _vcr;
        this._prefixCls = 'ant-modal';
        this._visible = false;
        this._confirmLoading = false;
        this._closable = true;
        this._width = '520px';
        this._zIndex = 1000;
        this._maskClosable = true;
        this._title = '';
        this._content = '';
        this._okText = '确 定';
        this._cancelText = '取 消';
        this._style = {};
        this._wrapClass = `${this._prefixCls}-wrap`;
        this._customClass = '';
        this._animationStatus = '';
        this._componentParams = {};
        this._footerHide = false;
        this.modalId = `nzModal${nzGlobalMonitor.getGlobalCount()}`;
        this.nzVisibleChange = new EventEmitter();
        this.nzOnOk = new EventEmitter();
        this.nzOnCancel = new EventEmitter();
        this.subject.modalId = this.modalId;
    }
    /**
     * @return {?}
     */
    get nzVisible() {
        return this._visible;
    }
    ;
    /**
     * @param {?} value
     * @return {?}
     */
    set nzVisible(value) {
        // debugger
        if (this._visible === value) {
            return;
        }
        if (value) {
            this.anmiateFade('enter');
            this.subject.next('onShow');
            // 每次触发点击事件的时候，通过全局监听的类，记录下点击的位置，计算动画的origin
            setTimeout(() => {
                this.setStyles({
                    x: nzGlobalMonitor.lastClickPos.x || 0,
                    y: nzGlobalMonitor.lastClickPos.y || 0
                });
            });
        }
        else {
            this.anmiateFade('leave');
            this.subject.next('onHide');
        }
        this._visible = value;
        this.nzVisibleChange.emit(this._visible);
        // 设置全局的overflow样式
        nzGlobalMonitor.setDocumentOverflowHidden(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzConfirmLoading(value) {
        this._confirmLoading = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzClosable(value) {
        this._closable = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzClass(value) {
        this._customClass = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzWidth(value) {
        this._width = typeof value === 'number' ? value + 'px' : value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzZIndex(value) {
        this._zIndex = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzTitle(value) {
        if (value instanceof TemplateRef) {
            this._titleTpl = value;
        }
        else {
            this._title = (value);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzContent(value) {
        if (value instanceof ComponentFactory) {
            // 如果容器对象已存在，则直接渲染，如果不存在，则设置到_bodyComponent，在ngAfterViewInit中执行
            if (this.bodyEl) {
                const /** @type {?} */ compRef = this.bodyEl.createComponent(value, null, this._vcr.injector);
                Object.assign(compRef.instance, this._componentParams);
            }
            else {
                this._bodyComponent = value;
            }
        }
        else if (value instanceof TemplateRef) {
            this._contentTpl = value;
        }
        else {
            this._content = (value);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzFooter(value) {
        if (value instanceof TemplateRef) {
            this._footerTpl = value;
        }
        else {
            this._footerHide = !value;
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzOkText(value) {
        this._okText = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzCancelText(value) {
        this._cancelText = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzMaskClosable(value) {
        this._maskClosable = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzStyle(value) {
        this._style = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzWrapClassName(value) {
        if (value) {
            this._wrapClass = `${this._prefixCls}-wrap ${value}`;
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzComponentParams(value) {
        this._componentParams = value;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onEsc(e) {
        this.clickCancel(e);
    }
    /**
     * @param {?=} origin
     * @return {?}
     */
    setStyles(origin) {
        const /** @type {?} */ el = this.contentEl.nativeElement;
        const /** @type {?} */ transformOrigin = origin ? `${origin.x - el.offsetLeft}px ${origin.y - el.offsetTop}px 0px` : '';
        this._bodyStyleMap = Object.assign({
            'width': this._width,
            'transform-origin': transformOrigin
        }, this._style);
    }
    /**
     * @return {?}
     */
    setClassMap() {
        this._maskClassMap = {
            [`${this._prefixCls}-mask`]: true,
            [`${this._prefixCls}-mask-hidden`]: !this._visible && !this._animationStatus,
            'fade-enter': this._animationStatus === 'enter',
            'fade-enter-active': this._animationStatus === 'enter',
            'fade-leave': this._animationStatus === 'leave',
            'fade-leave-active': this._animationStatus === 'leave'
        };
        this._bodyClassMap = {
            [this._prefixCls]: true,
            'zoom-enter': this._animationStatus === 'enter',
            'zoom-enter-active': this._animationStatus === 'enter',
            'zoom-leave': this._animationStatus === 'leave',
            'zoom-leave-active': this._animationStatus === 'leave'
        };
    }
    /**
     * @param {?} status
     * @return {?}
     */
    anmiateFade(status) {
        this._animationStatus = status;
        this.setClassMap();
        setTimeout(_ => {
            this._animationStatus = '';
            this.setClassMap();
            this.subject.next(status === 'enter' ? 'onShown' : 'onHidden');
            // modal打开后，默认焦点设置到modal上
            if (status === 'enter') {
                this.contentEl.nativeElement.parentNode.focus();
            }
        }, 200);
    }
    /**
     * @param {?} e
     * @return {?}
     */
    closeFromMask(e) {
        if (this._maskClosable && e.target.getAttribute('role') === 'dialog') {
            this.clickCancel(e);
        }
    }
    /**
     * @param {?} loading
     * @return {?}
     */
    setConfirmLoading(loading) {
        this.nzConfirmLoading = loading;
    }
    /**
     * @return {?}
     */
    open() {
        this.nzVisible = true;
    }
    /**
     * @return {?}
     */
    close() {
        this.nzVisible = false;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    clickOk(e) {
        if (this.nzOnOk) {
            this.nzOnOk.emit(e);
        }
        else {
            this.nzVisible = false;
        }
        this.subject.next('onOk');
    }
    /**
     * @param {?} e
     * @return {?}
     */
    clickCancel(e) {
        this.nzOnCancel.emit(e);
        this.subject.next('onCancel');
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.setClassMap();
        this.setStyles();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this._bodyComponent) {
            const /** @type {?} */ compRef = this.bodyEl.createComponent(this._bodyComponent, null, this._vcr.injector);
            Object.assign(compRef.instance, this._componentParams);
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.subject.next('onDestroy');
        this.subject.unsubscribe();
        this.subject = null;
    }
}
NzModalComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-modal',
                viewProviders: [NzModalSubject],
                encapsulation: ViewEncapsulation.None,
                template: `
    <div [ngClass]="_customClass">
      <div [ngClass]="_maskClassMap"
        [style.zIndex]="_zIndex"></div>
      <div tabindex="-1" role="dialog"
        [attr.aria-labelledby]="modalId"
        (click)="closeFromMask($event)"
        [ngClass]="_wrapClass"
        [style.zIndex]="_zIndex"
        [ngStyle]="{ 'display': !_visible && !_animationStatus ? 'none' : '' }">

        <div #modal_content role="document" [ngClass]="_bodyClassMap" [ngStyle]="_bodyStyleMap">
          <div class="ant-modal-content">
            <ng-template [ngIf]="_closable">
              <button aria-label="Close" class="ant-modal-close" (click)="clickCancel($event)">
                <span class="ant-modal-close-x"></span>
              </button>
            </ng-template>
            <div class="ant-modal-header" *ngIf="_title || _titleTpl">
              <div class="ant-modal-title" [attr.id]="modalId">
                <ng-template #defaultTitle>{{ _title }}</ng-template>
                <ng-template [ngTemplateOutlet]="_titleTpl || defaultTitle"></ng-template>
              </div>
            </div>
            <div class="ant-modal-body">
              <ng-template #defaultContent>{{ _content }}</ng-template>
              <ng-template [ngTemplateOutlet]="_contentTpl || defaultContent"></ng-template>
              <ng-template #modal_component></ng-template>
            </div>
            <div class="ant-modal-footer" *ngIf="!_footerHide">
              <ng-template #defaultFooter>
                <button nz-button [nzType]="'ghost'" [nzSize]="'large'" (click)="clickCancel($event)">
                  <span>{{ _cancelText }}</span>
                </button>
                <button nz-button [nzType]="'primary'" [nzSize]="'large'" (click)="clickOk($event)" [nzLoading]="_confirmLoading">
                  <span>{{ _okText }}</span>
                </button>
              </ng-template>
              <ng-template [ngTemplateOutlet]="_footerTpl || defaultFooter"></ng-template>
            </div>
          </div>
        </div>
        <div tabindex="0" style="width: 0px; height: 0px; overflow: hidden;">sentinel</div>
      </div>
    </div>
  `,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-modal {
  position: relative;
  width: auto;
  margin: 0 auto;
  top: 100px;
  padding-bottom: 24px;
}
.ant-modal-wrap {
  position: fixed;
  overflow: auto;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  z-index: 1000;
  -webkit-overflow-scrolling: touch;
  outline: 0;
}
.ant-modal-title {
  margin: 0;
  font-size: 14px;
  line-height: 21px;
  font-weight: 500;
  color: rgba(0, 0, 0, 0.85);
}
.ant-modal-content {
  position: relative;
  background-color: #fff;
  border: 0;
  border-radius: 4px;
  background-clip: padding-box;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
}
.ant-modal-close {
  cursor: pointer;
  border: 0;
  background: transparent;
  position: absolute;
  right: 0;
  top: 0;
  z-index: 10;
  font-weight: 700;
  line-height: 1;
  text-decoration: none;
  transition: color .3s ease;
  color: rgba(0, 0, 0, 0.43);
  outline: 0;
}
.ant-modal-close-x {
  display: block;
  font-style: normal;
  vertical-align: baseline;
  text-align: center;
  text-transform: none;
  text-rendering: auto;
  width: 48px;
  height: 48px;
  line-height: 48px;
  font-size: 14px;
}
.ant-modal-close-x:before {
  content: "\\e633";
  display: block;
  font-family: "anticon" !important;
}
.ant-modal-close:focus,
.ant-modal-close:hover {
  color: #444;
  text-decoration: none;
}
.ant-modal-header {
  padding: 13px 16px;
  border-radius: 4px 4px 0 0;
  background: #fff;
  color: rgba(0, 0, 0, 0.65);
  border-bottom: 1px solid #e9e9e9;
}
.ant-modal-body {
  padding: 16px;
  font-size: 12px;
  line-height: 1.5;
}
.ant-modal-footer {
  border-top: 1px solid #e9e9e9;
  padding: 10px 16px 10px 10px;
  text-align: right;
  border-radius: 0 0 4px 4px;
}
.ant-modal-footer button + button {
  margin-left: 8px;
  margin-bottom: 0;
}
.ant-modal.zoom-enter,
.ant-modal.zoom-appear {
  animation-duration: 0.3s;
  transform: none;
  opacity: 0;
}
.ant-modal-mask {
  position: fixed;
  top: 0;
  right: 0;
  left: 0;
  bottom: 0;
  background-color: #373737;
  background-color: rgba(55, 55, 55, 0.6);
  height: 100%;
  z-index: 1000;
  filter: alpha(opacity=50);
}
.ant-modal-mask-hidden {
  display: none;
}
.ant-modal-open {
  overflow: hidden;
}
@media (max-width: 768px) {
  .ant-modal {
    width: auto !important;
    margin: 10px;
  }
  .vertical-center-modal .ant-modal {
    flex: 1;
  }
}
.ant-confirm .ant-modal-header {
  display: none;
}
.ant-confirm .ant-modal-close {
  display: none;
}
.ant-confirm .ant-modal-body {
  padding: 30px 40px;
}
.ant-confirm-body-wrapper {
  zoom: 1;
}
.ant-confirm-body-wrapper:before,
.ant-confirm-body-wrapper:after {
  content: " ";
  display: table;
}
.ant-confirm-body-wrapper:after {
  clear: both;
  visibility: hidden;
  font-size: 0;
  height: 0;
}
.ant-confirm-body .ant-confirm-title {
  color: rgba(0, 0, 0, 0.65);
  font-weight: bold;
  font-size: 14px;
}
.ant-confirm-body .ant-confirm-content {
  margin-left: 42px;
  font-size: 12px;
  color: rgba(0, 0, 0, 0.65);
  margin-top: 8px;
}
.ant-confirm-body > .anticon {
  font-size: 24px;
  margin-right: 16px;
  padding: 0 1px;
  float: left;
}
.ant-confirm .ant-confirm-btns {
  margin-top: 30px;
  float: right;
}
.ant-confirm .ant-confirm-btns button + button {
  margin-left: 10px;
  margin-bottom: 0;
}
.ant-confirm-error .ant-confirm-body > .anticon {
  color: #f04134;
}
.ant-confirm-warning .ant-confirm-body > .anticon,
.ant-confirm-confirm .ant-confirm-body > .anticon {
  color: #ffbf00;
}
.ant-confirm-info .ant-confirm-body > .anticon {
  color: #3FCE9E;
}
.ant-confirm-success .ant-confirm-body > .anticon {
  color: #00a854;
}
`
                ]
            },] },
];
/**
 * @nocollapse
 */
NzModalComponent.ctorParameters = () => [
    { type: NzModalSubject, },
    { type: ViewContainerRef, },
];
NzModalComponent.propDecorators = {
    'contentEl': [{ type: ViewChild, args: ['modal_content',] },],
    'bodyEl': [{ type: ViewChild, args: ['modal_component', { read: ViewContainerRef },] },],
    'nzVisible': [{ type: Input },],
    'nzConfirmLoading': [{ type: Input },],
    'nzClosable': [{ type: Input },],
    'nzClass': [{ type: Input },],
    'nzWidth': [{ type: Input },],
    'nzZIndex': [{ type: Input },],
    'nzTitle': [{ type: Input },],
    'nzContent': [{ type: Input },],
    'nzFooter': [{ type: Input },],
    'nzOkText': [{ type: Input },],
    'nzCancelText': [{ type: Input },],
    'nzMaskClosable': [{ type: Input },],
    'nzStyle': [{ type: Input },],
    'nzWrapClassName': [{ type: Input },],
    'nzComponentParams': [{ type: Input },],
    'nzVisibleChange': [{ type: Output },],
    'nzOnOk': [{ type: Output },],
    'nzOnCancel': [{ type: Output },],
    'onEsc': [{ type: HostListener, args: ['keydown.esc', ['$event'],] },],
};

class NzConfirmComponent {
    /**
     * @param {?} subject
     */
    constructor(subject) {
        this.subject = subject;
        this._prefixCls = 'ant-modal';
        this._prefixConfirmCls = 'ant-confirm';
        this._visible = false;
        this._width = '416px';
        this._zIndex = 1000;
        this._iconTypeCls = 'anticon anticon-question-circle';
        this._title = '';
        this._content = '';
        this._maskClosable = true;
        this._okText = '知道了';
        this._cancelText = '';
        this._animationStatus = '';
        this._confirmLoading = false;
        this._customClass = '';
        this._typeCls = `${this._prefixConfirmCls}-confirm`;
    }
    /**
     * @return {?}
     */
    get nzVisible() {
        return this._visible;
    }
    ;
    /**
     * @param {?} value
     * @return {?}
     */
    set nzVisible(value) {
        if (this._visible === value) {
            return;
        }
        if (value) {
            this.anmiateFade('enter');
            this.subject.next('onShow');
            // 每次触发点击事件的时候，通过全局监听的类，记录下点击的位置，计算动画的origin
            setTimeout(() => {
                this.setStyles({
                    x: nzGlobalMonitor.lastClickPos.x || 0,
                    y: nzGlobalMonitor.lastClickPos.y || 0
                });
            }, 10);
        }
        else {
            this.anmiateFade('leave');
            this.subject.next('onHide');
        }
        this._visible = value;
        // 设置全局的overflow样式
        nzGlobalMonitor.setDocumentOverflowHidden(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzWidth(value) {
        this._width = typeof value === 'number' ? value + 'px' : value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzClass(value) {
        this._customClass = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzZIndex(value) {
        this._zIndex = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzTitle(value) {
        if (value instanceof TemplateRef) {
            this._titleTpl = value;
        }
        else {
            this._title = (value);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzContent(value) {
        if (value instanceof TemplateRef) {
            this._contentTpl = value;
        }
        else {
            this._content = (value);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzMaskClosable(value) {
        this._maskClosable = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzOkText(value) {
        this._okText = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzCancelText(value) {
        this._cancelText = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzIconType(value) {
        if (value) {
            this._iconTypeCls = `anticon anticon-${value}`;
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzConfirmType(value) {
        if (value) {
            this._typeCls = `${this._prefixConfirmCls}-${value}`;
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzConfirmLoading(value) {
        this._confirmLoading = value;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onEsc(e) {
        this.subject.next('onCancel');
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onEnter(e) {
        this.subject.next('onOk');
    }
    /**
     * @param {?=} origin
     * @return {?}
     */
    setStyles(origin) {
        const /** @type {?} */ el = this.contentEl.nativeElement;
        const /** @type {?} */ transformOrigin = origin ? `${origin.x - el.offsetLeft}px ${origin.y - el.offsetTop}px 0px` : '';
        this._bodyStyleMap = {
            'width': this._width,
            'transform-origin': transformOrigin
        };
    }
    /**
     * @return {?}
     */
    setClassMap() {
        this._maskClassMap = {
            [`${this._prefixCls}-mask`]: true,
            [`${this._prefixCls}-mask-hidden`]: !this._visible && !this._animationStatus,
            'fade-enter': this._animationStatus === 'enter',
            'fade-enter-active': this._animationStatus === 'enter',
            'fade-leave': this._animationStatus === 'leave',
            'fade-leave-active': this._animationStatus === 'leave'
        };
        this._bodyClassMap = {
            [this._prefixCls]: true,
            [this._prefixConfirmCls]: true,
            [this._typeCls]: true,
            'zoom-enter': this._animationStatus === 'enter',
            'zoom-enter-active': this._animationStatus === 'enter',
            'zoom-leave': this._animationStatus === 'leave',
            'zoom-leave-active': this._animationStatus === 'leave'
        };
    }
    /**
     * @param {?} status
     * @return {?}
     */
    anmiateFade(status) {
        this._animationStatus = status;
        this.setClassMap();
        setTimeout(_ => {
            this._animationStatus = '';
            this.setClassMap();
            this.subject.next(status === 'enter' ? 'onShown' : 'onHidden');
            // modal打开后，默认焦点设置到modal上
            if (status === 'enter') {
                this.contentEl.nativeElement.parentNode.focus();
            }
        }, 200);
    }
    /**
     * @param {?} e
     * @return {?}
     */
    closeFromMask(e) {
        if (this._maskClosable && e.target.getAttribute('role') === 'dialog') {
            this.subject.next('onCancel');
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.setClassMap();
        this.setStyles();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.subject.next('onDestroy');
        this.subject.unsubscribe();
        this.subject = null;
    }
}
NzConfirmComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-confirm',
                viewProviders: [NzModalSubject],
                encapsulation: ViewEncapsulation.None,
                template: `
    <div [ngClass]="_customClass">
      <div [ngClass]="_maskClassMap"
        [style.zIndex]="_zIndex"></div>
      <div tabindex="-1" role="dialog"
        (click)="closeFromMask($event)"
        class="ant-modal-wrap"
        [style.zIndex]="_zIndex"
        [ngStyle]="{ 'display': !_visible && !_animationStatus ? 'none' : 'block' }">

        <div #confirm_content role="document" [ngClass]="_bodyClassMap" [ngStyle]="_bodyStyleMap">
          <div class="ant-modal-content">
            <div class="ant-modal-body">
              <div style="zoom: 1; overflow: hidden;">
                <div class="ant-confirm-body">
                  <i [ngClass]="_iconTypeCls"></i>
                  <span class="ant-confirm-title">
                    <ng-template #defaultTitle>{{ _title }}</ng-template>
                    <ng-template [ngTemplateOutlet]="_titleTpl || defaultTitle"></ng-template>
                  </span>
                  <div class="ant-confirm-content">
                    <ng-template #defaultContent>
                      <div [innerHTML]="_content"></div>
                    </ng-template>
                    <ng-template [ngTemplateOutlet]="_contentTpl || defaultContent"></ng-template>
                  </div>
                </div>
                <div class="ant-confirm-btns">
                  <ng-template [ngIf]="_cancelText">
                    <button nz-button [nzType]="'ghost'" [nzSize]="'large'" (click)="subject.next('onCancel')">
                      <span>{{ _cancelText }}</span>
                    </button>
                  </ng-template>
                  <button nz-button #confirm_ok_btn [nzType]="'primary'" [nzSize]="'large'" [nzSize]="'large'" (click)="subject.next('onOk')" [nzLoading]="_confirmLoading">
                    <span>{{ _okText }}</span>
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div tabindex="0" style="width: 0px; height: 0px; overflow: hidden;">sentinel</div>
      </div>
    </div>
  `,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-modal {
  position: relative;
  width: auto;
  margin: 0 auto;
  top: 100px;
  padding-bottom: 24px;
}
.ant-modal-wrap {
  position: fixed;
  overflow: auto;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  z-index: 1000;
  -webkit-overflow-scrolling: touch;
  outline: 0;
}
.ant-modal-title {
  margin: 0;
  font-size: 14px;
  line-height: 21px;
  font-weight: 500;
  color: rgba(0, 0, 0, 0.85);
}
.ant-modal-content {
  position: relative;
  background-color: #fff;
  border: 0;
  border-radius: 4px;
  background-clip: padding-box;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
}
.ant-modal-close {
  cursor: pointer;
  border: 0;
  background: transparent;
  position: absolute;
  right: 0;
  top: 0;
  z-index: 10;
  font-weight: 700;
  line-height: 1;
  text-decoration: none;
  transition: color .3s ease;
  color: rgba(0, 0, 0, 0.43);
  outline: 0;
}
.ant-modal-close-x {
  display: block;
  font-style: normal;
  vertical-align: baseline;
  text-align: center;
  text-transform: none;
  text-rendering: auto;
  width: 48px;
  height: 48px;
  line-height: 48px;
  font-size: 14px;
}
.ant-modal-close-x:before {
  content: "\\e633";
  display: block;
  font-family: "anticon" !important;
}
.ant-modal-close:focus,
.ant-modal-close:hover {
  color: #444;
  text-decoration: none;
}
.ant-modal-header {
  padding: 13px 16px;
  border-radius: 4px 4px 0 0;
  background: #fff;
  color: rgba(0, 0, 0, 0.65);
  border-bottom: 1px solid #e9e9e9;
}
.ant-modal-body {
  padding: 16px;
  font-size: 12px;
  line-height: 1.5;
}
.ant-modal-footer {
  border-top: 1px solid #e9e9e9;
  padding: 10px 16px 10px 10px;
  text-align: right;
  border-radius: 0 0 4px 4px;
}
.ant-modal-footer button + button {
  margin-left: 8px;
  margin-bottom: 0;
}
.ant-modal.zoom-enter,
.ant-modal.zoom-appear {
  animation-duration: 0.3s;
  transform: none;
  opacity: 0;
}
.ant-modal-mask {
  position: fixed;
  top: 0;
  right: 0;
  left: 0;
  bottom: 0;
  background-color: #373737;
  background-color: rgba(55, 55, 55, 0.6);
  height: 100%;
  z-index: 1000;
  filter: alpha(opacity=50);
}
.ant-modal-mask-hidden {
  display: none;
}
.ant-modal-open {
  overflow: hidden;
}
@media (max-width: 768px) {
  .ant-modal {
    width: auto !important;
    margin: 10px;
  }
  .vertical-center-modal .ant-modal {
    flex: 1;
  }
}
.ant-confirm .ant-modal-header {
  display: none;
}
.ant-confirm .ant-modal-close {
  display: none;
}
.ant-confirm .ant-modal-body {
  padding: 30px 40px;
}
.ant-confirm-body-wrapper {
  zoom: 1;
}
.ant-confirm-body-wrapper:before,
.ant-confirm-body-wrapper:after {
  content: " ";
  display: table;
}
.ant-confirm-body-wrapper:after {
  clear: both;
  visibility: hidden;
  font-size: 0;
  height: 0;
}
.ant-confirm-body .ant-confirm-title {
  color: rgba(0, 0, 0, 0.65);
  font-weight: bold;
  font-size: 14px;
}
.ant-confirm-body .ant-confirm-content {
  margin-left: 42px;
  font-size: 12px;
  color: rgba(0, 0, 0, 0.65);
  margin-top: 8px;
}
.ant-confirm-body > .anticon {
  font-size: 24px;
  margin-right: 16px;
  padding: 0 1px;
  float: left;
}
.ant-confirm .ant-confirm-btns {
  margin-top: 30px;
  float: right;
}
.ant-confirm .ant-confirm-btns button + button {
  margin-left: 10px;
  margin-bottom: 0;
}
.ant-confirm-error .ant-confirm-body > .anticon {
  color: #f04134;
}
.ant-confirm-warning .ant-confirm-body > .anticon,
.ant-confirm-confirm .ant-confirm-body > .anticon {
  color: #ffbf00;
}
.ant-confirm-info .ant-confirm-body > .anticon {
  color: #3FCE9E;
}
.ant-confirm-success .ant-confirm-body > .anticon {
  color: #00a854;
}
`
                ]
            },] },
];
/**
 * @nocollapse
 */
NzConfirmComponent.ctorParameters = () => [
    { type: NzModalSubject, },
];
NzConfirmComponent.propDecorators = {
    'contentEl': [{ type: ViewChild, args: ['confirm_content',] },],
    'nzVisible': [{ type: Input },],
    'nzWidth': [{ type: Input },],
    'nzClass': [{ type: Input },],
    'nzZIndex': [{ type: Input },],
    'nzTitle': [{ type: Input },],
    'nzContent': [{ type: Input },],
    'nzMaskClosable': [{ type: Input },],
    'nzOkText': [{ type: Input },],
    'nzCancelText': [{ type: Input },],
    'nzIconType': [{ type: Input },],
    'nzConfirmType': [{ type: Input },],
    'nzConfirmLoading': [{ type: Input },],
    'onEsc': [{ type: HostListener, args: ['keydown.esc', ['$event'],] },],
    'onEnter': [{ type: HostListener, args: ['keydown.enter', ['$event'],] },],
};

class BaseOptions {
    constructor() {
        /**
         * The modal display status
         */
        this.visible = false;
    }
}
class ModalOptions extends BaseOptions {
    constructor() {
        super(...arguments);
        this.closable = true;
        this.maskClosable = true;
    }
}
ModalOptions.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
ModalOptions.ctorParameters = () => [];
class ConfirmOptions extends BaseOptions {
}
ConfirmOptions.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
ConfirmOptions.ctorParameters = () => [];

class NzModalService {
    /**
     * @param {?} _appRef
     * @param {?} _cfr
     */
    constructor(_appRef, _cfr) {
        this._appRef = _appRef;
        this._cfr = _cfr;
        this._modalCompFactory = this._cfr.resolveComponentFactory(NzModalComponent);
        this._confirmCompFactory = this._cfr.resolveComponentFactory(NzConfirmComponent);
    }
    /**
     * @param {?} config
     * @param {?=} options
     * @return {?}
     */
    _initConfig(config, options = {}) {
        const /** @type {?} */ props = {};
        const /** @type {?} */ optionalParams = [
            'componentParams',
            'visible',
            'title',
            'content',
            'footer',
            'width',
            'zIndex',
            'okText',
            'cancelText',
            'style',
            'class',
            'onOk',
            'onCancel',
            'closable',
            'maskClosable',
            'wrapClassName',
            'iconType',
            'confirmType',
            'moduleWithComponentFactories'
        ];
        config = Object.assign(options, config);
        optionalParams.forEach(key => {
            if (config[key] !== undefined) {
                const /** @type {?} */ modalKey = 'nz' + key.replace(/^\w{1}/, (a) => {
                    return a.toLocaleUpperCase();
                });
                props[modalKey] = config[key];
            }
        });
        props['onOk'] = this._getConfirmCb(props['nzOnOk']);
        props['onCancel'] = this._getConfirmCb(props['nzOnCancel']);
        // 在service模式下，不需要nzOnOk，防止触发this.nzOnOk.emit(e);
        delete props['nzOnOk'];
        delete props['nzOnCancel'];
        return props;
    }
    /**
     * @param {?=} fn
     * @return {?}
     */
    _getConfirmCb(fn) {
        return (_close) => {
            if (fn) {
                const /** @type {?} */ ret = fn();
                if (!ret) {
                    _close();
                }
                else if (ret.then) {
                    ret.then(_close);
                }
            }
            else {
                _close();
            }
        };
    }
    /**
     * @param {?} props
     * @param {?} factory
     * @return {?}
     */
    _open(props, factory) {
        // 在body的内部最前插入一个<nz-modal></nz-modal>方便进行ApplicationRef.bootstrap
        document.body.insertBefore(document.createElement(factory.selector), document.body.firstChild);
        // document.body.appendChild(document.createElement(factory.selector));
        let /** @type {?} */ customComponentFactory;
        let /** @type {?} */ compRef;
        let /** @type {?} */ instance;
        let /** @type {?} */ subject;
        if (props['nzContent'] instanceof Type) {
            customComponentFactory = this._cfr.resolveComponentFactory(props['nzContent']);
            // 将编译出来的ngmodule中的用户component的factory作为modal内容存入
            props['nzContent'] = customComponentFactory;
        }
        compRef = this._appRef.bootstrap(factory);
        instance = compRef.instance;
        subject = instance.subject;
        ['onOk', 'onCancel'].forEach((eventType) => {
            subject.on(eventType, () => {
                const /** @type {?} */ eventHandler = props[eventType];
                if (eventHandler) {
                    eventHandler(() => {
                        instance.nzVisible = false;
                        setTimeout(() => {
                            compRef.destroy();
                        }, 200);
                    });
                }
            });
        });
        Object.assign(instance, props, {
            nzVisible: true
        });
        return subject;
    }
    /**
     * Open modal dialog
     * @param {?} config
     * @return {?}
     */
    open(config) {
        const /** @type {?} */ options = new ModalOptions();
        const /** @type {?} */ props = this._initConfig(config, options);
        return this._open(props, this._modalCompFactory);
    }
    /**
     * Open confirm dialog
     * @param {?} config
     * @return {?}
     */
    _openConfirm(config) {
        const /** @type {?} */ options = new ConfirmOptions();
        const /** @type {?} */ props = this._initConfig(config, options);
        return this._open(props, this._confirmCompFactory);
    }
    /**
     * Open info dialog
     * @param {?} props
     * @return {?}
     */
    info(props) {
        const /** @type {?} */ config = Object.assign({}, {
            confirmType: 'info',
            iconType: 'info-circle'
        }, props);
        return this._openConfirm(config);
    }
    /**
     * Open success dialog
     * @param {?} props
     * @return {?}
     */
    success(props) {
        const /** @type {?} */ config = Object.assign({
            confirmType: 'success',
            iconType: 'check-circle'
        }, props);
        return this._openConfirm(config);
    }
    /**
     * Open error dialog
     * @param {?} props
     * @return {?}
     */
    error(props) {
        const /** @type {?} */ config = Object.assign({
            confirmType: 'error',
            iconType: 'cross-circle'
        }, props);
        return this._openConfirm(config);
    }
    /**
     * Open warning dialog
     * @param {?} props
     * @return {?}
     */
    warning(props) {
        const /** @type {?} */ config = Object.assign({
            confirmType: 'warning',
            iconType: 'exclamation-circle'
        }, props);
        return this._openConfirm(config);
    }
    /**
     * Open confirm dialog
     * @param {?} props
     * @return {?}
     */
    confirm(props) {
        const /** @type {?} */ config = Object.assign({
            confirmType: 'confirm',
            okText: '确 定',
            cancelText: '取 消'
        }, props);
        return this._openConfirm(config);
    }
}
NzModalService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
NzModalService.ctorParameters = () => [
    { type: ApplicationRef, },
    { type: ComponentFactoryResolver, },
];

class NzModalModule {
}
NzModalModule.decorators = [
    { type: NgModule, args: [{
                entryComponents: [NzModalComponent, NzConfirmComponent],
                providers: [NzModalSubject, NzModalService],
                declarations: [NzModalComponent, NzConfirmComponent],
                exports: [NzModalComponent, NzConfirmComponent],
                imports: [CommonModule, NzButtonModule]
            },] },
];
/**
 * @nocollapse
 */
NzModalModule.ctorParameters = () => [];

class NzNotificationConfig extends NzMessageConfig {
}
const NZ_NOTIFICATION_DEFAULT_CONFIG = new InjectionToken('NZ_NOTIFICATION_DEFAULT_CONFIG');
const NZ_NOTIFICATION_CONFIG = new InjectionToken('NZ_NOTIFICATION_CONFIG');
const NZ_NOTIFICATION_DEFAULT_CONFIG_PROVIDER = {
    provide: NZ_NOTIFICATION_DEFAULT_CONFIG,
    useValue: {
        nzTop: '24px',
        nzRight: '0px',
        nzDuration: 4500,
        nzMaxStack: 7,
        nzPauseOnHover: true,
        nzAnimate: true
    }
};

class NzNotificationContainerComponent extends NzMessageContainerComponent {
    /**
     * @param {?} defaultConfig
     * @param {?} config
     */
    constructor(defaultConfig, config) {
        super(defaultConfig, config);
    }
}
NzNotificationContainerComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-notification-container',
                encapsulation: ViewEncapsulation.None,
                template: `
    <div class="ant-notification" [style.top]="config.nzTop" [style.right]="config.nzRight">
      <nz-notification *ngFor="let message of messages; let i = index" [nzMessage]="message" [nzIndex]="i"></nz-notification>
    </div>
  `,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-notification {
  position: fixed;
  z-index: 1010;
  width: 335px;
  margin-right: 24px;
}
.ant-notification-topLeft,
.ant-notification-bottomLeft {
  margin-left: 24px;
  margin-right: 0;
}
.ant-notification-topLeft .ant-notification-fade-enter.ant-notification-fade-enter-active,
.ant-notification-bottomLeft .ant-notification-fade-enter.ant-notification-fade-enter-active,
.ant-notification-topLeft .ant-notification-fade-appear.ant-notification-fade-appear-active,
.ant-notification-bottomLeft .ant-notification-fade-appear.ant-notification-fade-appear-active {
  animation-name: NotificationLeftFadeIn;
}
.ant-notification-notice {
  padding: 16px;
  border-radius: 4px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
  background: #fff;
  line-height: 1.5;
  position: relative;
  margin-bottom: 10px;
  overflow: hidden;
}
.ant-notification-notice-message {
  font-size: 14px;
  color: rgba(0, 0, 0, 0.85);
  margin-bottom: 4px;
  line-height: 20px;
  display: inline-block;
}
.ant-notification-notice-message-single-line-auto-margin {
  width: calc(335px - 16px * 2 - 24px - 48px - 100%);
  background-color: transparent;
  pointer-events: none;
  display: block;
  max-width: 4px;
}
.ant-notification-notice-message-single-line-auto-margin:before {
  content: '';
  display: block;
  padding-bottom: 100%;
}
.ant-notification-notice-description {
  font-size: 12px;
}
.ant-notification-notice-closable .ant-notification-notice-message {
  padding-right: 24px;
}
.ant-notification-notice-with-icon .ant-notification-notice-message {
  font-size: 14px;
  margin-left: 48px;
  margin-bottom: 4px;
}
.ant-notification-notice-with-icon .ant-notification-notice-description {
  margin-left: 48px;
  font-size: 12px;
}
.ant-notification-notice-icon {
  position: absolute;
  font-size: 32px;
  line-height: 32px;
}
.ant-notification-notice-icon-success {
  color: #00a854;
}
.ant-notification-notice-icon-info {
  color: #3FCE9E;
}
.ant-notification-notice-icon-warning {
  color: #ffbf00;
}
.ant-notification-notice-icon-error {
  color: #f04134;
}
.ant-notification-notice-close-x:after {
  font-size: 12px;
  content: "\\e633";
  font-family: "anticon";
  cursor: pointer;
}
.ant-notification-notice-close {
  position: absolute;
  right: 16px;
  top: 10px;
  color: rgba(0, 0, 0, 0.43);
  outline: none;
  text-decoration: none;
}
.ant-notification-notice-close:hover {
  color: #404040;
}
.ant-notification-notice-btn {
  float: right;
  margin-top: 16px;
}
.ant-notification .notification-fade-effect {
  animation-duration: 0.24s;
  animation-fill-mode: both;
  animation-timing-function: cubic-bezier(0.645, 0.045, 0.355, 1);
}
.ant-notification-fade-enter,
.ant-notification-fade-appear {
  opacity: 0;
  animation-duration: 0.24s;
  animation-fill-mode: both;
  animation-timing-function: cubic-bezier(0.645, 0.045, 0.355, 1);
  animation-play-state: paused;
}
.ant-notification-fade-leave {
  animation-duration: 0.24s;
  animation-fill-mode: both;
  animation-timing-function: cubic-bezier(0.645, 0.045, 0.355, 1);
  animation-duration: 0.2s;
  animation-play-state: paused;
}
.ant-notification-fade-enter.ant-notification-fade-enter-active,
.ant-notification-fade-appear.ant-notification-fade-appear-active {
  animation-name: NotificationFadeIn;
  animation-play-state: running;
}
.ant-notification-fade-leave.ant-notification-fade-leave-active {
  animation-name: NotificationFadeOut;
  animation-play-state: running;
}
@keyframes NotificationFadeIn {
  0% {
    opacity: 0;
    left: 335px;
  }
  100% {
    left: 0;
    opacity: 1;
  }
}
@keyframes NotificationLeftFadeIn {
  0% {
    opacity: 0;
    right: 335px;
  }
  100% {
    right: 0;
    opacity: 1;
  }
}
@keyframes NotificationFadeOut {
  0% {
    opacity: 1;
    margin-bottom: 10px;
    padding-top: 16px;
    padding-bottom: 16px;
    max-height: 150px;
  }
  100% {
    opacity: 0;
    margin-bottom: 0;
    padding-top: 0;
    padding-bottom: 0;
    max-height: 0;
  }
}
`
                ]
            },] },
];
/**
 * @nocollapse
 */
NzNotificationContainerComponent.ctorParameters = () => [
    { type: NzNotificationConfig, decorators: [{ type: Optional }, { type: Inject, args: [NZ_NOTIFICATION_DEFAULT_CONFIG,] },] },
    { type: NzNotificationConfig, decorators: [{ type: Optional }, { type: Inject, args: [NZ_NOTIFICATION_CONFIG,] },] },
];

class NzNotificationComponent extends NzMessageComponent {
    /**
     * @param {?} container
     */
    constructor(container) {
        super(container);
    }
    /**
     * @return {?}
     */
    onClickClose() {
        this._destroy();
    }
}
NzNotificationComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-notification',
                encapsulation: ViewEncapsulation.None,
                animations: [
                    trigger('enterLeave', [
                        state('enter', style({ opacity: 1, transform: 'translateX(0)' })),
                        transition('* => enter', [
                            style({ opacity: 0, transform: 'translateX(5%)' }),
                            animate('100ms linear')
                        ]),
                        state('leave', style({ opacity: 0, transform: 'translateY(-10%)' })),
                        transition('* => leave', [
                            style({ opacity: 1, transform: 'translateY(0)' }),
                            animate('100ms linear')
                        ]),
                    ])
                ],
                template: `
    <div class="ant-notification-notice ant-notification-notice-closable"
      [@enterLeave]="nzMessage.state"
      (mouseenter)="onEnter()"
      (mouseleave)="onLeave()">
      <div *ngIf="!nzMessage.html" class="ant-notification-notice-content">
        <div class="ant-notification-notice-content" [ngClass]="{ 'ant-notification-notice-with-icon': nzMessage.type !== 'blank' }">
          <ng-container [ngSwitch]="nzMessage.type">
            <i *ngSwitchCase="'success'" class="ant-notification-notice-icon ant-notification-notice-icon-success anticon anticon-check-circle-o"></i>
            <i *ngSwitchCase="'info'" class="ant-notification-notice-icon ant-notification-notice-icon-info anticon anticon-info-circle-o"></i>
            <i *ngSwitchCase="'warning'" class="ant-notification-notice-icon ant-notification-notice-icon-warning anticon anticon-exclamation-circle-o"></i>
            <i *ngSwitchCase="'error'" class="ant-notification-notice-icon ant-notification-notice-icon-error anticon anticon-cross-circle-o"></i>
          </ng-container>
          <div class="ant-notification-notice-message">{{nzMessage.title}}</div>
          <div class="ant-notification-notice-description">{{nzMessage.content}}</div>
        </div>
      </div>
      <div *ngIf="nzMessage.html" [innerHTML]="nzMessage.html"></div>
      <a tabindex="0" class="ant-notification-notice-close" (click)="onClickClose()">
        <span class="ant-notification-notice-close-x"></span>
      </a>
    </div>
  `,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-notification {
  position: fixed;
  z-index: 1010;
  width: 335px;
  margin-right: 24px;
}
.ant-notification-topLeft,
.ant-notification-bottomLeft {
  margin-left: 24px;
  margin-right: 0;
}
.ant-notification-topLeft .ant-notification-fade-enter.ant-notification-fade-enter-active,
.ant-notification-bottomLeft .ant-notification-fade-enter.ant-notification-fade-enter-active,
.ant-notification-topLeft .ant-notification-fade-appear.ant-notification-fade-appear-active,
.ant-notification-bottomLeft .ant-notification-fade-appear.ant-notification-fade-appear-active {
  animation-name: NotificationLeftFadeIn;
}
.ant-notification-notice {
  padding: 16px;
  border-radius: 4px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
  background: #fff;
  line-height: 1.5;
  position: relative;
  margin-bottom: 10px;
  overflow: hidden;
}
.ant-notification-notice-message {
  font-size: 14px;
  color: rgba(0, 0, 0, 0.85);
  margin-bottom: 4px;
  line-height: 20px;
  display: inline-block;
}
.ant-notification-notice-message-single-line-auto-margin {
  width: calc(335px - 16px * 2 - 24px - 48px - 100%);
  background-color: transparent;
  pointer-events: none;
  display: block;
  max-width: 4px;
}
.ant-notification-notice-message-single-line-auto-margin:before {
  content: '';
  display: block;
  padding-bottom: 100%;
}
.ant-notification-notice-description {
  font-size: 12px;
}
.ant-notification-notice-closable .ant-notification-notice-message {
  padding-right: 24px;
}
.ant-notification-notice-with-icon .ant-notification-notice-message {
  font-size: 14px;
  margin-left: 48px;
  margin-bottom: 4px;
}
.ant-notification-notice-with-icon .ant-notification-notice-description {
  margin-left: 48px;
  font-size: 12px;
}
.ant-notification-notice-icon {
  position: absolute;
  font-size: 32px;
  line-height: 32px;
}
.ant-notification-notice-icon-success {
  color: #00a854;
}
.ant-notification-notice-icon-info {
  color: #3FCE9E;
}
.ant-notification-notice-icon-warning {
  color: #ffbf00;
}
.ant-notification-notice-icon-error {
  color: #f04134;
}
.ant-notification-notice-close-x:after {
  font-size: 12px;
  content: "\\e633";
  font-family: "anticon";
  cursor: pointer;
}
.ant-notification-notice-close {
  position: absolute;
  right: 16px;
  top: 10px;
  color: rgba(0, 0, 0, 0.43);
  outline: none;
  text-decoration: none;
}
.ant-notification-notice-close:hover {
  color: #404040;
}
.ant-notification-notice-btn {
  float: right;
  margin-top: 16px;
}
.ant-notification .notification-fade-effect {
  animation-duration: 0.24s;
  animation-fill-mode: both;
  animation-timing-function: cubic-bezier(0.645, 0.045, 0.355, 1);
}
.ant-notification-fade-enter,
.ant-notification-fade-appear {
  opacity: 0;
  animation-duration: 0.24s;
  animation-fill-mode: both;
  animation-timing-function: cubic-bezier(0.645, 0.045, 0.355, 1);
  animation-play-state: paused;
}
.ant-notification-fade-leave {
  animation-duration: 0.24s;
  animation-fill-mode: both;
  animation-timing-function: cubic-bezier(0.645, 0.045, 0.355, 1);
  animation-duration: 0.2s;
  animation-play-state: paused;
}
.ant-notification-fade-enter.ant-notification-fade-enter-active,
.ant-notification-fade-appear.ant-notification-fade-appear-active {
  animation-name: NotificationFadeIn;
  animation-play-state: running;
}
.ant-notification-fade-leave.ant-notification-fade-leave-active {
  animation-name: NotificationFadeOut;
  animation-play-state: running;
}
@keyframes NotificationFadeIn {
  0% {
    opacity: 0;
    left: 335px;
  }
  100% {
    left: 0;
    opacity: 1;
  }
}
@keyframes NotificationLeftFadeIn {
  0% {
    opacity: 0;
    right: 335px;
  }
  100% {
    right: 0;
    opacity: 1;
  }
}
@keyframes NotificationFadeOut {
  0% {
    opacity: 1;
    margin-bottom: 10px;
    padding-top: 16px;
    padding-bottom: 16px;
    max-height: 150px;
  }
  100% {
    opacity: 0;
    margin-bottom: 0;
    padding-top: 0;
    padding-bottom: 0;
    max-height: 0;
  }
}
`
                ]
            },] },
];
/**
 * @nocollapse
 */
NzNotificationComponent.ctorParameters = () => [
    { type: NzNotificationContainerComponent, },
];

const providers$2 = [
    NZ_NOTIFICATION_DEFAULT_CONFIG_PROVIDER
];
class NzNotificationModule {
}
NzNotificationModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, FloaterModule],
                declarations: [NzNotificationComponent, NzNotificationContainerComponent],
                providers: providers$2,
                entryComponents: [NzNotificationContainerComponent],
            },] },
];
/**
 * @nocollapse
 */
NzNotificationModule.ctorParameters = () => [];

class NzPaginationComponent {
    /**
     * @param {?} _elementRef
     */
    constructor(_elementRef) {
        this._elementRef = _elementRef;
        this._current = 1;
        this._pageSize = 10;
        this._firstIndex = 1;
        this._lastIndex = Infinity;
        this._pages = [];
        this._options = [10, 20, 30, 40, 50];
        this._showSizeChanger = false;
        this._showQuickJumper = false;
        this._showTotal = false;
        this._simple = false;
        this.nzPageSizeChange = new EventEmitter();
        this.nzPageIndexChange = new EventEmitter();
        this.nzPageIndexClickChange = new EventEmitter();
        this._el = this._elementRef.nativeElement;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzShowSizeChanger(value) {
        if (value === '') {
            this._showSizeChanger = true;
        }
        else {
            this._showSizeChanger = (value);
        }
    }
    /**
     * @return {?}
     */
    get nzShowSizeChanger() {
        return this._showSizeChanger;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzShowQuickJumper(value) {
        if (value === '') {
            this._showQuickJumper = true;
        }
        else {
            this._showQuickJumper = (value);
        }
    }
    /**
     * @return {?}
     */
    get nzShowQuickJumper() {
        return this._showQuickJumper;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzShowTotal(value) {
        if (value === '') {
            this._showTotal = true;
        }
        else {
            this._showTotal = (value);
        }
    }
    /**
     * @return {?}
     */
    get nzShowTotal() {
        return this._showTotal;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzSimple(value) {
        if (value === '') {
            this._simple = true;
        }
        else {
            this._simple = (value);
        }
    }
    /**
     * @return {?}
     */
    get nzSimple() {
        return this._simple;
    }
    /**
     * @param {?} pageSize
     * @return {?}
     */
    _jumpBefore(pageSize) {
        this._jumpPage(this._current - Math.round(pageSize / 2));
    }
    /**
     * @param {?} pageSize
     * @return {?}
     */
    _jumpAfter(pageSize) {
        this._jumpPage(this._current + Math.round(pageSize / 2));
    }
    /**
     * @return {?}
     */
    get nzPageIndex() {
        return this._current;
    }
    ;
    /**
     * @param {?} value
     * @return {?}
     */
    set nzPageIndex(value) {
        if (this._current === value) {
            return;
        }
        if (value > this._lastIndex || value < this._firstIndex) {
            return;
        }
        this._current = Number(value);
        this._buildIndexes();
    }
    ;
    /**
     * @return {?}
     */
    get nzPageSize() {
        return this._pageSize;
    }
    ;
    /**
     * @param {?} value
     * @return {?}
     */
    set nzPageSize(value) {
        if (value === this._pageSize) {
            return;
        }
        this._pageSize = value;
        this.nzPageIndexChange.emit(this.nzPageIndex);
        this._buildIndexes();
    }
    ;
    /**
     * @return {?}
     */
    get nzTotal() {
        return this._total;
    }
    ;
    /**
     * @param {?} value
     * @return {?}
     */
    set nzTotal(value) {
        if (value === this._total) {
            return;
        }
        this._total = value;
        this._buildIndexes();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    _pageSizeChange($event) {
        this.nzPageSize = $event;
        this.nzPageSizeChange.emit($event);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    _nzPageIndexChange($event) {
        this.nzPageIndex = $event;
        this.nzPageIndexChange.emit(this.nzPageIndex);
    }
    /**
     * generate indexes list
     * @return {?}
     */
    _buildIndexes() {
        this._lastIndex = Math.ceil(this._total / this._pageSize);
        if (this._current > this._lastIndex) {
            this._jumpPage(this._lastIndex);
        }
        const /** @type {?} */ tmpPages = [];
        if (this._lastIndex <= 9) {
            for (let /** @type {?} */ i = 2; i <= this._lastIndex - 1; i++) {
                tmpPages.push({ index: i });
            }
        }
        else {
            const /** @type {?} */ current = +this._current;
            let /** @type {?} */ left = Math.max(2, current - 2);
            let /** @type {?} */ right = Math.min(current + 2, this._lastIndex - 1);
            if (current - 1 <= 2) {
                right = 5;
            }
            if (this._lastIndex - current <= 2) {
                left = this._lastIndex - 4;
            }
            for (let /** @type {?} */ i = left; i <= right; i++) {
                tmpPages.push({ index: i });
            }
        }
        this._pages = tmpPages;
    }
    /**
     * @param {?} index
     * @return {?}
     */
    _jumpPage(index) {
        if (index === this._firstIndex - 1 || index === this._lastIndex + 1 || index === this.nzPageIndex) {
            return;
        }
        if (index < this._firstIndex) {
            this.nzPageIndex = this._firstIndex;
        }
        else if (index > this._lastIndex) {
            this.nzPageIndex = this._lastIndex;
        }
        else {
            this.nzPageIndex = index;
        }
        this.nzPageIndexClickChange.emit(this.nzPageIndex);
        this.nzPageIndexChange.emit(this.nzPageIndex);
    }
    /**
     * @return {?}
     */
    get _isLastIndex() {
        return this._current === this._lastIndex;
    }
    /**
     * @return {?}
     */
    get _isFirstIndex() {
        return this._current === this._firstIndex;
    }
    /**
     * @return {?}
     */
    get _roundPageSize() {
        return Math.round(this._pageSize / 2);
    }
}
NzPaginationComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-pagination',
                encapsulation: ViewEncapsulation.None,
                template: `
    <ul class="ant-pagination ant-pagination-simple" *ngIf="nzSimple">
      <li
        title="上一页"
        class="ant-pagination-prev"
        (click)="_jumpPage(_current-1)"
        [class.ant-pagination-disabled]="_isFirstIndex">
        <a></a>
      </li>
      <li [attr.title]="_current+'/'+_lastIndex" class="ant-pagination-simple-pager">
        <input [ngModel]="nzPageIndex" (ngModelChange)="_nzPageIndexChange($event)" size="3"><span class="ant-pagination-slash">／</span>{{_lastIndex}}
      </li>
      <li
        title="下一页"
        class="ant-pagination-next"
        (click)="_jumpPage(_current+1)"
        [class.ant-pagination-disabled]="_isLastIndex">
        <a></a>
      </li>
    </ul>
    <ul *ngIf="!nzSimple" class="ant-pagination" [class.mini]="nzSize=='small'">
      <span class="ant-pagination-total-text" *ngIf="nzShowTotal">共 {{_total}} 条</span>
      <li
        title="上一页"
        class="ant-pagination-prev"
        (click)="_jumpPage(_current-1)"
        [class.ant-pagination-disabled]="_isFirstIndex">
        <a></a>
      </li>
      <li
        title="第一页"
        class="ant-pagination-item"
        (click)="_jumpPage(_firstIndex)"
        [class.ant-pagination-item-active]="_isFirstIndex">
        <a>{{_firstIndex}}</a>
      </li>
      <li
        [attr.title]="'向前 '+_roundPageSize+' 页'"
        (click)="_jumpBefore(_pageSize)"
        class="ant-pagination-jump-prev"
        *ngIf="(_lastIndex >9)&&(_current-3>_firstIndex)">
        <a></a>
      </li>
      <li
        *ngFor="let page of _pages"
        [attr.title]="page.index"
        class="ant-pagination-item"
        (click)="_jumpPage(page.index)"
        [class.ant-pagination-item-active]="_current==page.index">
        <a>{{page.index}}</a>
      </li>
      <li
        [attr.title]="'向后 '+_roundPageSize+' 页'"
        (click)="_jumpAfter(_pageSize)"
        class="ant-pagination-jump-next"
        *ngIf="(_lastIndex >9)&&(_current+3<_lastIndex)">
        <a></a>
      </li>
      <li
        [attr.title]="'最后一页: '+_lastIndex"
        class="ant-pagination-item"
        (click)="_jumpPage(_lastIndex)"
        *ngIf="(_lastIndex>0)&&(_lastIndex!==_firstIndex)"
        [class.ant-pagination-item-active]="_isLastIndex">
        <a>{{_lastIndex}}</a>
      </li>
      <li
        title="下一页"
        class="ant-pagination-next"
        (click)="_jumpPage(_current+1)"
        [class.ant-pagination-disabled]="_isLastIndex">
        <a></a>
      </li>
      <div class="ant-pagination-options">
        <nz-select
          *ngIf="nzShowSizeChanger"
          [nzSize]="nzSize=='small'?'small':''"
          class="ant-pagination-options-size-changer"
          [ngModel]="_pageSize"
          (ngModelChange)="_pageSizeChange($event)">
          <nz-option
            *ngFor="let option of _options"
            [nzLabel]="option+ '条/页'"
            [nzValue]="option">
          </nz-option>
          <nz-option
            *ngIf="_options.indexOf(nzPageSize)==-1"
            [nzLabel]="nzPageSize+ '条/页'"
            [nzValue]="nzPageSize">
          </nz-option>
        </nz-select>
        <div class="ant-pagination-options-quick-jumper"
          *ngIf="nzShowQuickJumper">
          跳至<input [ngModel]="nzPageIndex" (ngModelChange)="_nzPageIndexChange($event)">页
        </div>
      </div>
    </ul>`,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-pagination {
  font-size: 12px;
}
.ant-pagination:after {
  content: " ";
  display: block;
  height: 0;
  clear: both;
  overflow: hidden;
  visibility: hidden;
}
.ant-pagination-total-text {
  display: inline-block;
  vertical-align: middle;
  height: 28px;
  line-height: 28px;
  margin-right: 8px;
}
.ant-pagination-item {
  cursor: pointer;
  border-radius: 4px;
  user-select: none;
  min-width: 28px;
  height: 28px;
  line-height: 28px;
  text-align: center;
  list-style: none;
  display: inline-block;
  vertical-align: middle;
  border: 1px solid #d9d9d9;
  background-color: #fff;
  margin-right: 8px;
  font-family: Arial;
  outline: 0;
}
.ant-pagination-item a {
  text-decoration: none;
  color: rgba(0, 0, 0, 0.65);
  transition: none;
  margin: 0 6px;
}
.ant-pagination-item:focus,
.ant-pagination-item:hover {
  transition: all .3s;
  border-color: #3FCE9E;
}
.ant-pagination-item:focus a,
.ant-pagination-item:hover a {
  color: #3FCE9E;
}
.ant-pagination-item-active {
  background-color: #3FCE9E;
  border-color: #3FCE9E;
}
.ant-pagination-item-active:focus,
.ant-pagination-item-active:hover {
  background-color: #6ddab5;
  border-color: #6ddab5;
}
.ant-pagination-item-active a,
.ant-pagination-item-active:focus a,
.ant-pagination-item-active:hover a {
  color: #fff;
}
.ant-pagination-jump-prev,
.ant-pagination-jump-next {
  outline: 0;
}
.ant-pagination-jump-prev:after,
.ant-pagination-jump-next:after {
  content: "•••";
  display: block;
  letter-spacing: 2px;
  color: rgba(0, 0, 0, 0.25);
  text-align: center;
}
.ant-pagination-jump-prev:focus:after,
.ant-pagination-jump-next:focus:after,
.ant-pagination-jump-prev:hover:after,
.ant-pagination-jump-next:hover:after {
  color: #3FCE9E;
  display: inline-block;
  font-size: 12px;
  font-size: 8px \9;
  transform: scale(0.66666667) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
  letter-spacing: -1px;
  font-family: "anticon";
}
:root .ant-pagination-jump-prev:focus:after,
:root .ant-pagination-jump-next:focus:after,
:root .ant-pagination-jump-prev:hover:after,
:root .ant-pagination-jump-next:hover:after {
  filter: none;
}
:root .ant-pagination-jump-prev:focus:after,
:root .ant-pagination-jump-next:focus:after,
:root .ant-pagination-jump-prev:hover:after,
:root .ant-pagination-jump-next:hover:after {
  font-size: 12px;
}
.ant-pagination-jump-prev:focus:after,
.ant-pagination-jump-prev:hover:after {
  content: "\\e620\\e620";
}
.ant-pagination-jump-next:focus:after,
.ant-pagination-jump-next:hover:after {
  content: "\\e61f\\e61f";
}
.ant-pagination-prev,
.ant-pagination-jump-prev,
.ant-pagination-jump-next {
  margin-right: 8px;
}
.ant-pagination-prev,
.ant-pagination-next,
.ant-pagination-jump-prev,
.ant-pagination-jump-next {
  font-family: Arial;
  cursor: pointer;
  color: rgba(0, 0, 0, 0.65);
  border-radius: 4px;
  list-style: none;
  min-width: 28px;
  height: 28px;
  line-height: 28px;
  text-align: center;
  transition: all .3s;
  display: inline-block;
  vertical-align: middle;
}
.ant-pagination-prev,
.ant-pagination-next {
  border: 1px solid #d9d9d9;
  background-color: #fff;
  outline: 0;
}
.ant-pagination-prev a,
.ant-pagination-next a {
  color: rgba(0, 0, 0, 0.65);
  outline: none;
}
.ant-pagination-prev a:after,
.ant-pagination-next a:after {
  display: inline-block;
  font-size: 12px;
  font-size: 8px \9;
  transform: scale(0.66666667) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
  display: block;
  height: 26px;
  line-height: 26px;
  font-family: "anticon";
  text-align: center;
}
:root .ant-pagination-prev a:after,
:root .ant-pagination-next a:after {
  filter: none;
}
:root .ant-pagination-prev a:after,
:root .ant-pagination-next a:after {
  font-size: 12px;
}
.ant-pagination-prev:focus,
.ant-pagination-next:focus,
.ant-pagination-prev:hover,
.ant-pagination-next:hover {
  border-color: #3FCE9E;
}
.ant-pagination-prev:focus a,
.ant-pagination-next:focus a,
.ant-pagination-prev:hover a,
.ant-pagination-next:hover a {
  color: #3FCE9E;
}
.ant-pagination-prev a:after {
  content: "\\e620";
  display: block;
}
.ant-pagination-next a:after {
  content: "\\e61f";
  display: block;
}
.ant-pagination-disabled {
  cursor: not-allowed;
}
.ant-pagination-disabled:hover {
  border-color: #d9d9d9;
}
.ant-pagination-disabled:hover a {
  color: rgba(0, 0, 0, 0.25);
  cursor: not-allowed;
}
.ant-pagination-disabled a {
  color: rgba(0, 0, 0, 0.25);
}
.ant-pagination-slash {
  margin: 0 10px 0 5px;
}
.ant-pagination-options {
  display: inline-block;
  vertical-align: middle;
  margin-left: 16px;
}
.ant-pagination-options-size-changer {
  display: inline-block;
  margin-right: 8px;
}
.ant-pagination-options-quick-jumper {
  display: inline-block;
  height: 28px;
  line-height: 28px;
}
.ant-pagination-options-quick-jumper input {
  position: relative;
  display: inline-block;
  padding: 4px 7px;
  width: 100%;
  height: 28px;
  cursor: text;
  font-size: 12px;
  line-height: 1.5;
  color: rgba(0, 0, 0, 0.65);
  background-color: #fff;
  background-image: none;
  border: 1px solid #d9d9d9;
  border-radius: 4px;
  transition: all .3s;
  margin: 0 8px;
  width: 50px;
}
.ant-pagination-options-quick-jumper input::-moz-placeholder {
  color: rgba(0, 0, 0, 0.25);
  opacity: 1;
}
.ant-pagination-options-quick-jumper input:-ms-input-placeholder {
  color: rgba(0, 0, 0, 0.25);
}
.ant-pagination-options-quick-jumper input::-webkit-input-placeholder {
  color: rgba(0, 0, 0, 0.25);
}
.ant-pagination-options-quick-jumper input:hover {
  border-color: #6ddab5;
}
.ant-pagination-options-quick-jumper input:focus {
  border-color: #6ddab5;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(63, 206, 158, 0.2);
}
.ant-pagination-options-quick-jumper input-disabled {
  background-color: #f7f7f7;
  opacity: 1;
  cursor: not-allowed;
  color: rgba(0, 0, 0, 0.25);
}
.ant-pagination-options-quick-jumper input-disabled:hover {
  border-color: #e2e2e2;
}
textarea.ant-pagination-options-quick-jumper input {
  max-width: 100%;
  height: auto;
  vertical-align: bottom;
}
.ant-pagination-options-quick-jumper input-lg {
  padding: 6px 7px;
  height: 32px;
}
.ant-pagination-options-quick-jumper input-sm {
  padding: 1px 7px;
  height: 22px;
}
.ant-pagination-simple .ant-pagination-prev,
.ant-pagination-simple .ant-pagination-next {
  border: 0;
  height: 24px;
  line-height: 24px;
  margin: 0;
  font-size: 18px;
}
.ant-pagination-simple .ant-pagination-simple-pager {
  display: inline-block;
  vertical-align: middle;
  margin-right: 8px;
}
.ant-pagination-simple .ant-pagination-simple-pager input {
  margin: 0 8px;
  box-sizing: border-box;
  background-color: #fff;
  border-radius: 4px;
  border: 1px solid #d9d9d9;
  outline: none;
  padding: 5px 8px;
  height: 24px;
  text-align: center;
  transition: border-color 0.3s;
}
.ant-pagination-simple .ant-pagination-simple-pager input:hover {
  border-color: #3FCE9E;
}
.ant-pagination.mini .ant-pagination-total-text {
  height: 20px;
  line-height: 20px;
}
.ant-pagination.mini .ant-pagination-item {
  border: 0;
  margin: 0;
  min-width: 20px;
  height: 20px;
  line-height: 20px;
}
.ant-pagination.mini .ant-pagination-prev,
.ant-pagination.mini .ant-pagination-next {
  margin: 0;
  min-width: 20px;
  height: 20px;
  line-height: 20px;
  border: 0;
}
.ant-pagination.mini .ant-pagination-prev a:after,
.ant-pagination.mini .ant-pagination-next a:after {
  height: 20px;
  line-height: 20px;
}
.ant-pagination.mini .ant-pagination-jump-prev,
.ant-pagination.mini .ant-pagination-jump-next {
  height: 20px;
  line-height: 20px;
}
.ant-pagination.mini .ant-pagination-options {
  margin-left: 8px;
}
.ant-pagination.mini .ant-pagination-options-quick-jumper {
  height: 20px;
  line-height: 20px;
}
.ant-pagination.mini .ant-pagination-options-quick-jumper input {
  padding: 1px 7px;
  height: 22px;
  width: 44px;
}
@media only screen and (max-width: 1024px) {
  .ant-pagination-item-after-jump-prev,
  .ant-pagination-item-before-jump-next {
    display: none;
  }
}
`,
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-pagination {
  font-size: 12px;
}
.ant-pagination:after {
  content: " ";
  display: block;
  height: 0;
  clear: both;
  overflow: hidden;
  visibility: hidden;
}
.ant-pagination-total-text {
  display: inline-block;
  vertical-align: middle;
  height: 28px;
  line-height: 28px;
  margin-right: 8px;
}
.ant-pagination-item {
  cursor: pointer;
  border-radius: 4px;
  user-select: none;
  min-width: 28px;
  height: 28px;
  line-height: 28px;
  text-align: center;
  list-style: none;
  display: inline-block;
  vertical-align: middle;
  border: 1px solid #d9d9d9;
  background-color: #fff;
  margin-right: 8px;
  font-family: Arial;
  outline: 0;
}
.ant-pagination-item a {
  text-decoration: none;
  color: rgba(0, 0, 0, 0.65);
  transition: none;
  margin: 0 6px;
}
.ant-pagination-item:focus,
.ant-pagination-item:hover {
  transition: all .3s;
  border-color: #3FCE9E;
}
.ant-pagination-item:focus a,
.ant-pagination-item:hover a {
  color: #3FCE9E;
}
.ant-pagination-item-active {
  background-color: #3FCE9E;
  border-color: #3FCE9E;
}
.ant-pagination-item-active:focus,
.ant-pagination-item-active:hover {
  background-color: #6ddab5;
  border-color: #6ddab5;
}
.ant-pagination-item-active a,
.ant-pagination-item-active:focus a,
.ant-pagination-item-active:hover a {
  color: #fff;
}
.ant-pagination-jump-prev,
.ant-pagination-jump-next {
  outline: 0;
}
.ant-pagination-jump-prev:after,
.ant-pagination-jump-next:after {
  content: "•••";
  display: block;
  letter-spacing: 2px;
  color: rgba(0, 0, 0, 0.25);
  text-align: center;
}
.ant-pagination-jump-prev:focus:after,
.ant-pagination-jump-next:focus:after,
.ant-pagination-jump-prev:hover:after,
.ant-pagination-jump-next:hover:after {
  color: #3FCE9E;
  display: inline-block;
  font-size: 12px;
  font-size: 8px \9;
  transform: scale(0.66666667) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
  letter-spacing: -1px;
  font-family: "anticon";
}
:root .ant-pagination-jump-prev:focus:after,
:root .ant-pagination-jump-next:focus:after,
:root .ant-pagination-jump-prev:hover:after,
:root .ant-pagination-jump-next:hover:after {
  filter: none;
}
:root .ant-pagination-jump-prev:focus:after,
:root .ant-pagination-jump-next:focus:after,
:root .ant-pagination-jump-prev:hover:after,
:root .ant-pagination-jump-next:hover:after {
  font-size: 12px;
}
.ant-pagination-jump-prev:focus:after,
.ant-pagination-jump-prev:hover:after {
  content: "\\e620\\e620";
}
.ant-pagination-jump-next:focus:after,
.ant-pagination-jump-next:hover:after {
  content: "\\e61f\\e61f";
}
.ant-pagination-prev,
.ant-pagination-jump-prev,
.ant-pagination-jump-next {
  margin-right: 8px;
}
.ant-pagination-prev,
.ant-pagination-next,
.ant-pagination-jump-prev,
.ant-pagination-jump-next {
  font-family: Arial;
  cursor: pointer;
  color: rgba(0, 0, 0, 0.65);
  border-radius: 4px;
  list-style: none;
  min-width: 28px;
  height: 28px;
  line-height: 28px;
  text-align: center;
  transition: all .3s;
  display: inline-block;
  vertical-align: middle;
}
.ant-pagination-prev,
.ant-pagination-next {
  border: 1px solid #d9d9d9;
  background-color: #fff;
  outline: 0;
}
.ant-pagination-prev a,
.ant-pagination-next a {
  color: rgba(0, 0, 0, 0.65);
  outline: none;
}
.ant-pagination-prev a:after,
.ant-pagination-next a:after {
  display: inline-block;
  font-size: 12px;
  font-size: 8px \9;
  transform: scale(0.66666667) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
  display: block;
  height: 26px;
  line-height: 26px;
  font-family: "anticon";
  text-align: center;
}
:root .ant-pagination-prev a:after,
:root .ant-pagination-next a:after {
  filter: none;
}
:root .ant-pagination-prev a:after,
:root .ant-pagination-next a:after {
  font-size: 12px;
}
.ant-pagination-prev:focus,
.ant-pagination-next:focus,
.ant-pagination-prev:hover,
.ant-pagination-next:hover {
  border-color: #3FCE9E;
}
.ant-pagination-prev:focus a,
.ant-pagination-next:focus a,
.ant-pagination-prev:hover a,
.ant-pagination-next:hover a {
  color: #3FCE9E;
}
.ant-pagination-prev a:after {
  content: "\\e620";
  display: block;
}
.ant-pagination-next a:after {
  content: "\\e61f";
  display: block;
}
.ant-pagination-disabled {
  cursor: not-allowed;
}
.ant-pagination-disabled:hover {
  border-color: #d9d9d9;
}
.ant-pagination-disabled:hover a {
  color: rgba(0, 0, 0, 0.25);
  cursor: not-allowed;
}
.ant-pagination-disabled a {
  color: rgba(0, 0, 0, 0.25);
}
.ant-pagination-slash {
  margin: 0 10px 0 5px;
}
.ant-pagination-options {
  display: inline-block;
  vertical-align: middle;
  margin-left: 16px;
}
.ant-pagination-options-size-changer {
  display: inline-block;
  margin-right: 8px;
}
.ant-pagination-options-quick-jumper {
  display: inline-block;
  height: 28px;
  line-height: 28px;
}
.ant-pagination-options-quick-jumper input {
  position: relative;
  display: inline-block;
  padding: 4px 7px;
  width: 100%;
  height: 28px;
  cursor: text;
  font-size: 12px;
  line-height: 1.5;
  color: rgba(0, 0, 0, 0.65);
  background-color: #fff;
  background-image: none;
  border: 1px solid #d9d9d9;
  border-radius: 4px;
  transition: all .3s;
  margin: 0 8px;
  width: 50px;
}
.ant-pagination-options-quick-jumper input::-moz-placeholder {
  color: rgba(0, 0, 0, 0.25);
  opacity: 1;
}
.ant-pagination-options-quick-jumper input:-ms-input-placeholder {
  color: rgba(0, 0, 0, 0.25);
}
.ant-pagination-options-quick-jumper input::-webkit-input-placeholder {
  color: rgba(0, 0, 0, 0.25);
}
.ant-pagination-options-quick-jumper input:hover {
  border-color: #6ddab5;
}
.ant-pagination-options-quick-jumper input:focus {
  border-color: #6ddab5;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(63, 206, 158, 0.2);
}
.ant-pagination-options-quick-jumper input-disabled {
  background-color: #f7f7f7;
  opacity: 1;
  cursor: not-allowed;
  color: rgba(0, 0, 0, 0.25);
}
.ant-pagination-options-quick-jumper input-disabled:hover {
  border-color: #e2e2e2;
}
textarea.ant-pagination-options-quick-jumper input {
  max-width: 100%;
  height: auto;
  vertical-align: bottom;
}
.ant-pagination-options-quick-jumper input-lg {
  padding: 6px 7px;
  height: 32px;
}
.ant-pagination-options-quick-jumper input-sm {
  padding: 1px 7px;
  height: 22px;
}
.ant-pagination-simple .ant-pagination-prev,
.ant-pagination-simple .ant-pagination-next {
  border: 0;
  height: 24px;
  line-height: 24px;
  margin: 0;
  font-size: 18px;
}
.ant-pagination-simple .ant-pagination-simple-pager {
  display: inline-block;
  vertical-align: middle;
  margin-right: 8px;
}
.ant-pagination-simple .ant-pagination-simple-pager input {
  margin: 0 8px;
  box-sizing: border-box;
  background-color: #fff;
  border-radius: 4px;
  border: 1px solid #d9d9d9;
  outline: none;
  padding: 5px 8px;
  height: 24px;
  text-align: center;
  transition: border-color 0.3s;
}
.ant-pagination-simple .ant-pagination-simple-pager input:hover {
  border-color: #3FCE9E;
}
.ant-pagination.mini .ant-pagination-total-text {
  height: 20px;
  line-height: 20px;
}
.ant-pagination.mini .ant-pagination-item {
  border: 0;
  margin: 0;
  min-width: 20px;
  height: 20px;
  line-height: 20px;
}
.ant-pagination.mini .ant-pagination-prev,
.ant-pagination.mini .ant-pagination-next {
  margin: 0;
  min-width: 20px;
  height: 20px;
  line-height: 20px;
  border: 0;
}
.ant-pagination.mini .ant-pagination-prev a:after,
.ant-pagination.mini .ant-pagination-next a:after {
  height: 20px;
  line-height: 20px;
}
.ant-pagination.mini .ant-pagination-jump-prev,
.ant-pagination.mini .ant-pagination-jump-next {
  height: 20px;
  line-height: 20px;
}
.ant-pagination.mini .ant-pagination-options {
  margin-left: 8px;
}
.ant-pagination.mini .ant-pagination-options-quick-jumper {
  height: 20px;
  line-height: 20px;
}
.ant-pagination.mini .ant-pagination-options-quick-jumper input {
  padding: 1px 7px;
  height: 22px;
  width: 44px;
}
@media only screen and (max-width: 1024px) {
  .ant-pagination-item-after-jump-prev,
  .ant-pagination-item-before-jump-next {
    display: none;
  }
}
.ant-pagination {
  user-select: none;
}
`
                ]
            },] },
];
/**
 * @nocollapse
 */
NzPaginationComponent.ctorParameters = () => [
    { type: ElementRef, },
];
NzPaginationComponent.propDecorators = {
    'nzShowSizeChanger': [{ type: Input },],
    'nzShowQuickJumper': [{ type: Input },],
    'nzShowTotal': [{ type: Input },],
    'nzSimple': [{ type: Input },],
    'nzSize': [{ type: Input },],
    'nzPageSizeChange': [{ type: Output },],
    'nzPageIndexChange': [{ type: Output },],
    'nzPageIndexClickChange': [{ type: Output },],
    'nzPageIndex': [{ type: Input },],
    'nzPageSize': [{ type: Input },],
    'nzTotal': [{ type: Input },],
};

class NzPaginationModule {
}
NzPaginationModule.decorators = [
    { type: NgModule, args: [{
                declarations: [NzPaginationComponent],
                exports: [NzPaginationComponent],
                imports: [CommonModule, FormsModule, NzSelectModule]
            },] },
];
/**
 * @nocollapse
 */
NzPaginationModule.ctorParameters = () => [];

class NzPopconfirmDirective {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
    }
}
NzPopconfirmDirective.decorators = [
    { type: Directive, args: [{
                selector: '[nz-popconfirm]',
            },] },
];
/**
 * @nocollapse
 */
NzPopconfirmDirective.ctorParameters = () => [
    { type: ElementRef, },
];

class NzTooltipDirective {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
    }
}
NzTooltipDirective.decorators = [
    { type: Directive, args: [{
                selector: '[nz-tooltip]',
            },] },
];
/**
 * @nocollapse
 */
NzTooltipDirective.ctorParameters = () => [
    { type: ElementRef, },
];
NzTooltipDirective.propDecorators = {
    'isTooltipOpen': [{ type: HostBinding, args: ['class.ant-tooltip-open',] },],
};

class NzToolTipComponent {
    /**
     * @param {?} _renderer
     * @param {?} _cdr
     */
    constructor(_renderer, _cdr) {
        this._renderer = _renderer;
        this._cdr = _cdr;
        this.nzOverlayClassName = '';
        this.nzOverlayStyle = {};
        this.nzVisibleChange = new EventEmitter();
        this.visibleSource = new BehaviorSubject$1(false);
        this.visible$ = this.visibleSource.asObservable();
        this._prefix = 'ant-tooltip-placement';
        this._positions = [...DEFAULT_4_POSITIONS];
        this._classMap = {};
        this._placement = 'top';
        this._trigger = 'hover';
        this._hasBackdrop = false;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzVisible(value) {
        if (this.visibleSource.value !== value) {
            this.visibleSource.next(value);
            this.nzVisibleChange.emit(value);
        }
    }
    ;
    /**
     * @return {?}
     */
    get nzVisible() {
        return this.visibleSource.value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzTrigger(value) {
        this._trigger = value;
        this._hasBackdrop = this._trigger === 'click';
    }
    /**
     * @return {?}
     */
    get nzTrigger() {
        return this._trigger;
    }
    /**
     * @return {?}
     */
    get nzPlacement() {
        return this._placement;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzPlacement(value) {
        if (value !== this._placement) {
            this._placement = value;
            this._positions.unshift(/** @type {?} */ (POSITION_MAP[this.nzPlacement]));
        }
    }
    /**
     * @return {?}
     */
    updatePosition() {
        if (this.overlay && this.overlay.overlayRef) {
            this.overlay.overlayRef.updatePosition();
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onPositionChange($event) {
        for (const /** @type {?} */ key in POSITION_MAP) {
            if (JSON.stringify($event.connectionPair) === JSON.stringify(POSITION_MAP[key])) {
                this.nzPlacement = key;
                break;
            }
        }
        this.setClassMap();
        /** TODO may cause performance problem */
        this._cdr.detectChanges();
    }
    /**
     * @return {?}
     */
    show() {
        this.nzVisible = true;
        this.nzOrigin.isTooltipOpen = true;
    }
    /**
     * @return {?}
     */
    hide() {
        this.nzVisible = false;
        this.nzOrigin.isTooltipOpen = false;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    _afterVisibilityAnimation(e) {
        if (e.toState === 'false' && !this.nzVisible) {
            this.nzVisibleChange.emit(false);
        }
        if (e.toState === 'true' && this.nzVisible) {
            this.nzVisibleChange.emit(true);
        }
    }
    /**
     * @return {?}
     */
    setClassMap() {
        this._classMap = {
            [this.nzOverlayClassName]: true,
            [`${this._prefix}-${this._placement}`]: true
        };
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this._trigger === 'hover') {
            this._renderer.listen(this.nzOrigin.elementRef.nativeElement, 'mouseenter', () => this.show());
            this._renderer.listen(this.nzOrigin.elementRef.nativeElement, 'mouseleave', () => this.hide());
        }
        else if (this._trigger === 'focus') {
            this._renderer.listen(this.nzOrigin.elementRef.nativeElement, 'focus', () => this.show());
            this._renderer.listen(this.nzOrigin.elementRef.nativeElement, 'blur', () => this.hide());
        }
        else if (this._trigger === 'click') {
            this._renderer.listen(this.nzOrigin.elementRef.nativeElement, 'click', (e) => {
                e.preventDefault();
                this.show();
            });
        }
    }
}
NzToolTipComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-tooltip',
                encapsulation: ViewEncapsulation.None,
                animations: [
                    FadeAnimation
                ],
                template: `
    <ng-content></ng-content>
    <ng-template
      #overlay="nzConnectedOverlay"
      nz-connected-overlay
      [origin]="nzOrigin"
      [hasBackdrop]="_hasBackdrop"
      (backdropClick)="hide()"
      (detach)="hide()"
      (positionChange)="onPositionChange($event)"
      [positions]="_positions"
      [open]="visible$ | async">
      <div class="ant-tooltip" [ngClass]="_classMap" [ngStyle]="nzOverlayStyle" [@fadeAnimation]="''+(visible$ | async)"
        (@fadeAnimation.done)="_afterVisibilityAnimation($event)">
        <div class="ant-tooltip-content">
          <div class="ant-tooltip-arrow"></div>
          <div class="ant-tooltip-inner">
            <span *ngIf="!nzTemplate">{{nzTitle}}</span>
            <ng-template
              *ngIf="nzTemplate"
              [ngTemplateOutlet]="nzTemplate">
            </ng-template>
          </div>
        </div>
      </div>
    </ng-template>`,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-tooltip {
  position: absolute;
  z-index: 1060;
  display: block;
  visibility: visible;
  font-size: 12px;
  line-height: 1.5;
}
.ant-tooltip-hidden {
  display: none;
}
.ant-tooltip-placement-top,
.ant-tooltip-placement-topLeft,
.ant-tooltip-placement-topRight {
  padding-bottom: 8px;
}
.ant-tooltip-placement-right,
.ant-tooltip-placement-rightTop,
.ant-tooltip-placement-rightBottom {
  padding-left: 8px;
}
.ant-tooltip-placement-bottom,
.ant-tooltip-placement-bottomLeft,
.ant-tooltip-placement-bottomRight {
  padding-top: 8px;
}
.ant-tooltip-placement-left,
.ant-tooltip-placement-leftTop,
.ant-tooltip-placement-leftBottom {
  padding-right: 8px;
}
.ant-tooltip-inner {
  max-width: 250px;
  padding: 8px 10px;
  color: #fff;
  text-align: left;
  text-decoration: none;
  background-color: rgba(64, 64, 64, 0.85);
  border-radius: 4px;
  box-shadow: 0 1px 6px rgba(0, 0, 0, 0.2);
  min-height: 34px;
}
.ant-tooltip-arrow {
  position: absolute;
  width: 0;
  height: 0;
  border-color: transparent;
  border-style: solid;
}
.ant-tooltip-placement-top .ant-tooltip-arrow,
.ant-tooltip-placement-topLeft .ant-tooltip-arrow,
.ant-tooltip-placement-topRight .ant-tooltip-arrow {
  bottom: 3px;
  border-width: 5px 5px 0;
  border-top-color: rgba(64, 64, 64, 0.85);
}
.ant-tooltip-placement-top .ant-tooltip-arrow {
  left: 50%;
  margin-left: -5px;
}
.ant-tooltip-placement-topLeft .ant-tooltip-arrow {
  left: 16px;
}
.ant-tooltip-placement-topRight .ant-tooltip-arrow {
  right: 16px;
}
.ant-tooltip-placement-right .ant-tooltip-arrow,
.ant-tooltip-placement-rightTop .ant-tooltip-arrow,
.ant-tooltip-placement-rightBottom .ant-tooltip-arrow {
  left: 3px;
  border-width: 5px 5px 5px 0;
  border-right-color: rgba(64, 64, 64, 0.85);
}
.ant-tooltip-placement-right .ant-tooltip-arrow {
  top: 50%;
  margin-top: -5px;
}
.ant-tooltip-placement-rightTop .ant-tooltip-arrow {
  top: 8px;
}
.ant-tooltip-placement-rightBottom .ant-tooltip-arrow {
  bottom: 8px;
}
.ant-tooltip-placement-left .ant-tooltip-arrow,
.ant-tooltip-placement-leftTop .ant-tooltip-arrow,
.ant-tooltip-placement-leftBottom .ant-tooltip-arrow {
  right: 3px;
  border-width: 5px 0 5px 5px;
  border-left-color: rgba(64, 64, 64, 0.85);
}
.ant-tooltip-placement-left .ant-tooltip-arrow {
  top: 50%;
  margin-top: -5px;
}
.ant-tooltip-placement-leftTop .ant-tooltip-arrow {
  top: 8px;
}
.ant-tooltip-placement-leftBottom .ant-tooltip-arrow {
  bottom: 8px;
}
.ant-tooltip-placement-bottom .ant-tooltip-arrow,
.ant-tooltip-placement-bottomLeft .ant-tooltip-arrow,
.ant-tooltip-placement-bottomRight .ant-tooltip-arrow {
  top: 3px;
  border-width: 0 5px 5px;
  border-bottom-color: rgba(64, 64, 64, 0.85);
}
.ant-tooltip-placement-bottom .ant-tooltip-arrow {
  left: 50%;
  margin-left: -5px;
}
.ant-tooltip-placement-bottomLeft .ant-tooltip-arrow {
  left: 16px;
}
.ant-tooltip-placement-bottomRight .ant-tooltip-arrow {
  right: 16px;
}
`,
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-tooltip {
  position: absolute;
  z-index: 1060;
  display: block;
  visibility: visible;
  font-size: 12px;
  line-height: 1.5;
}
.ant-tooltip-hidden {
  display: none;
}
.ant-tooltip-placement-top,
.ant-tooltip-placement-topLeft,
.ant-tooltip-placement-topRight {
  padding-bottom: 8px;
}
.ant-tooltip-placement-right,
.ant-tooltip-placement-rightTop,
.ant-tooltip-placement-rightBottom {
  padding-left: 8px;
}
.ant-tooltip-placement-bottom,
.ant-tooltip-placement-bottomLeft,
.ant-tooltip-placement-bottomRight {
  padding-top: 8px;
}
.ant-tooltip-placement-left,
.ant-tooltip-placement-leftTop,
.ant-tooltip-placement-leftBottom {
  padding-right: 8px;
}
.ant-tooltip-inner {
  max-width: 250px;
  padding: 8px 10px;
  color: #fff;
  text-align: left;
  text-decoration: none;
  background-color: rgba(64, 64, 64, 0.85);
  border-radius: 4px;
  box-shadow: 0 1px 6px rgba(0, 0, 0, 0.2);
  min-height: 34px;
}
.ant-tooltip-arrow {
  position: absolute;
  width: 0;
  height: 0;
  border-color: transparent;
  border-style: solid;
}
.ant-tooltip-placement-top .ant-tooltip-arrow,
.ant-tooltip-placement-topLeft .ant-tooltip-arrow,
.ant-tooltip-placement-topRight .ant-tooltip-arrow {
  bottom: 3px;
  border-width: 5px 5px 0;
  border-top-color: rgba(64, 64, 64, 0.85);
}
.ant-tooltip-placement-top .ant-tooltip-arrow {
  left: 50%;
  margin-left: -5px;
}
.ant-tooltip-placement-topLeft .ant-tooltip-arrow {
  left: 16px;
}
.ant-tooltip-placement-topRight .ant-tooltip-arrow {
  right: 16px;
}
.ant-tooltip-placement-right .ant-tooltip-arrow,
.ant-tooltip-placement-rightTop .ant-tooltip-arrow,
.ant-tooltip-placement-rightBottom .ant-tooltip-arrow {
  left: 3px;
  border-width: 5px 5px 5px 0;
  border-right-color: rgba(64, 64, 64, 0.85);
}
.ant-tooltip-placement-right .ant-tooltip-arrow {
  top: 50%;
  margin-top: -5px;
}
.ant-tooltip-placement-rightTop .ant-tooltip-arrow {
  top: 8px;
}
.ant-tooltip-placement-rightBottom .ant-tooltip-arrow {
  bottom: 8px;
}
.ant-tooltip-placement-left .ant-tooltip-arrow,
.ant-tooltip-placement-leftTop .ant-tooltip-arrow,
.ant-tooltip-placement-leftBottom .ant-tooltip-arrow {
  right: 3px;
  border-width: 5px 0 5px 5px;
  border-left-color: rgba(64, 64, 64, 0.85);
}
.ant-tooltip-placement-left .ant-tooltip-arrow {
  top: 50%;
  margin-top: -5px;
}
.ant-tooltip-placement-leftTop .ant-tooltip-arrow {
  top: 8px;
}
.ant-tooltip-placement-leftBottom .ant-tooltip-arrow {
  bottom: 8px;
}
.ant-tooltip-placement-bottom .ant-tooltip-arrow,
.ant-tooltip-placement-bottomLeft .ant-tooltip-arrow,
.ant-tooltip-placement-bottomRight .ant-tooltip-arrow {
  top: 3px;
  border-width: 0 5px 5px;
  border-bottom-color: rgba(64, 64, 64, 0.85);
}
.ant-tooltip-placement-bottom .ant-tooltip-arrow {
  left: 50%;
  margin-left: -5px;
}
.ant-tooltip-placement-bottomLeft .ant-tooltip-arrow {
  left: 16px;
}
.ant-tooltip-placement-bottomRight .ant-tooltip-arrow {
  right: 16px;
}
.ant-tooltip {
  position: relative;
}
`
                ]
            },] },
];
/**
 * @nocollapse
 */
NzToolTipComponent.ctorParameters = () => [
    { type: Renderer2, },
    { type: ChangeDetectorRef, },
];
NzToolTipComponent.propDecorators = {
    'nzTitle': [{ type: Input },],
    'nzOverlayClassName': [{ type: Input },],
    'nzOverlayStyle': [{ type: Input },],
    'nzVisibleChange': [{ type: Output },],
    'nzOrigin': [{ type: ContentChild, args: [NzTooltipDirective,] },],
    'nzTemplate': [{ type: ContentChild, args: ['nzTemplate',] },],
    'overlay': [{ type: ViewChild, args: ['overlay',] },],
    'nzVisible': [{ type: Input },],
    'nzTrigger': [{ type: Input },],
    'nzPlacement': [{ type: Input },],
};

class NzPopconfirmComponent extends NzToolTipComponent {
    constructor() {
        super(...arguments);
        this._prefix = 'ant-popover-placement';
        this._trigger = 'click';
        this._hasBackdrop = true;
        this._condition = false;
        this.nzOkText = '确定';
        this.nzCancelText = '取消';
        this.nzOnCancel = new EventEmitter();
        this.nzOnConfirm = new EventEmitter();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzCondition(value) {
        this._condition = value;
    }
    /**
     * @return {?}
     */
    get nzCondition() {
        return this._condition;
    }
    /**
     * @return {?}
     */
    show() {
        if (!this._condition) {
            this.nzVisible = true;
        }
        else {
            this.onConfirm();
        }
    }
    /**
     * @return {?}
     */
    onCancel() {
        this.nzOnCancel.emit();
        this.nzVisible = false;
    }
    /**
     * @return {?}
     */
    onConfirm() {
        this.nzOnConfirm.emit();
        this.nzVisible = false;
    }
}
NzPopconfirmComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-popconfirm',
                encapsulation: ViewEncapsulation.None,
                animations: [
                    FadeAnimation
                ],
                template: `
    <ng-content></ng-content>
    <ng-template
      nz-connected-overlay
      [origin]="nzOrigin"
      [hasBackdrop]="_hasBackdrop"
      (backdropClick)="hide()"
      (detach)="hide()"
      (positionChange)="onPositionChange($event)"
      [positions]="_positions"
      [open]="visible$ | async">
      <div class="ant-popover" [ngClass]="_classMap" [ngStyle]="nzOverlayStyle" [@fadeAnimation]="''+(visible$ | async)"
        (@fadeAnimation.done)="_afterVisibilityAnimation($event)">
        <div class="ant-popover-content">
          <div class="ant-popover-arrow"></div>
          <div class="ant-popover-inner">
            <div>
              <div class="ant-popover-inner-content">
                <div class="ant-popover-message" *ngIf="!nzTemplate">
                  <i class="anticon anticon-exclamation-circle"></i>
                  <div class="ant-popover-message-title">{{nzTitle}}</div>
                </div>
                <div class="ant-popover-buttons" *ngIf="!nzTemplate">
                  <button nz-button [nzSize]="'small'" (click)="onCancel()"><span>{{nzCancelText}}</span></button>
                  <button nz-button [nzSize]="'small'" [nzType]="'primary'" (click)="onConfirm()">
                    <span>{{nzOkText}}</span></button>
                </div>
                <ng-template
                  *ngIf="nzTemplate"
                  [ngTemplateOutlet]="nzTemplate">
                </ng-template>
              </div>
            </div>
          </div>
        </div>
      </div>
    </ng-template>`,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-popover {
  position: absolute;
  top: 0;
  left: 0;
  z-index: 1030;
  cursor: auto;
  user-select: text;
  white-space: normal;
  font-size: 12px;
  line-height: 1.5;
  font-weight: normal;
  text-align: left;
}
.ant-popover:after {
  content: "";
  position: absolute;
  background: rgba(255, 255, 255, 0.01);
}
.ant-popover-hidden {
  display: none;
}
.ant-popover-placement-top,
.ant-popover-placement-topLeft,
.ant-popover-placement-topRight {
  padding-bottom: 8px;
}
.ant-popover-placement-right,
.ant-popover-placement-rightTop,
.ant-popover-placement-rightBottom {
  padding-left: 8px;
}
.ant-popover-placement-bottom,
.ant-popover-placement-bottomLeft,
.ant-popover-placement-bottomRight {
  padding-top: 8px;
}
.ant-popover-placement-left,
.ant-popover-placement-leftTop,
.ant-popover-placement-leftBottom {
  padding-right: 8px;
}
.ant-popover-inner {
  background-color: #fff;
  background-clip: padding-box;
  border-radius: 4px;
  box-shadow: 0 1px 6px rgba(0, 0, 0, 0.2);
}
.ant-popover-title {
  min-width: 177px;
  margin: 0;
  padding: 0 16px;
  line-height: 32px;
  height: 32px;
  border-bottom: 1px solid #e9e9e9;
  color: rgba(0, 0, 0, 0.65);
  font-weight: 500;
}
.ant-popover-inner-content {
  padding: 8px 16px;
  color: rgba(0, 0, 0, 0.65);
}
.ant-popover-message {
  padding: 8px 0 16px;
  font-size: 12px;
  color: rgba(0, 0, 0, 0.65);
}
.ant-popover-message > .anticon {
  color: #ffbf00;
  line-height: 17px;
  position: absolute;
}
.ant-popover-message-title {
  padding-left: 20px;
}
.ant-popover-buttons {
  text-align: right;
  margin-bottom: 8px;
}
.ant-popover-buttons button {
  margin-left: 8px;
}
.ant-popover-arrow,
.ant-popover-arrow:after {
  position: absolute;
  display: block;
  width: 0;
  height: 0;
  border-color: transparent;
  border-style: solid;
}
.ant-popover-arrow {
  border-width: 5px;
}
.ant-popover-arrow:after {
  border-width: 4px;
  content: "";
}
.ant-popover-placement-top > .ant-popover-content > .ant-popover-arrow,
.ant-popover-placement-topLeft > .ant-popover-content > .ant-popover-arrow,
.ant-popover-placement-topRight > .ant-popover-content > .ant-popover-arrow {
  border-bottom-width: 0;
  border-top-color: rgba(217, 217, 217, 0.7);
  bottom: 3px;
}
.ant-popover-placement-top > .ant-popover-content > .ant-popover-arrow:after,
.ant-popover-placement-topLeft > .ant-popover-content > .ant-popover-arrow:after,
.ant-popover-placement-topRight > .ant-popover-content > .ant-popover-arrow:after {
  content: " ";
  bottom: 1px;
  margin-left: -4px;
  border-bottom-width: 0;
  border-top-color: #fff;
}
.ant-popover-placement-top > .ant-popover-content > .ant-popover-arrow {
  left: 50%;
  margin-left: -5px;
}
.ant-popover-placement-topLeft > .ant-popover-content > .ant-popover-arrow {
  left: 16px;
}
.ant-popover-placement-topRight > .ant-popover-content > .ant-popover-arrow {
  right: 16px;
}
.ant-popover-placement-right > .ant-popover-content > .ant-popover-arrow,
.ant-popover-placement-rightTop > .ant-popover-content > .ant-popover-arrow,
.ant-popover-placement-rightBottom > .ant-popover-content > .ant-popover-arrow {
  left: 3px;
  border-left-width: 0;
  border-right-color: rgba(217, 217, 217, 0.7);
}
.ant-popover-placement-right > .ant-popover-content > .ant-popover-arrow:after,
.ant-popover-placement-rightTop > .ant-popover-content > .ant-popover-arrow:after,
.ant-popover-placement-rightBottom > .ant-popover-content > .ant-popover-arrow:after {
  content: " ";
  left: 1px;
  bottom: -4px;
  border-left-width: 0;
  border-right-color: #fff;
}
.ant-popover-placement-right > .ant-popover-content > .ant-popover-arrow {
  top: 50%;
  margin-top: -5px;
}
.ant-popover-placement-rightTop > .ant-popover-content > .ant-popover-arrow {
  top: 12px;
}
.ant-popover-placement-rightBottom > .ant-popover-content > .ant-popover-arrow {
  bottom: 12px;
}
.ant-popover-placement-bottom > .ant-popover-content > .ant-popover-arrow,
.ant-popover-placement-bottomLeft > .ant-popover-content > .ant-popover-arrow,
.ant-popover-placement-bottomRight > .ant-popover-content > .ant-popover-arrow {
  border-top-width: 0;
  border-bottom-color: rgba(217, 217, 217, 0.7);
  top: 3px;
}
.ant-popover-placement-bottom > .ant-popover-content > .ant-popover-arrow:after,
.ant-popover-placement-bottomLeft > .ant-popover-content > .ant-popover-arrow:after,
.ant-popover-placement-bottomRight > .ant-popover-content > .ant-popover-arrow:after {
  content: " ";
  top: 1px;
  margin-left: -4px;
  border-top-width: 0;
  border-bottom-color: #fff;
}
.ant-popover-placement-bottom > .ant-popover-content > .ant-popover-arrow {
  left: 50%;
  margin-left: -5px;
}
.ant-popover-placement-bottomLeft > .ant-popover-content > .ant-popover-arrow {
  left: 16px;
}
.ant-popover-placement-bottomRight > .ant-popover-content > .ant-popover-arrow {
  right: 16px;
}
.ant-popover-placement-left > .ant-popover-content > .ant-popover-arrow,
.ant-popover-placement-leftTop > .ant-popover-content > .ant-popover-arrow,
.ant-popover-placement-leftBottom > .ant-popover-content > .ant-popover-arrow {
  right: 3px;
  border-right-width: 0;
  border-left-color: rgba(217, 217, 217, 0.7);
}
.ant-popover-placement-left > .ant-popover-content > .ant-popover-arrow:after,
.ant-popover-placement-leftTop > .ant-popover-content > .ant-popover-arrow:after,
.ant-popover-placement-leftBottom > .ant-popover-content > .ant-popover-arrow:after {
  content: " ";
  right: 1px;
  border-right-width: 0;
  border-left-color: #fff;
  bottom: -4px;
}
.ant-popover-placement-left > .ant-popover-content > .ant-popover-arrow {
  top: 50%;
  margin-top: -5px;
}
.ant-popover-placement-leftTop > .ant-popover-content > .ant-popover-arrow {
  top: 12px;
}
.ant-popover-placement-leftBottom > .ant-popover-content > .ant-popover-arrow {
  bottom: 12px;
}
`,
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-popover {
  position: absolute;
  top: 0;
  left: 0;
  z-index: 1030;
  cursor: auto;
  user-select: text;
  white-space: normal;
  font-size: 12px;
  line-height: 1.5;
  font-weight: normal;
  text-align: left;
}
.ant-popover:after {
  content: "";
  position: absolute;
  background: rgba(255, 255, 255, 0.01);
}
.ant-popover-hidden {
  display: none;
}
.ant-popover-placement-top,
.ant-popover-placement-topLeft,
.ant-popover-placement-topRight {
  padding-bottom: 8px;
}
.ant-popover-placement-right,
.ant-popover-placement-rightTop,
.ant-popover-placement-rightBottom {
  padding-left: 8px;
}
.ant-popover-placement-bottom,
.ant-popover-placement-bottomLeft,
.ant-popover-placement-bottomRight {
  padding-top: 8px;
}
.ant-popover-placement-left,
.ant-popover-placement-leftTop,
.ant-popover-placement-leftBottom {
  padding-right: 8px;
}
.ant-popover-inner {
  background-color: #fff;
  background-clip: padding-box;
  border-radius: 4px;
  box-shadow: 0 1px 6px rgba(0, 0, 0, 0.2);
}
.ant-popover-title {
  min-width: 177px;
  margin: 0;
  padding: 0 16px;
  line-height: 32px;
  height: 32px;
  border-bottom: 1px solid #e9e9e9;
  color: rgba(0, 0, 0, 0.65);
  font-weight: 500;
}
.ant-popover-inner-content {
  padding: 8px 16px;
  color: rgba(0, 0, 0, 0.65);
}
.ant-popover-message {
  padding: 8px 0 16px;
  font-size: 12px;
  color: rgba(0, 0, 0, 0.65);
}
.ant-popover-message > .anticon {
  color: #ffbf00;
  line-height: 17px;
  position: absolute;
}
.ant-popover-message-title {
  padding-left: 20px;
}
.ant-popover-buttons {
  text-align: right;
  margin-bottom: 8px;
}
.ant-popover-buttons button {
  margin-left: 8px;
}
.ant-popover-arrow,
.ant-popover-arrow:after {
  position: absolute;
  display: block;
  width: 0;
  height: 0;
  border-color: transparent;
  border-style: solid;
}
.ant-popover-arrow {
  border-width: 5px;
}
.ant-popover-arrow:after {
  border-width: 4px;
  content: "";
}
.ant-popover-placement-top > .ant-popover-content > .ant-popover-arrow,
.ant-popover-placement-topLeft > .ant-popover-content > .ant-popover-arrow,
.ant-popover-placement-topRight > .ant-popover-content > .ant-popover-arrow {
  border-bottom-width: 0;
  border-top-color: rgba(217, 217, 217, 0.7);
  bottom: 3px;
}
.ant-popover-placement-top > .ant-popover-content > .ant-popover-arrow:after,
.ant-popover-placement-topLeft > .ant-popover-content > .ant-popover-arrow:after,
.ant-popover-placement-topRight > .ant-popover-content > .ant-popover-arrow:after {
  content: " ";
  bottom: 1px;
  margin-left: -4px;
  border-bottom-width: 0;
  border-top-color: #fff;
}
.ant-popover-placement-top > .ant-popover-content > .ant-popover-arrow {
  left: 50%;
  margin-left: -5px;
}
.ant-popover-placement-topLeft > .ant-popover-content > .ant-popover-arrow {
  left: 16px;
}
.ant-popover-placement-topRight > .ant-popover-content > .ant-popover-arrow {
  right: 16px;
}
.ant-popover-placement-right > .ant-popover-content > .ant-popover-arrow,
.ant-popover-placement-rightTop > .ant-popover-content > .ant-popover-arrow,
.ant-popover-placement-rightBottom > .ant-popover-content > .ant-popover-arrow {
  left: 3px;
  border-left-width: 0;
  border-right-color: rgba(217, 217, 217, 0.7);
}
.ant-popover-placement-right > .ant-popover-content > .ant-popover-arrow:after,
.ant-popover-placement-rightTop > .ant-popover-content > .ant-popover-arrow:after,
.ant-popover-placement-rightBottom > .ant-popover-content > .ant-popover-arrow:after {
  content: " ";
  left: 1px;
  bottom: -4px;
  border-left-width: 0;
  border-right-color: #fff;
}
.ant-popover-placement-right > .ant-popover-content > .ant-popover-arrow {
  top: 50%;
  margin-top: -5px;
}
.ant-popover-placement-rightTop > .ant-popover-content > .ant-popover-arrow {
  top: 12px;
}
.ant-popover-placement-rightBottom > .ant-popover-content > .ant-popover-arrow {
  bottom: 12px;
}
.ant-popover-placement-bottom > .ant-popover-content > .ant-popover-arrow,
.ant-popover-placement-bottomLeft > .ant-popover-content > .ant-popover-arrow,
.ant-popover-placement-bottomRight > .ant-popover-content > .ant-popover-arrow {
  border-top-width: 0;
  border-bottom-color: rgba(217, 217, 217, 0.7);
  top: 3px;
}
.ant-popover-placement-bottom > .ant-popover-content > .ant-popover-arrow:after,
.ant-popover-placement-bottomLeft > .ant-popover-content > .ant-popover-arrow:after,
.ant-popover-placement-bottomRight > .ant-popover-content > .ant-popover-arrow:after {
  content: " ";
  top: 1px;
  margin-left: -4px;
  border-top-width: 0;
  border-bottom-color: #fff;
}
.ant-popover-placement-bottom > .ant-popover-content > .ant-popover-arrow {
  left: 50%;
  margin-left: -5px;
}
.ant-popover-placement-bottomLeft > .ant-popover-content > .ant-popover-arrow {
  left: 16px;
}
.ant-popover-placement-bottomRight > .ant-popover-content > .ant-popover-arrow {
  right: 16px;
}
.ant-popover-placement-left > .ant-popover-content > .ant-popover-arrow,
.ant-popover-placement-leftTop > .ant-popover-content > .ant-popover-arrow,
.ant-popover-placement-leftBottom > .ant-popover-content > .ant-popover-arrow {
  right: 3px;
  border-right-width: 0;
  border-left-color: rgba(217, 217, 217, 0.7);
}
.ant-popover-placement-left > .ant-popover-content > .ant-popover-arrow:after,
.ant-popover-placement-leftTop > .ant-popover-content > .ant-popover-arrow:after,
.ant-popover-placement-leftBottom > .ant-popover-content > .ant-popover-arrow:after {
  content: " ";
  right: 1px;
  border-right-width: 0;
  border-left-color: #fff;
  bottom: -4px;
}
.ant-popover-placement-left > .ant-popover-content > .ant-popover-arrow {
  top: 50%;
  margin-top: -5px;
}
.ant-popover-placement-leftTop > .ant-popover-content > .ant-popover-arrow {
  top: 12px;
}
.ant-popover-placement-leftBottom > .ant-popover-content > .ant-popover-arrow {
  bottom: 12px;
}
.ant-popover {
  position: relative;
  margin: 1px;
}
`
                ]
            },] },
];
/**
 * @nocollapse
 */
NzPopconfirmComponent.ctorParameters = () => [];
NzPopconfirmComponent.propDecorators = {
    'nzContent': [{ type: Input },],
    'nzOkText': [{ type: Input },],
    'nzCancelText': [{ type: Input },],
    'nzCondition': [{ type: Input },],
    'nzOnCancel': [{ type: Output },],
    'nzOnConfirm': [{ type: Output },],
    'nzOrigin': [{ type: ContentChild, args: [NzPopconfirmDirective,] },],
};

class NzPopconfirmModule {
}
NzPopconfirmModule.decorators = [
    { type: NgModule, args: [{
                declarations: [NzPopconfirmComponent, NzPopconfirmDirective],
                exports: [NzPopconfirmComponent, NzPopconfirmDirective],
                imports: [CommonModule, NzButtonModule, OverlayModule]
            },] },
];
/**
 * @nocollapse
 */
NzPopconfirmModule.ctorParameters = () => [];

class NzPopoverDirective {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
    }
}
NzPopoverDirective.decorators = [
    { type: Directive, args: [{
                selector: '[nz-popover]',
            },] },
];
/**
 * @nocollapse
 */
NzPopoverDirective.ctorParameters = () => [
    { type: ElementRef, },
];

class NzPopoverComponent extends NzToolTipComponent {
    constructor() {
        super(...arguments);
        this._prefix = 'ant-popover-placement';
    }
}
NzPopoverComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-popover',
                encapsulation: ViewEncapsulation.None,
                animations: [
                    FadeAnimation
                ],
                template: `
    <ng-content></ng-content>
    <ng-template
      nz-connected-overlay
      [origin]="nzOrigin"
      [hasBackdrop]="_hasBackdrop"
      (backdropClick)="hide()"
      (detach)="hide()"
      (positionChange)="onPositionChange($event)"
      [positions]="_positions"
      [open]="visible$ | async">
      <div class="ant-popover" [ngClass]="_classMap" [ngStyle]="nzOverlayStyle" [@fadeAnimation]="''+(visible$ | async)"
        (@fadeAnimation.done)="_afterVisibilityAnimation($event)">
        <div class="ant-popover-content">
          <div class="ant-popover-arrow"></div>
          <div class="ant-popover-inner">
            <div class="ant-popover-title">{{nzTitle}}</div>
            <div class="ant-popover-inner-content">
              <span *ngIf="!nzTemplate">{{nzContent}}</span>
              <ng-template
                *ngIf="nzTemplate"
                [ngTemplateOutlet]="nzTemplate">
              </ng-template>
            </div>
          </div>
        </div>
      </div>
    </ng-template>`,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-popover {
  position: absolute;
  top: 0;
  left: 0;
  z-index: 1030;
  cursor: auto;
  user-select: text;
  white-space: normal;
  font-size: 12px;
  line-height: 1.5;
  font-weight: normal;
  text-align: left;
}
.ant-popover:after {
  content: "";
  position: absolute;
  background: rgba(255, 255, 255, 0.01);
}
.ant-popover-hidden {
  display: none;
}
.ant-popover-placement-top,
.ant-popover-placement-topLeft,
.ant-popover-placement-topRight {
  padding-bottom: 8px;
}
.ant-popover-placement-right,
.ant-popover-placement-rightTop,
.ant-popover-placement-rightBottom {
  padding-left: 8px;
}
.ant-popover-placement-bottom,
.ant-popover-placement-bottomLeft,
.ant-popover-placement-bottomRight {
  padding-top: 8px;
}
.ant-popover-placement-left,
.ant-popover-placement-leftTop,
.ant-popover-placement-leftBottom {
  padding-right: 8px;
}
.ant-popover-inner {
  background-color: #fff;
  background-clip: padding-box;
  border-radius: 4px;
  box-shadow: 0 1px 6px rgba(0, 0, 0, 0.2);
}
.ant-popover-title {
  min-width: 177px;
  margin: 0;
  padding: 0 16px;
  line-height: 32px;
  height: 32px;
  border-bottom: 1px solid #e9e9e9;
  color: rgba(0, 0, 0, 0.65);
  font-weight: 500;
}
.ant-popover-inner-content {
  padding: 8px 16px;
  color: rgba(0, 0, 0, 0.65);
}
.ant-popover-message {
  padding: 8px 0 16px;
  font-size: 12px;
  color: rgba(0, 0, 0, 0.65);
}
.ant-popover-message > .anticon {
  color: #ffbf00;
  line-height: 17px;
  position: absolute;
}
.ant-popover-message-title {
  padding-left: 20px;
}
.ant-popover-buttons {
  text-align: right;
  margin-bottom: 8px;
}
.ant-popover-buttons button {
  margin-left: 8px;
}
.ant-popover-arrow,
.ant-popover-arrow:after {
  position: absolute;
  display: block;
  width: 0;
  height: 0;
  border-color: transparent;
  border-style: solid;
}
.ant-popover-arrow {
  border-width: 5px;
}
.ant-popover-arrow:after {
  border-width: 4px;
  content: "";
}
.ant-popover-placement-top > .ant-popover-content > .ant-popover-arrow,
.ant-popover-placement-topLeft > .ant-popover-content > .ant-popover-arrow,
.ant-popover-placement-topRight > .ant-popover-content > .ant-popover-arrow {
  border-bottom-width: 0;
  border-top-color: rgba(217, 217, 217, 0.7);
  bottom: 3px;
}
.ant-popover-placement-top > .ant-popover-content > .ant-popover-arrow:after,
.ant-popover-placement-topLeft > .ant-popover-content > .ant-popover-arrow:after,
.ant-popover-placement-topRight > .ant-popover-content > .ant-popover-arrow:after {
  content: " ";
  bottom: 1px;
  margin-left: -4px;
  border-bottom-width: 0;
  border-top-color: #fff;
}
.ant-popover-placement-top > .ant-popover-content > .ant-popover-arrow {
  left: 50%;
  margin-left: -5px;
}
.ant-popover-placement-topLeft > .ant-popover-content > .ant-popover-arrow {
  left: 16px;
}
.ant-popover-placement-topRight > .ant-popover-content > .ant-popover-arrow {
  right: 16px;
}
.ant-popover-placement-right > .ant-popover-content > .ant-popover-arrow,
.ant-popover-placement-rightTop > .ant-popover-content > .ant-popover-arrow,
.ant-popover-placement-rightBottom > .ant-popover-content > .ant-popover-arrow {
  left: 3px;
  border-left-width: 0;
  border-right-color: rgba(217, 217, 217, 0.7);
}
.ant-popover-placement-right > .ant-popover-content > .ant-popover-arrow:after,
.ant-popover-placement-rightTop > .ant-popover-content > .ant-popover-arrow:after,
.ant-popover-placement-rightBottom > .ant-popover-content > .ant-popover-arrow:after {
  content: " ";
  left: 1px;
  bottom: -4px;
  border-left-width: 0;
  border-right-color: #fff;
}
.ant-popover-placement-right > .ant-popover-content > .ant-popover-arrow {
  top: 50%;
  margin-top: -5px;
}
.ant-popover-placement-rightTop > .ant-popover-content > .ant-popover-arrow {
  top: 12px;
}
.ant-popover-placement-rightBottom > .ant-popover-content > .ant-popover-arrow {
  bottom: 12px;
}
.ant-popover-placement-bottom > .ant-popover-content > .ant-popover-arrow,
.ant-popover-placement-bottomLeft > .ant-popover-content > .ant-popover-arrow,
.ant-popover-placement-bottomRight > .ant-popover-content > .ant-popover-arrow {
  border-top-width: 0;
  border-bottom-color: rgba(217, 217, 217, 0.7);
  top: 3px;
}
.ant-popover-placement-bottom > .ant-popover-content > .ant-popover-arrow:after,
.ant-popover-placement-bottomLeft > .ant-popover-content > .ant-popover-arrow:after,
.ant-popover-placement-bottomRight > .ant-popover-content > .ant-popover-arrow:after {
  content: " ";
  top: 1px;
  margin-left: -4px;
  border-top-width: 0;
  border-bottom-color: #fff;
}
.ant-popover-placement-bottom > .ant-popover-content > .ant-popover-arrow {
  left: 50%;
  margin-left: -5px;
}
.ant-popover-placement-bottomLeft > .ant-popover-content > .ant-popover-arrow {
  left: 16px;
}
.ant-popover-placement-bottomRight > .ant-popover-content > .ant-popover-arrow {
  right: 16px;
}
.ant-popover-placement-left > .ant-popover-content > .ant-popover-arrow,
.ant-popover-placement-leftTop > .ant-popover-content > .ant-popover-arrow,
.ant-popover-placement-leftBottom > .ant-popover-content > .ant-popover-arrow {
  right: 3px;
  border-right-width: 0;
  border-left-color: rgba(217, 217, 217, 0.7);
}
.ant-popover-placement-left > .ant-popover-content > .ant-popover-arrow:after,
.ant-popover-placement-leftTop > .ant-popover-content > .ant-popover-arrow:after,
.ant-popover-placement-leftBottom > .ant-popover-content > .ant-popover-arrow:after {
  content: " ";
  right: 1px;
  border-right-width: 0;
  border-left-color: #fff;
  bottom: -4px;
}
.ant-popover-placement-left > .ant-popover-content > .ant-popover-arrow {
  top: 50%;
  margin-top: -5px;
}
.ant-popover-placement-leftTop > .ant-popover-content > .ant-popover-arrow {
  top: 12px;
}
.ant-popover-placement-leftBottom > .ant-popover-content > .ant-popover-arrow {
  bottom: 12px;
}
`,
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-popover {
  position: absolute;
  top: 0;
  left: 0;
  z-index: 1030;
  cursor: auto;
  user-select: text;
  white-space: normal;
  font-size: 12px;
  line-height: 1.5;
  font-weight: normal;
  text-align: left;
}
.ant-popover:after {
  content: "";
  position: absolute;
  background: rgba(255, 255, 255, 0.01);
}
.ant-popover-hidden {
  display: none;
}
.ant-popover-placement-top,
.ant-popover-placement-topLeft,
.ant-popover-placement-topRight {
  padding-bottom: 8px;
}
.ant-popover-placement-right,
.ant-popover-placement-rightTop,
.ant-popover-placement-rightBottom {
  padding-left: 8px;
}
.ant-popover-placement-bottom,
.ant-popover-placement-bottomLeft,
.ant-popover-placement-bottomRight {
  padding-top: 8px;
}
.ant-popover-placement-left,
.ant-popover-placement-leftTop,
.ant-popover-placement-leftBottom {
  padding-right: 8px;
}
.ant-popover-inner {
  background-color: #fff;
  background-clip: padding-box;
  border-radius: 4px;
  box-shadow: 0 1px 6px rgba(0, 0, 0, 0.2);
}
.ant-popover-title {
  min-width: 177px;
  margin: 0;
  padding: 0 16px;
  line-height: 32px;
  height: 32px;
  border-bottom: 1px solid #e9e9e9;
  color: rgba(0, 0, 0, 0.65);
  font-weight: 500;
}
.ant-popover-inner-content {
  padding: 8px 16px;
  color: rgba(0, 0, 0, 0.65);
}
.ant-popover-message {
  padding: 8px 0 16px;
  font-size: 12px;
  color: rgba(0, 0, 0, 0.65);
}
.ant-popover-message > .anticon {
  color: #ffbf00;
  line-height: 17px;
  position: absolute;
}
.ant-popover-message-title {
  padding-left: 20px;
}
.ant-popover-buttons {
  text-align: right;
  margin-bottom: 8px;
}
.ant-popover-buttons button {
  margin-left: 8px;
}
.ant-popover-arrow,
.ant-popover-arrow:after {
  position: absolute;
  display: block;
  width: 0;
  height: 0;
  border-color: transparent;
  border-style: solid;
}
.ant-popover-arrow {
  border-width: 5px;
}
.ant-popover-arrow:after {
  border-width: 4px;
  content: "";
}
.ant-popover-placement-top > .ant-popover-content > .ant-popover-arrow,
.ant-popover-placement-topLeft > .ant-popover-content > .ant-popover-arrow,
.ant-popover-placement-topRight > .ant-popover-content > .ant-popover-arrow {
  border-bottom-width: 0;
  border-top-color: rgba(217, 217, 217, 0.7);
  bottom: 3px;
}
.ant-popover-placement-top > .ant-popover-content > .ant-popover-arrow:after,
.ant-popover-placement-topLeft > .ant-popover-content > .ant-popover-arrow:after,
.ant-popover-placement-topRight > .ant-popover-content > .ant-popover-arrow:after {
  content: " ";
  bottom: 1px;
  margin-left: -4px;
  border-bottom-width: 0;
  border-top-color: #fff;
}
.ant-popover-placement-top > .ant-popover-content > .ant-popover-arrow {
  left: 50%;
  margin-left: -5px;
}
.ant-popover-placement-topLeft > .ant-popover-content > .ant-popover-arrow {
  left: 16px;
}
.ant-popover-placement-topRight > .ant-popover-content > .ant-popover-arrow {
  right: 16px;
}
.ant-popover-placement-right > .ant-popover-content > .ant-popover-arrow,
.ant-popover-placement-rightTop > .ant-popover-content > .ant-popover-arrow,
.ant-popover-placement-rightBottom > .ant-popover-content > .ant-popover-arrow {
  left: 3px;
  border-left-width: 0;
  border-right-color: rgba(217, 217, 217, 0.7);
}
.ant-popover-placement-right > .ant-popover-content > .ant-popover-arrow:after,
.ant-popover-placement-rightTop > .ant-popover-content > .ant-popover-arrow:after,
.ant-popover-placement-rightBottom > .ant-popover-content > .ant-popover-arrow:after {
  content: " ";
  left: 1px;
  bottom: -4px;
  border-left-width: 0;
  border-right-color: #fff;
}
.ant-popover-placement-right > .ant-popover-content > .ant-popover-arrow {
  top: 50%;
  margin-top: -5px;
}
.ant-popover-placement-rightTop > .ant-popover-content > .ant-popover-arrow {
  top: 12px;
}
.ant-popover-placement-rightBottom > .ant-popover-content > .ant-popover-arrow {
  bottom: 12px;
}
.ant-popover-placement-bottom > .ant-popover-content > .ant-popover-arrow,
.ant-popover-placement-bottomLeft > .ant-popover-content > .ant-popover-arrow,
.ant-popover-placement-bottomRight > .ant-popover-content > .ant-popover-arrow {
  border-top-width: 0;
  border-bottom-color: rgba(217, 217, 217, 0.7);
  top: 3px;
}
.ant-popover-placement-bottom > .ant-popover-content > .ant-popover-arrow:after,
.ant-popover-placement-bottomLeft > .ant-popover-content > .ant-popover-arrow:after,
.ant-popover-placement-bottomRight > .ant-popover-content > .ant-popover-arrow:after {
  content: " ";
  top: 1px;
  margin-left: -4px;
  border-top-width: 0;
  border-bottom-color: #fff;
}
.ant-popover-placement-bottom > .ant-popover-content > .ant-popover-arrow {
  left: 50%;
  margin-left: -5px;
}
.ant-popover-placement-bottomLeft > .ant-popover-content > .ant-popover-arrow {
  left: 16px;
}
.ant-popover-placement-bottomRight > .ant-popover-content > .ant-popover-arrow {
  right: 16px;
}
.ant-popover-placement-left > .ant-popover-content > .ant-popover-arrow,
.ant-popover-placement-leftTop > .ant-popover-content > .ant-popover-arrow,
.ant-popover-placement-leftBottom > .ant-popover-content > .ant-popover-arrow {
  right: 3px;
  border-right-width: 0;
  border-left-color: rgba(217, 217, 217, 0.7);
}
.ant-popover-placement-left > .ant-popover-content > .ant-popover-arrow:after,
.ant-popover-placement-leftTop > .ant-popover-content > .ant-popover-arrow:after,
.ant-popover-placement-leftBottom > .ant-popover-content > .ant-popover-arrow:after {
  content: " ";
  right: 1px;
  border-right-width: 0;
  border-left-color: #fff;
  bottom: -4px;
}
.ant-popover-placement-left > .ant-popover-content > .ant-popover-arrow {
  top: 50%;
  margin-top: -5px;
}
.ant-popover-placement-leftTop > .ant-popover-content > .ant-popover-arrow {
  top: 12px;
}
.ant-popover-placement-leftBottom > .ant-popover-content > .ant-popover-arrow {
  bottom: 12px;
}
.ant-popover {
  position: relative;
  margin: 1px;
}
`
                ]
            },] },
];
/**
 * @nocollapse
 */
NzPopoverComponent.ctorParameters = () => [];
NzPopoverComponent.propDecorators = {
    'nzContent': [{ type: Input },],
    'nzOrigin': [{ type: ContentChild, args: [NzPopoverDirective,] },],
};

class NzPopoverModule {
}
NzPopoverModule.decorators = [
    { type: NgModule, args: [{
                entryComponents: [NzPopoverComponent],
                exports: [NzPopoverDirective, NzPopoverComponent],
                declarations: [NzPopoverDirective, NzPopoverComponent],
                imports: [CommonModule, OverlayModule]
            },] },
];
/**
 * @nocollapse
 */
NzPopoverModule.ctorParameters = () => [];

class NzRateComponent {
    constructor() {
        this._prefixCls = 'ant-rate';
        this._innerPrefixCls = `${this._prefixCls}-star`;
        this._starArray = new Array();
        this._count = 5;
        this._value = 0;
        this._hoverValue = 0; // 鼠标悬浮时的星数，为正整数，和_hasHalf配合使用
        this._hasHalf = false;
        this._allowHalf = false;
        this._disabled = false;
        this._floatReg = /^\d+(\.\d+)?$/;
        // ngModel Access
        this.onChange = Function.prototype;
        this.onTouched = Function.prototype;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzCount(value) {
        this._count = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzAllowHalf(value) {
        if (value === '') {
            this._allowHalf = true;
        }
        else {
            this._allowHalf = (value);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzDefaultValue(value) {
        this._value = value;
        if (this._floatReg.test(value)) {
            value += 0.5;
            this._hasHalf = true;
        }
        this._hoverValue = value;
    }
    /**
     * @return {?}
     */
    get nzValue() {
        return this._value;
    }
    ;
    /**
     * @param {?} value
     * @return {?}
     */
    set nzValue(value) {
        if (this._value === value) {
            return;
        }
        this._value = value;
        if (this._floatReg.test(value)) {
            value += 0.5;
            this._hasHalf = true;
        }
        this._hoverValue = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzDisabled(value) {
        this._disabled = value;
        this.setClassMap();
    }
    /**
     * @return {?}
     */
    setClassMap() {
        this._classMap = {
            [this._prefixCls]: true,
            [`${this._prefixCls}-disabled`]: this._disabled
        };
    }
    /**
     * @return {?}
     */
    setChildrenClassMap() {
        let /** @type {?} */ index = 0;
        while (index < this._count) {
            this._starArray.push(index++);
        }
    }
    /**
     * @param {?} e
     * @param {?} index
     * @param {?} isFull
     * @return {?}
     */
    _clickRate(e, index, isFull) {
        e.stopPropagation();
        if (this._disabled) {
            return;
        }
        this._hoverValue = this._value = index + 1;
        this._hasHalf = !isFull && this._allowHalf;
        if (this._hasHalf) {
            this._value -= 0.5;
        }
        this.onChange(this._value);
    }
    /**
     * @param {?} e
     * @param {?} index
     * @param {?} isFull
     * @return {?}
     */
    _hoverRate(e, index, isFull) {
        e.stopPropagation();
        if (this._disabled) {
            return;
        }
        const /** @type {?} */ isHalf = !isFull && this._allowHalf;
        // 如果星数一致，则不作操作，用于提高性能
        if (this._hoverValue === index + 1 && isHalf === this._hasHalf) {
            return;
        }
        this._hoverValue = index + 1;
        this._hasHalf = isHalf;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    _leaveRate(e) {
        e.stopPropagation();
        let /** @type {?} */ oldVal = this._value;
        if (this._floatReg.test(oldVal)) {
            oldVal += 0.5;
            this._hasHalf = true;
        }
        this._hoverValue = oldVal;
    }
    /**
     * @param {?} i
     * @return {?}
     */
    setClasses(i) {
        return {
            [this._innerPrefixCls]: true,
            [`${this._innerPrefixCls}-full`]: (i + 1 < this._hoverValue) || (!this._hasHalf) && (i + 1 === this._hoverValue),
            [`${this._innerPrefixCls}-half`]: (this._hasHalf) && (i + 1 === this._hoverValue),
            [`${this._innerPrefixCls}-active`]: (this._hasHalf) && (i + 1 === this._hoverValue),
            [`${this._innerPrefixCls}-zero`]: (i + 1 > this._hoverValue)
        };
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.nzValue = value;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.nzDisabled = isDisabled;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.setClassMap();
        this.setChildrenClassMap();
    }
}
NzRateComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-rate',
                encapsulation: ViewEncapsulation.None,
                template: `
    <ul [ngClass]="_classMap" (mouseleave)="_leaveRate($event)">
      <li *ngFor="let star of _starArray; let i = index"
        [ngClass]="setClasses(i)"
        (mouseover)="_hoverRate($event, i, true)"
        (click)="_clickRate($event, i, true)">
        <div class="ant-rate-star-first" (mouseover)="_hoverRate($event, i)" (click)="_clickRate($event, i)">
          <i class="anticon anticon-star"></i></div>
        <div class="ant-rate-star-second" (mouseover)="_hoverRate($event, i, true)" (click)="_clickRate($event, i, true)">
          <i class="anticon anticon-star"></i></div>
      </li>
    </ul>
  `,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => NzRateComponent),
                        multi: true
                    }
                ],
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-rate {
  margin: 0;
  padding: 0;
  list-style: none;
  font-size: 20px;
  display: inline-block;
  vertical-align: middle;
}
.ant-rate-disabled .ant-rate-star {
  cursor: not-allowed;
}
.ant-rate-disabled .ant-rate-star:hover {
  transform: scale(1);
}
.ant-rate-star {
  margin: 0;
  padding: 0;
  display: inline-block;
  margin-right: 8px;
  position: relative;
  transition: all .3s;
  color: #e9e9e9;
  cursor: pointer;
}
.ant-rate-star-first,
.ant-rate-star-second {
  user-select: none;
  transition: all .3s;
}
.ant-rate-star:hover {
  transform: scale(1.1);
}
.ant-rate-star-first {
  position: absolute;
  left: 0;
  top: 0;
  width: 50%;
  height: 100%;
  overflow: hidden;
  opacity: 0;
}
.ant-rate-star-half .ant-rate-star-first,
.ant-rate-star-half .ant-rate-star-second {
  opacity: 1;
}
.ant-rate-star-half .ant-rate-star-first,
.ant-rate-star-full .ant-rate-star-second {
  color: #f5a623;
}
.ant-rate-star-half:hover .ant-rate-star-first,
.ant-rate-star-full:hover .ant-rate-star-second {
  color: #f7b84f;
}
.ant-rate-text {
  margin-left: 8px;
  vertical-align: middle;
  display: inline-block;
  font-size: 12px;
}
`
                ]
            },] },
];
/**
 * @nocollapse
 */
NzRateComponent.ctorParameters = () => [];
NzRateComponent.propDecorators = {
    'nzCount': [{ type: Input },],
    'nzAllowHalf': [{ type: Input },],
    'nzDefaultValue': [{ type: Input },],
    'nzDisabled': [{ type: Input },],
};

class NzRateModule {
}
NzRateModule.decorators = [
    { type: NgModule, args: [{
                exports: [NzRateComponent],
                declarations: [NzRateComponent],
                imports: [CommonModule]
            },] },
];
/**
 * @nocollapse
 */
NzRateModule.ctorParameters = () => [];

class NzSpinComponent {
    /**
     * @param {?} _elementRef
     * @param {?} _renderer
     */
    constructor(_elementRef, _renderer) {
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this.nzSpinning = true;
        this._el = this._elementRef.nativeElement;
    }
    /**
     * @return {?}
     */
    get nzTip() {
        return this._tip;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzTip(value) {
        this._tip = value || '加载中...';
    }
    /**
     * @return {?}
     */
    get isNested() {
        return this.nzSpinning && (this._ref.nativeElement.childNodes.length !== 0);
    }
    /**
     * @return {?}
     */
    get nzSize() {
        return this._size;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzSize(value) {
        this._size = { large: 'lg', small: 'sm' }[value];
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        if (this._ref.nativeElement.children.length !== 0) {
            this._renderer.setStyle(this._el, 'display', 'block');
        }
    }
}
NzSpinComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-spin',
                encapsulation: ViewEncapsulation.None,
                template: `
    <div>
      <div class="ant-spin" [ngClass]="{'ant-spin-spinning':nzSpinning,'ant-spin-lg':_size=='lg','ant-spin-sm':_size=='sm','ant-spin-show-text':_tip}">
        <span class="ant-spin-dot"><i></i><i></i><i></i><i></i></span>
        <div class="ant-spin-text">{{_tip}}</div>
      </div>
    </div>
    <div class="ant-spin-container" [class.ant-spin-blur]="nzSpinning" #ref [hidden]="ref.children.length == 0"><ng-content></ng-content></div>

  `,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-spin {
  color: #3FCE9E;
  vertical-align: middle;
  text-align: center;
  opacity: 0;
  position: absolute;
  transition: transform 0.3s cubic-bezier(0.78, 0.14, 0.15, 0.86);
  font-size: 12px;
  display: none;
}
.ant-spin-spinning {
  opacity: 1;
  position: static;
  display: inline-block;
}
.ant-spin-nested-loading {
  position: relative;
}
.ant-spin-nested-loading > div > .ant-spin {
  position: absolute;
  height: 100%;
  max-height: 320px;
  width: 100%;
  z-index: 4;
}
.ant-spin-nested-loading > div > .ant-spin .ant-spin-dot {
  position: absolute;
  top: 50%;
  left: 50%;
  margin: -10px;
}
.ant-spin-nested-loading > div > .ant-spin .ant-spin-text {
  position: absolute;
  top: 50%;
  width: 100%;
  padding-top: 6px;
}
.ant-spin-nested-loading > div > .ant-spin.ant-spin-show-text .ant-spin-dot {
  margin-top: -20px;
}
.ant-spin-nested-loading > div > .ant-spin-sm .ant-spin-dot {
  margin: -7px;
}
.ant-spin-nested-loading > div > .ant-spin-sm .ant-spin-text {
  padding-top: 3px;
}
.ant-spin-nested-loading > div > .ant-spin-sm.ant-spin-show-text .ant-spin-dot {
  margin-top: -17px;
}
.ant-spin-nested-loading > div > .ant-spin-lg .ant-spin-dot {
  margin: -16px;
}
.ant-spin-nested-loading > div > .ant-spin-lg .ant-spin-text {
  padding-top: 12px;
}
.ant-spin-nested-loading > div > .ant-spin-lg.ant-spin-show-text .ant-spin-dot {
  margin-top: -26px;
}
.ant-spin-container {
  transition: all 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
  position: relative;
}
.ant-spin-blur {
  overflow: hidden;
  opacity: 0.7;
  -webkit-filter: blur(0.5px);
  filter: blur(0.5px);
  /* autoprefixer: off */
  filter: progid\:DXImageTransform\.Microsoft\.Blur(PixelRadius\=1, MakeShadow\=false);
  /* autoprefixer: on */
  -webkit-transform: translateZ(0);
}
.ant-spin-blur:after {
  content: '';
  position: absolute;
  left: 0;
  right: 0;
  top: 0;
  bottom: 0;
  background: #fff;
  opacity: 0.3;
  transition: all .3s;
  z-index: 10;
}
.ant-spin-tip {
  color: rgba(0, 0, 0, 0.43);
}
.ant-spin-dot {
  position: relative;
  display: inline-block;
  width: 20px;
  height: 20px;
  transform: rotate(45deg);
  animation: antRotate 1.2s infinite linear;
}
.ant-spin-dot i {
  width: 9px;
  height: 9px;
  border-radius: 100%;
  background-color: #3FCE9E;
  transform: scale(0.75);
  display: block;
  position: absolute;
  opacity: 0.3;
  animation: antSpinMove 1s infinite linear alternate;
  transform-origin: 50% 50%;
}
.ant-spin-dot i:nth-child(1) {
  left: 0;
  top: 0;
}
.ant-spin-dot i:nth-child(2) {
  right: 0;
  top: 0;
  animation-delay: 0.4s;
}
.ant-spin-dot i:nth-child(3) {
  right: 0;
  bottom: 0;
  animation-delay: 0.8s;
}
.ant-spin-dot i:nth-child(4) {
  left: 0;
  bottom: 0;
  animation-delay: 1.2s;
}
.ant-spin-sm .ant-spin-dot {
  width: 14px;
  height: 14px;
}
.ant-spin-sm .ant-spin-dot i {
  width: 6px;
  height: 6px;
}
.ant-spin-lg .ant-spin-dot {
  width: 32px;
  height: 32px;
}
.ant-spin-lg .ant-spin-dot i {
  width: 14px;
  height: 14px;
}
.ant-spin.ant-spin-show-text .ant-spin-text {
  display: block;
}
@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {
  /* IE10+ */
  .ant-spin-blur {
    background: #fff;
    opacity: 0.5;
  }
}
@keyframes antSpinMove {
  to {
    opacity: 1;
  }
}
@keyframes antRotate {
  to {
    transform: rotate(405deg);
  }
}
`
                ]
            },] },
];
/**
 * @nocollapse
 */
NzSpinComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
];
NzSpinComponent.propDecorators = {
    'nzSpinning': [{ type: Input },],
    'nzTip': [{ type: Input },],
    '_ref': [{ type: ViewChild, args: ['ref',] },],
    'isNested': [{ type: HostBinding, args: ['class.ant-spin-nested-loading',] },],
    'nzSize': [{ type: Input },],
};

class NzSpinModule {
}
NzSpinModule.decorators = [
    { type: NgModule, args: [{
                exports: [NzSpinComponent],
                declarations: [NzSpinComponent],
                imports: [CommonModule]
            },] },
];
/**
 * @nocollapse
 */
NzSpinModule.ctorParameters = () => [];

class NzToolTipModule {
}
NzToolTipModule.decorators = [
    { type: NgModule, args: [{
                declarations: [NzToolTipComponent, NzTooltipDirective],
                exports: [NzToolTipComponent, NzTooltipDirective],
                imports: [CommonModule, OverlayModule],
                entryComponents: [NzToolTipComponent]
            },] },
];
/**
 * @nocollapse
 */
NzToolTipModule.ctorParameters = () => [];

class NzSliderService {
    /**
     * @param {?} e
     * @return {?}
     */
    pauseEvent(e) {
        e.stopPropagation();
        e.preventDefault();
    }
    /**
     * @param {?} num
     * @return {?}
     */
    getPrecision(num) {
        const /** @type {?} */ numStr = num.toString(), /** @type {?} */ dotIndex = numStr.indexOf('.');
        return dotIndex >= 0 ? numStr.length - dotIndex - 1 : 0;
    }
    /**
     * @param {?} arr
     * @return {?}
     */
    cloneArray(arr) {
        return arr.slice();
    }
    /**
     * @param {?} e
     * @return {?}
     */
    isNotTouchEvent(e) {
        return !e.touches || e.touches.length > 1 ||
            (e.type.toLowerCase() === 'touchend' && e.touches.length > 0);
    }
    /**
     * @param {?} min
     * @param {?} max
     * @param {?} value
     * @return {?}
     */
    valueToOffset(min, max, value) {
        return (value - min) / (max - min) * 100;
    }
    /**
     * @param {?} num
     * @param {?} min
     * @param {?} max
     * @return {?}
     */
    correctNumLimit(num, min, max) {
        if (isNaN(num = +num)) {
            return min;
        }
        if (num < min) {
            num = min;
        }
        else if (num > max) {
            num = max;
        }
        return num;
    }
    /**
     * get the offset of an element relative to the document (Reference from jquery's offset())
     * @param {?} elem HTMLElement ref
     * @return {?}
     */
    getElementOffset(elem) {
        // Return zeros for disconnected and hidden (display: none) elements (gh-2310)
        // Support: IE <=11 only
        // Running getBoundingClientRect on a
        // disconnected node in IE throws an error
        if (!elem.getClientRects().length) {
            return { top: 0, left: 0 };
        }
        // Get document-relative position by adding viewport scroll to viewport-relative gBCR
        const /** @type {?} */ rect = elem.getBoundingClientRect(), /** @type {?} */ win = elem.ownerDocument.defaultView;
        return {
            top: rect.top + win.pageYOffset,
            left: rect.left + win.pageXOffset
        };
    }
}
NzSliderService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
NzSliderService.ctorParameters = () => [];

class NzSliderComponent {
    /**
     * @param {?} utils
     */
    constructor(utils) {
        this.utils = utils;
        // Debugging
        this.nzDebugId = null; // set this id will print debug informations to console
        // Dynamic property settings
        this.nzDisabled = false;
        // Static configurations (properties that can only specify once)
        this.nzStep = 1;
        this.nzMarks = null;
        this.nzDots = false;
        this.nzMin = 0;
        this.nzMax = 100;
        this.nzIncluded = true;
        this.nzDefaultValue = null;
        this.nzOnAfterChange = new EventEmitter();
        // Inside properties
        this._range = false;
        this._vertical = false;
        this.value = null;
        this.cacheSliderStart = null;
        this.cacheSliderLength = null;
        this.prefixCls = 'ant-slider';
        this.activeValueIndex = null; // Current activated handle's index ONLY for range=true
        this.track = { offset: null, length: null }; // Track's offset and length
        this.bounds = { lower: null, upper: null }; // now for nz-slider-step
        this.isDragging = false; // Current dragging state
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzVertical(value) {
        if (value === '') {
            this._vertical = true;
        }
        else {
            this._vertical = (value);
        }
    }
    /**
     * @return {?}
     */
    get nzVertical() {
        return this._vertical;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzRange(value) {
        if (value === '') {
            this._range = true;
        }
        else {
            this._range = (value);
        }
    }
    /**
     * @return {?}
     */
    get nzRange() {
        return this._range;
    }
    /**
     * @param {?} val
     * @param {?=} isWriteValue
     * @return {?}
     */
    setValue(val, isWriteValue = false) {
        if (isWriteValue) {
            this.value = this.formatValue(val);
            this.log(`[ngModel:setValue/writeValue]Update track & handles`);
            this.updateTrackAndHandles();
            // if (!this.isValueEqual(this.value, val)) {
            //   this.log(`[ngModel:setValue/writeValue]onValueChange`, val);
            //   if (this.onValueChange) { // NOTE: onValueChange will be unavailable when writeValue() called at the first time
            //     this.onValueChange(this.value);
            //   }
            // }
        }
        else {
            if (!this.isValueEqual(this.value, val)) {
                this.value = val;
                this.log(`[Normal:setValue]Update track & handles`);
                this.updateTrackAndHandles();
                this.log(`[Normal:setValue]onValueChange`, val);
                if (this.onValueChange) {
                    this.onValueChange(this.value);
                }
            }
        }
    }
    /**
     * @param {?=} cloneAndSort
     * @return {?}
     */
    getValue(cloneAndSort = false) {
        if (cloneAndSort && this.nzRange) {
            return this.utils.cloneArray(/** @type {?} */ (this.value)).sort((a, b) => a - b);
        }
        return this.value;
    }
    /**
     * @param {?=} value
     * @return {?}
     */
    getValueToOffset(value) {
        if (typeof value === 'undefined') {
            value = this.getValue(true);
        }
        return this.nzRange ?
            ((value)).map(val => this.valueToOffset(val)) :
            this.valueToOffset(value);
    }
    /**
     * @param {?} val
     * @return {?}
     */
    writeValue(val) {
        if (typeof this.onValueChange !== 'function') {
            return;
        } // ignore the first initial call
        this.log(`[ngModel/writeValue]current writing value = `, val);
        this.setValue(val, true);
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onValueChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.nzDisabled = isDisabled;
        this.toggleDragDisabled(isDisabled);
        this.setClassMap();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // initial checking
        this.checkValidValue(this.nzDefaultValue); // check nzDefaultValue
        // default handles
        this.handles = this._generateHandles(this.nzRange ? 2 : 1);
        // initialize
        this.sliderDOM = this.slider.nativeElement;
        if (this.getValue() === null) {
            this.setValue(this.formatValue(null));
        } // init with default value
        this.marksArray = this.nzMarks === null ? null : this.toMarksArray(this.nzMarks);
        // event bindings
        this.createDrag();
        // initialize drag's disabled status
        this.toggleDragDisabled(this.nzDisabled);
        // the first time to init classes
        this.setClassMap();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        const { nzDisabled } = changes;
        if (nzDisabled && !nzDisabled.firstChange) {
            this.toggleDragDisabled(nzDisabled.currentValue);
            this.setClassMap();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.unsubscribeDrag();
    }
    /**
     * @return {?}
     */
    setClassMap() {
        const { prefixCls, nzDisabled, nzVertical, marksArray } = this;
        this.classMap = {
            [prefixCls]: true,
            [`${prefixCls}-disabled`]: nzDisabled,
            [`${prefixCls}-vertical`]: nzVertical,
            [`${prefixCls}-with-marks`]: marksArray ? marksArray.length : 0
        };
    }
    /**
     * @param {?} pointerValue
     * @return {?}
     */
    setActiveValueIndex(pointerValue) {
        if (this.nzRange) {
            let /** @type {?} */ minimal = null, /** @type {?} */ gap, /** @type {?} */ activeIndex;
            ((this.getValue())).forEach((val, index) => {
                gap = Math.abs(pointerValue - val);
                if (minimal === null || gap < minimal) {
                    minimal = gap;
                    activeIndex = index;
                }
            });
            this.activeValueIndex = activeIndex;
        }
    }
    /**
     * @param {?} pointerValue
     * @return {?}
     */
    setActiveValue(pointerValue) {
        if (this.nzRange) {
            const /** @type {?} */ newValue = this.utils.cloneArray(/** @type {?} */ (this.value));
            newValue[this.activeValueIndex] = pointerValue;
            this.setValue(newValue);
        }
        else {
            this.setValue(pointerValue);
        }
    }
    /**
     * @return {?}
     */
    updateTrackAndHandles() {
        const /** @type {?} */ value = this.getValue();
        const /** @type {?} */ offset = this.getValueToOffset(value);
        const /** @type {?} */ valueSorted = this.getValue(true);
        const /** @type {?} */ offsetSorted = this.getValueToOffset(valueSorted);
        const /** @type {?} */ boundParts = this.nzRange ? (valueSorted) : [0, valueSorted];
        const /** @type {?} */ trackParts = this.nzRange ? [offsetSorted[0], offsetSorted[1] - offsetSorted[0]] : [0, offsetSorted];
        this.handles.forEach((handle, index) => {
            handle.offset = this.nzRange ? offset[index] : offset;
            handle.value = this.nzRange ? value[index] : value;
        });
        [this.bounds.lower, this.bounds.upper] = boundParts;
        [this.track.offset, this.track.length] = trackParts;
    }
    /**
     * @param {?} marks
     * @return {?}
     */
    toMarksArray(marks) {
        const { nzMin, nzMax } = this;
        const /** @type {?} */ marksArray = [];
        for (const /** @type {?} */ key in marks) {
            const /** @type {?} */ mark = marks[key];
            const /** @type {?} */ val = typeof key === 'number' ? key : parseFloat(key);
            if (val < nzMin || val > nzMax) {
                continue;
            }
            marksArray.push({ value: val, offset: this.valueToOffset(val), config: mark });
        }
        return marksArray;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onDragStart(value) {
        this.log('[onDragStart]dragging value = ', value);
        this.toggleDragMoving(true);
        // cache DOM layout/reflow operations
        this.cacheSliderProperty();
        // trigger drag start
        this.setActiveValueIndex(value);
        this.setActiveValue(value);
        // Tooltip visibility of handles
        this._showHandleTooltip(this.nzRange ? this.activeValueIndex : 0);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onDragMove(value) {
        this.log('[onDragMove]dragging value = ', value);
        // trigger drag moving
        this.setActiveValue(value);
    }
    /**
     * @return {?}
     */
    onDragEnd() {
        this.log('[onDragEnd]');
        this.toggleDragMoving(false);
        this.nzOnAfterChange.emit(this.getValue(true));
        // remove cache DOM layout/reflow operations
        this.cacheSliderProperty(true);
        // Hide all tooltip
        this._hideAllHandleTooltip();
    }
    /**
     * @return {?}
     */
    createDrag() {
        const /** @type {?} */ sliderDOM = this.sliderDOM, /** @type {?} */ orientField = this.nzVertical ? 'pageY' : 'pageX', /** @type {?} */ mouse = {
            start: 'mousedown', move: 'mousemove', end: 'mouseup',
            pluckKey: [orientField]
        }, /** @type {?} */ touch = {
            start: 'touchstart', move: 'touchmove', end: 'touchend',
            pluckKey: ['touches', '0', orientField],
            filter: (e) => !this.utils.isNotTouchEvent(/** @type {?} */ (e))
        };
        // make observables
        [mouse, touch].forEach(source => {
            const { start, move, end, pluckKey, filter: filter$$1 = () => true } = source;
            // start
            source.startPlucked$ = ((RxChain.from(fromEvent$1(sliderDOM, start))))
                .call(filter$1, filter$$1)
                .call(_do$1, this.utils.pauseEvent)
                .call(pluck$1, ...pluckKey)
                .call(map$1, (position) => this.findClosestValue(position))
                .result();
            // end
            source.end$ = fromEvent$1(document, end);
            // resolve move
            source.moveResolved$ = ((RxChain.from(fromEvent$1(document, move))))
                .call(filter$1, filter$$1)
                .call(_do$1, this.utils.pauseEvent)
                .call(pluck$1, ...pluckKey)
                .call(distinctUntilChanged$1)
                .call(map$1, (position) => this.findClosestValue(position))
                .call(distinctUntilChanged$1)
                .call(takeUntil$1, source.end$)
                .result();
            // merge to become moving
            // source.move$ = source.startPlucked$.mergeMapTo(source.moveResolved$);
        });
        // merge mouse and touch observables
        this.dragstart$ = merge$1(mouse.startPlucked$, touch.startPlucked$);
        // this.dragmove$ = Observable.merge(mouse.move$, touch.move$);
        this.dragmove$ = merge$1(mouse.moveResolved$, touch.moveResolved$);
        this.dragend$ = merge$1(mouse.end$, touch.end$);
    }
    /**
     * @param {?=} periods
     * @return {?}
     */
    subscribeDrag(periods = ['start', 'move', 'end']) {
        this.log('[subscribeDrag]this.dragstart$ = ', this.dragstart$);
        if (periods.indexOf('start') !== -1 && this.dragstart$ && !this.dragstart_) {
            this.dragstart_ = this.dragstart$.subscribe(this.onDragStart.bind(this));
        }
        if (periods.indexOf('move') !== -1 && this.dragmove$ && !this.dragmove_) {
            this.dragmove_ = this.dragmove$.subscribe(this.onDragMove.bind(this));
        }
        if (periods.indexOf('end') !== -1 && this.dragend$ && !this.dragend_) {
            this.dragend_ = this.dragend$.subscribe(this.onDragEnd.bind(this));
        }
    }
    /**
     * @param {?=} periods
     * @return {?}
     */
    unsubscribeDrag(periods = ['start', 'move', 'end']) {
        this.log('[unsubscribeDrag]this.dragstart_ = ', this.dragstart_);
        if (periods.indexOf('start') !== -1 && this.dragstart_) {
            this.dragstart_.unsubscribe();
            this.dragstart_ = null;
        }
        if (periods.indexOf('move') !== -1 && this.dragmove_) {
            this.dragmove_.unsubscribe();
            this.dragmove_ = null;
        }
        if (periods.indexOf('end') !== -1 && this.dragend_) {
            this.dragend_.unsubscribe();
            this.dragend_ = null;
        }
    }
    /**
     * @param {?} movable
     * @return {?}
     */
    toggleDragMoving(movable) {
        const /** @type {?} */ periods = ['move', 'end'];
        if (movable) {
            this.isDragging = true;
            this.subscribeDrag(periods);
        }
        else {
            this.isDragging = false;
            this.unsubscribeDrag(periods);
        }
    }
    /**
     * @param {?} disabled
     * @return {?}
     */
    toggleDragDisabled(disabled) {
        if (disabled) {
            this.unsubscribeDrag();
        }
        else {
            this.subscribeDrag(['start']);
        }
    }
    /**
     * @param {?} position
     * @return {?}
     */
    findClosestValue(position) {
        const { nzVertical, nzStep, nzMin, nzMax, nzMarks, nzDots, utils } = this, /** @type {?} */ sliderStart = this.getSliderStartPosition(), /** @type {?} */ sliderLength = this.getSliderLength();
        const /** @type {?} */ ratio = utils.correctNumLimit((position - sliderStart) / sliderLength, 0, 1), /** @type {?} */ val = (nzMax - nzMin) * (nzVertical ? 1 - ratio : ratio) + nzMin, /** @type {?} */ points = ((nzMarks === null ? [] : Object.keys(nzMarks).map(parseFloat)));
        // push closest step
        if (nzStep !== null && !nzDots) {
            const /** @type {?} */ closest = Math.round(val / nzStep) * nzStep;
            points.push(closest);
        }
        // calculate gaps
        const /** @type {?} */ gaps = points.map(point => Math.abs(val - point));
        const /** @type {?} */ closest = points[gaps.indexOf(Math.min(...gaps))];
        // return the fixed
        return nzStep === null ? closest :
            parseFloat(closest.toFixed(utils.getPrecision(nzStep)));
    }
    /**
     * @param {?} value
     * @return {?}
     */
    valueToOffset(value) {
        return this.utils.valueToOffset(this.nzMin, this.nzMax, value);
    }
    /**
     * @return {?}
     */
    getSliderStartPosition() {
        if (this.cacheSliderStart !== null) {
            return this.cacheSliderStart;
        }
        const /** @type {?} */ offset = this.utils.getElementOffset(this.sliderDOM);
        return this.nzVertical ? offset.top : offset.left;
    }
    /**
     * @return {?}
     */
    getSliderLength() {
        if (this.cacheSliderLength !== null) {
            return this.cacheSliderLength;
        }
        const /** @type {?} */ sliderDOM = this.sliderDOM;
        return this.nzVertical ?
            sliderDOM.clientHeight : sliderDOM.clientWidth;
    }
    /**
     * @param {?=} remove
     * @return {?}
     */
    cacheSliderProperty(remove = false) {
        this.cacheSliderStart = remove ? null : this.getSliderStartPosition();
        this.cacheSliderLength = remove ? null : this.getSliderLength();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    formatValue(value) {
        if (!this.checkValidValue(value)) {
            value = this.nzDefaultValue === null ?
                (this.nzRange ? [this.nzMin, this.nzMax] : this.nzMin) : this.nzDefaultValue;
        }
        else {
            value = this.nzRange ?
                ((value)).map(val => this.utils.correctNumLimit(val, this.nzMin, this.nzMax)) :
                this.utils.correctNumLimit(value, this.nzMin, this.nzMax);
        }
        return value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    checkValidValue(value) {
        const /** @type {?} */ range = this.nzRange;
        if (value === null || value === undefined) {
            return false;
        } // it's an invalid value, just return
        const /** @type {?} */ isArray = Array.isArray(value);
        if (!isArray) {
            if (typeof value !== 'number') {
                value = parseFloat(value);
            }
            if (isNaN(value)) {
                return false;
            } // it's an invalid value, just return
        }
        if (isArray !== !!range) {
            throw new Error(`The "nzRange" can't match the "nzValue"'s type, please check these properties: "nzRange", "nzValue", "nzDefaultValue".`);
        }
        return true;
    }
    /**
     * @param {?} value
     * @param {?} val
     * @return {?}
     */
    isValueEqual(value, val) {
        if (typeof value !== typeof val) {
            return false;
        }
        if (Array.isArray(value)) {
            const /** @type {?} */ len = ((value)).length;
            for (let /** @type {?} */ i = 0; i < len; i++) {
                if (value[i] !== val[i]) {
                    return false;
                }
            }
            return true;
        }
        else {
            return value === val;
        }
    }
    /**
     * @param {...?} messages
     * @return {?}
     */
    log(...messages) {
        if (this.nzDebugId !== null) {
            const /** @type {?} */ args = [`[nz-slider][#${this.nzDebugId}] `].concat(Array.prototype.slice.call(arguments));
            console.log.apply(null, args);
        }
    }
    /**
     * @param {?=} handleIndex
     * @return {?}
     */
    _showHandleTooltip(handleIndex = 0) {
        this.handles.forEach((handle, index) => {
            this.handles[index].active = index === handleIndex;
        });
    }
    /**
     * @return {?}
     */
    _hideAllHandleTooltip() {
        this.handles.forEach(handle => handle.active = false);
    }
    /**
     * @param {?} amount
     * @return {?}
     */
    _generateHandles(amount) {
        const /** @type {?} */ handles = [];
        for (let /** @type {?} */ i = 0; i < amount; i++) {
            handles.push({ offset: null, value: null, active: false });
        }
        return handles;
    }
}
NzSliderComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-slider',
                encapsulation: ViewEncapsulation.None,
                providers: [{
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => NzSliderComponent),
                        multi: true
                    }],
                template: `
    <div #slider [ngClass]="classMap">
      <div class="ant-slider-rail"></div>
      <nz-slider-track
        nzClassName="{{prefixCls}}-track"
        [nzVertical]="nzVertical"
        [nzIncluded]="nzIncluded"
        [nzOffset]="track.offset"
        [nzLength]="track.length"
      ></nz-slider-track>
      <nz-slider-step *ngIf="marksArray"
        nzPrefixCls="{{prefixCls}}"
        [nzVertical]="nzVertical"
        [nzLowerBound]="bounds.lower"
        [nzUpperBound]="bounds.upper"
        [nzMarksArray]="marksArray"
        [nzIncluded]="nzIncluded"
      ></nz-slider-step>
      <nz-slider-handle
        *ngFor="let handle of handles;"
        nzClassName="{{prefixCls}}-handle"
        [nzVertical]="nzVertical"
        [nzOffset]="handle.offset"
        [nzValue]="handle.value"
        [nzActive]="handle.active"
        [nzTipFormatter]="nzTipFormatter"
      ></nz-slider-handle>
      <nz-slider-marks *ngIf="marksArray"
        nzClassName="{{prefixCls}}-mark"
        [nzVertical]="nzVertical"
        [nzMin]="nzMin"
        [nzMax]="nzMax"
        [nzLowerBound]="bounds.lower"
        [nzUpperBound]="bounds.upper"
        [nzMarksArray]="marksArray"
        [nzIncluded]="nzIncluded"
      ></nz-slider-marks>
    </div>
  `,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-slider {
  position: relative;
  margin: 10px 6px;
  padding: 4px 0;
  height: 12px;
  cursor: pointer;
}
.ant-slider-vertical {
  width: 12px;
  height: 100%;
  margin: 6px 10px;
  padding: 0 4px;
}
.ant-slider-vertical .ant-slider-rail {
  height: 100%;
  width: 4px;
}
.ant-slider-vertical .ant-slider-track {
  width: 4px;
}
.ant-slider-vertical .ant-slider-handle {
  margin-left: -5px;
  margin-bottom: -7px;
}
.ant-slider-vertical .ant-slider-mark {
  top: 0;
  left: 12px;
  width: 18px;
  height: 100%;
}
.ant-slider-vertical .ant-slider-mark-text {
  left: 4px;
  white-space: nowrap;
}
.ant-slider-vertical .ant-slider-step {
  width: 4px;
  height: 100%;
}
.ant-slider-vertical .ant-slider-dot {
  top: auto;
  left: 2px;
  margin-bottom: -4px;
}
.ant-slider-with-marks {
  margin-bottom: 28px;
}
.ant-slider-rail {
  position: absolute;
  width: 100%;
  height: 4px;
  border-radius: 2px;
  background-color: #e9e9e9;
  transition: background-color 0.3s ease;
}
.ant-slider-track {
  position: absolute;
  height: 4px;
  border-radius: 4px;
  background-color: #b2ebd8;
  transition: background-color 0.3s ease;
}
.ant-slider-handle {
  position: absolute;
  margin-left: -7px;
  margin-top: -5px;
  width: 14px;
  height: 14px;
  cursor: pointer;
  border-radius: 50%;
  border: solid 2px #9fe7cf;
  background-color: #fff;
  transition: border-color 0.3s ease, transform 0.3s cubic-bezier(0.18, 0.89, 0.32, 1.28);
}
.ant-slider-handle:hover {
  border-color: #6ddab5;
  transform: scale(1.2);
  transform-origin: center center;
}
.ant-slider-handle:active {
  box-shadow: 0 0 0 2px rgba(63, 206, 158, 0.2);
}
.ant-slider:hover .ant-slider-rail {
  background-color: #e1e1e1;
}
.ant-slider:hover .ant-slider-track {
  background-color: #8ce2c5;
}
.ant-slider:hover .ant-slider-handle {
  border-color: #6ddab5;
}
.ant-slider-mark {
  position: absolute;
  top: 14px;
  left: 0;
  width: 100%;
  font-size: 12px;
}
.ant-slider-mark-text {
  position: absolute;
  display: inline-block;
  vertical-align: middle;
  text-align: center;
  cursor: pointer;
  color: rgba(0, 0, 0, 0.43);
}
.ant-slider-mark-text-active {
  color: rgba(0, 0, 0, 0.65);
}
.ant-slider-step {
  position: absolute;
  width: 100%;
  height: 4px;
  background: transparent;
}
.ant-slider-dot {
  position: absolute;
  top: -2px;
  margin-left: -4px;
  width: 8px;
  height: 8px;
  border: 2px solid #e9e9e9;
  background-color: #fff;
  cursor: pointer;
  border-radius: 50%;
  vertical-align: middle;
}
.ant-slider-dot:first-child {
  margin-left: -4px;
}
.ant-slider-dot:last-child {
  margin-left: -4px;
}
.ant-slider-dot-active {
  border-color: #9fe7cf;
}
.ant-slider-disabled {
  cursor: not-allowed;
}
.ant-slider-disabled .ant-slider-track {
  background-color: rgba(0, 0, 0, 0.25) !important;
}
.ant-slider-disabled .ant-slider-handle,
.ant-slider-disabled .ant-slider-dot {
  border-color: rgba(0, 0, 0, 0.25) !important;
  background-color: #fff;
  cursor: not-allowed;
  box-shadow: none;
}
.ant-slider-disabled .ant-slider-mark-text,
.ant-slider-disabled .ant-slider-dot {
  cursor: not-allowed !important;
}
`
                ]
            },] },
];
/**
 * @nocollapse
 */
NzSliderComponent.ctorParameters = () => [
    { type: NzSliderService, },
];
NzSliderComponent.propDecorators = {
    'nzDebugId': [{ type: Input },],
    'nzDisabled': [{ type: Input },],
    'nzStep': [{ type: Input },],
    'nzMarks': [{ type: Input },],
    'nzDots': [{ type: Input },],
    'nzMin': [{ type: Input },],
    'nzMax': [{ type: Input },],
    'nzIncluded': [{ type: Input },],
    'nzDefaultValue': [{ type: Input },],
    'nzTipFormatter': [{ type: Input },],
    'nzOnAfterChange': [{ type: Output },],
    'nzVertical': [{ type: Input },],
    'nzRange': [{ type: Input },],
    'slider': [{ type: ViewChild, args: ['slider',] },],
};

class NzSliderTrackComponent {
    constructor() {
        this.style = {};
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        const { nzOffset, nzLength, nzIncluded, nzVertical, style: style$$1 } = this;
        if (changes.nzIncluded) {
            style$$1.visibility = nzIncluded ? 'visible' : 'hidden';
        }
        if (changes.nzVertical || changes.nzOffset || changes.nzLength) {
            if (nzVertical) {
                style$$1.bottom = `${nzOffset}%`;
                style$$1.height = `${nzLength}%`;
            }
            else {
                style$$1.left = `${nzOffset}%`;
                style$$1.width = `${nzLength}%`;
            }
        }
    }
}
NzSliderTrackComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-slider-track',
                encapsulation: ViewEncapsulation.None,
                template: `
    <div [class]="nzClassName" [ngStyle]="style"></div>
  `
            },] },
];
/**
 * @nocollapse
 */
NzSliderTrackComponent.ctorParameters = () => [];
NzSliderTrackComponent.propDecorators = {
    'nzOffset': [{ type: Input },],
    'nzLength': [{ type: Input },],
    'nzClassName': [{ type: Input },],
    'nzVertical': [{ type: Input },],
    'nzIncluded': [{ type: Input },],
};

class NzSliderHandleComponent {
    /**
     * @param {?} _slider
     */
    constructor(_slider) {
        this._slider = _slider;
        this.style = {};
    }
    /**
     * @param {?} show
     * @return {?}
     */
    set nzActive(show) {
        if (this.tooltip) {
            if (show) {
                this.tooltip.show();
            }
            else {
                this.tooltip.hide();
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.nzOffset) {
            this._updateStyle();
        }
        if (changes.nzValue) {
            this._updateTooltipTitle(); // [For tooltip]
            this._updateTooltipPosition(); // [For tooltip]
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onMouseEnter($event) {
        if (!this._slider.isDragging) {
            this.nzActive = true;
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onMouseLeave($event) {
        if (!this._slider.isDragging) {
            this.nzActive = false;
        }
    }
    /**
     * @return {?}
     */
    _updateTooltipTitle() {
        this.tooltipTitle = this.nzTipFormatter ? this.nzTipFormatter(this.nzValue) : this.nzValue;
    }
    /**
     * @return {?}
     */
    _updateTooltipPosition() {
        if (this.tooltip) {
            window.setTimeout(() => this.tooltip.updatePosition(), 0); // MAY use ngAfterViewChecked? but this will be called so many times.
        }
    }
    /**
     * @return {?}
     */
    _updateStyle() {
        this.style[this.nzVertical ? 'bottom' : 'left'] = `${this.nzOffset}%`;
    }
}
NzSliderHandleComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-slider-handle',
                encapsulation: ViewEncapsulation.None,
                template: `
    <nz-tooltip *ngIf="nzTipFormatter !== null" #tooltip [nzTitle]="tooltipTitle" [nzTrigger]="null">
      <div nz-tooltip [class]="nzClassName" [ngStyle]="style"></div>
    </nz-tooltip>
    <div *ngIf="nzTipFormatter === null" [class]="nzClassName" [ngStyle]="style"></div>
  `
            },] },
];
/**
 * @nocollapse
 */
NzSliderHandleComponent.ctorParameters = () => [
    { type: NzSliderComponent, },
];
NzSliderHandleComponent.propDecorators = {
    'nzClassName': [{ type: Input },],
    'nzVertical': [{ type: Input },],
    'nzOffset': [{ type: Input },],
    'nzValue': [{ type: Input },],
    'nzTipFormatter': [{ type: Input },],
    'nzActive': [{ type: Input },],
    'tooltip': [{ type: ViewChild, args: ['tooltip',] },],
    'onMouseEnter': [{ type: HostListener, args: ['mouseenter', ['$event'],] },],
    'onMouseLeave': [{ type: HostListener, args: ['mouseleave', ['$event'],] },],
};

class NzSliderStepComponent {
    constructor() {
        // Dynamic properties
        this.nzLowerBound = null;
        this.nzUpperBound = null;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.nzLowerBound || changes.nzUpperBound) {
            this.togglePointActive();
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        const /** @type {?} */ orient = this.nzVertical ? 'bottom' : 'left', /** @type {?} */ prefixCls = this.nzPrefixCls;
        this.attrs = this.nzMarksArray.map(mark => {
            const { value, offset } = mark;
            return {
                id: value,
                value: value,
                offset: offset,
                style: {
                    [orient]: `${offset}%`
                },
                classes: {
                    [`${prefixCls}-dot`]: true,
                    [`${prefixCls}-dot-active`]: false
                }
            };
        });
        this.togglePointActive();
    }
    /**
     * @param {?} index
     * @param {?} attr
     * @return {?}
     */
    trackById(index, attr) {
        return attr.id;
    }
    /**
     * @return {?}
     */
    togglePointActive() {
        const { nzPrefixCls, attrs, nzLowerBound, nzUpperBound, nzIncluded } = this;
        if (attrs && nzLowerBound !== null && nzUpperBound !== null) {
            attrs.forEach(attr => {
                const /** @type {?} */ value = attr.value, /** @type {?} */ isActive = (!nzIncluded && value === nzUpperBound) ||
                    (nzIncluded && value <= nzUpperBound && value >= nzLowerBound);
                attr.classes[`${nzPrefixCls}-dot-active`] = isActive;
            });
        }
    }
}
NzSliderStepComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-slider-step',
                encapsulation: ViewEncapsulation.None,
                template: `
    <div class="{{nzPrefixCls}}-step">
      <span *ngFor="let attr of attrs; trackBy: trackById" [ngClass]="attr.classes" [ngStyle]="attr.style"></span>
    </div>
  `
            },] },
];
/**
 * @nocollapse
 */
NzSliderStepComponent.ctorParameters = () => [];
NzSliderStepComponent.propDecorators = {
    'nzLowerBound': [{ type: Input },],
    'nzUpperBound': [{ type: Input },],
    'nzPrefixCls': [{ type: Input },],
    'nzVertical': [{ type: Input },],
    'nzMarksArray': [{ type: Input },],
    'nzIncluded': [{ type: Input },],
};

class NzSliderMarksComponent {
    constructor() {
        // Dynamic properties
        this.nzLowerBound = null;
        this.nzUpperBound = null;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.nzLowerBound || changes.nzUpperBound) {
            this.togglePointActive();
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        const { nzVertical, nzClassName, nzMarksArray, nzMin, nzMax, nzLowerBound, nzUpperBound } = this;
        const /** @type {?} */ range = nzMax - nzMin;
        this.attrs = nzMarksArray.map(mark => {
            const { value, offset, config } = mark;
            // calc styles
            let /** @type {?} */ label = config, /** @type {?} */ style$$1;
            if (nzVertical) {
                style$$1 = {
                    marginBottom: '-50%',
                    bottom: `${(value - nzMin) / range * 100}%`
                };
            }
            else {
                const /** @type {?} */ marksCount = nzMarksArray.length, /** @type {?} */ unit = 100 / (marksCount - 1), /** @type {?} */ markWidth = unit * 0.9;
                style$$1 = {
                    width: `${markWidth}%`,
                    marginLeft: `${-markWidth / 2}%`,
                    left: `${(value - nzMin) / range * 100}%`
                };
            }
            // custom configuration
            if (typeof config === 'object') {
                label = config.label;
                if (config.style) {
                    style$$1 = Object.assign({}, style$$1, config.style);
                }
            }
            return {
                id: value,
                value: value,
                offset: offset,
                classes: {
                    [`${nzClassName}-text`]: true
                },
                style: style$$1,
                label: label
            };
        }); // END - map
        this.togglePointActive();
    }
    /**
     * @param {?} index
     * @param {?} attr
     * @return {?}
     */
    trackById(index, attr) {
        return attr.id;
    }
    /**
     * @return {?}
     */
    togglePointActive() {
        const { nzClassName, attrs, nzLowerBound, nzUpperBound, nzIncluded } = this;
        if (attrs && nzLowerBound !== null && nzUpperBound !== null) {
            attrs.forEach(attr => {
                const /** @type {?} */ value = attr.value, /** @type {?} */ isActive = (!nzIncluded && value === nzUpperBound) ||
                    (nzIncluded && value <= nzUpperBound && value >= nzLowerBound);
                attr.classes[`${nzClassName}-text-active`] = isActive;
            });
        }
    }
}
NzSliderMarksComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-slider-marks',
                encapsulation: ViewEncapsulation.None,
                template: `
    <div [class]="nzClassName">
      <span *ngFor="let attr of attrs; trackBy: trackById" [ngClass]="attr.classes" [ngStyle]="attr.style" [innerHTML]="attr.label"></span>
    </div>
  `
            },] },
];
/**
 * @nocollapse
 */
NzSliderMarksComponent.ctorParameters = () => [];
NzSliderMarksComponent.propDecorators = {
    'nzLowerBound': [{ type: Input },],
    'nzUpperBound': [{ type: Input },],
    'nzClassName': [{ type: Input },],
    'nzVertical': [{ type: Input },],
    'nzMarksArray': [{ type: Input },],
    'nzMin': [{ type: Input },],
    'nzMax': [{ type: Input },],
    'nzIncluded': [{ type: Input },],
};

class NzSliderModule {
}
NzSliderModule.decorators = [
    { type: NgModule, args: [{
                exports: [NzSliderComponent, NzSliderTrackComponent, NzSliderHandleComponent, NzSliderStepComponent, NzSliderMarksComponent],
                declarations: [NzSliderComponent, NzSliderTrackComponent, NzSliderHandleComponent, NzSliderStepComponent, NzSliderMarksComponent],
                imports: [CommonModule, NzToolTipModule],
                providers: [NzSliderService]
            },] },
];
/**
 * @nocollapse
 */
NzSliderModule.ctorParameters = () => [];

class NzSwitchComponent {
    constructor() {
        this._prefixCls = 'ant-switch';
        this._innerPrefixCls = `${this._prefixCls}-inner`;
        this._checked = false;
        this._disabled = false;
        // ngModel Access
        this.onChange = Function.prototype;
        this.onTouched = Function.prototype;
    }
    /**
     * @return {?}
     */
    get nzSize() {
        return this._size;
    }
    ;
    /**
     * @param {?} value
     * @return {?}
     */
    set nzSize(value) {
        this._size = value;
        this.setClassMap();
    }
    /**
     * @return {?}
     */
    get nzDisabled() {
        return this._disabled;
    }
    ;
    /**
     * @param {?} value
     * @return {?}
     */
    set nzDisabled(value) {
        this._disabled = value;
        this.setClassMap();
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onClick(e) {
        e.preventDefault();
        if (!this._disabled) {
            this.updateValue(!this._checked);
            this.onChange(this._checked);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    updateValue(value) {
        if (this._checked === value) {
            return;
        }
        this._checked = value;
        this.setClassMap();
    }
    /**
     * @return {?}
     */
    setClassMap() {
        this._classMap = {
            [this._prefixCls]: true,
            [`${this._prefixCls}-checked`]: this._checked,
            [`${this._prefixCls}-disabled`]: this._disabled,
            [`${this._prefixCls}-small`]: this._size === 'small'
        };
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.updateValue(value);
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.nzDisabled = isDisabled;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.setClassMap();
    }
}
NzSwitchComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-switch',
                encapsulation: ViewEncapsulation.None,
                template: `
    <span [ngClass]="_classMap" tabindex="0">
      <span [ngClass]="_innerPrefixCls">
        <ng-template [ngIf]="_checked">
          <ng-content select="[checked]"></ng-content>
        </ng-template>
        <ng-template [ngIf]="!_checked">
          <ng-content select="[unchecked]"></ng-content>
        </ng-template>
      </span>
    </span>
  `,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => NzSwitchComponent),
                        multi: true
                    }
                ],
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-switch {
  position: relative;
  display: inline-block;
  box-sizing: border-box;
  height: 22px;
  min-width: 44px;
  line-height: 20px;
  vertical-align: middle;
  border-radius: 20px;
  border: 1px solid transparent;
  background-color: rgba(0, 0, 0, 0.25);
  cursor: pointer;
  transition: all 0.36s;
  user-select: none;
}
.ant-switch-inner {
  color: #fff;
  font-size: 12px;
  margin-left: 24px;
  margin-right: 6px;
  display: block;
}
.ant-switch:after {
  position: absolute;
  width: 18px;
  height: 18px;
  left: 1px;
  top: 1px;
  border-radius: 18px;
  background-color: #fff;
  content: " ";
  cursor: pointer;
  transition: all 0.36s cubic-bezier(0.78, 0.14, 0.15, 0.86);
}
.ant-switch:active:after {
  width: 24px;
}
.ant-switch:focus {
  box-shadow: 0 0 0 2px rgba(63, 206, 158, 0.2);
  outline: 0;
}
.ant-switch:focus:hover {
  box-shadow: none;
}
.ant-switch-small {
  height: 14px;
  min-width: 28px;
  line-height: 12px;
}
.ant-switch-small .ant-switch-inner {
  margin-left: 18px;
  margin-right: 3px;
}
.ant-switch-small:after {
  width: 12px;
  height: 12px;
  top: 0;
  left: 0.5px;
}
.ant-switch-small:active:after {
  width: 16px;
}
.ant-switch-small.ant-switch-checked:after {
  left: 100%;
  margin-left: -12.5px;
}
.ant-switch-small.ant-switch-checked .ant-switch-inner {
  margin-left: 3px;
  margin-right: 18px;
}
.ant-switch-small:active.ant-switch-checked:after {
  margin-left: -16.5px;
}
.ant-switch-checked {
  background-color: #3FCE9E;
}
.ant-switch-checked .ant-switch-inner {
  margin-left: 6px;
  margin-right: 24px;
}
.ant-switch-checked:after {
  left: 100%;
  margin-left: -19px;
}
.ant-switch-checked:active:after {
  margin-left: -25px;
}
.ant-switch-disabled {
  cursor: not-allowed;
  background: #f4f4f4;
}
.ant-switch-disabled:after {
  background: #ccc;
  cursor: not-allowed;
}
.ant-switch-disabled .ant-switch-inner {
  color: rgba(0, 0, 0, 0.25);
}
`
                ]
            },] },
];
/**
 * @nocollapse
 */
NzSwitchComponent.ctorParameters = () => [];
NzSwitchComponent.propDecorators = {
    'nzSize': [{ type: Input },],
    'nzDisabled': [{ type: Input },],
    'onClick': [{ type: HostListener, args: ['click', ['$event'],] },],
};

class NzSwitchModule {
}
NzSwitchModule.decorators = [
    { type: NgModule, args: [{
                exports: [NzSwitchComponent],
                declarations: [NzSwitchComponent],
                imports: [CommonModule]
            },] },
];
/**
 * @nocollapse
 */
NzSwitchModule.ctorParameters = () => [];

let scrollbarWidth;
// Measure scrollbar width for padding body during modal show/hide
const scrollbarMeasure = {
    position: 'absolute',
    top: '-9999px',
    width: '50px',
    height: '50px',
    overflow: 'scroll',
};
/**
 * @return {?}
 */
function measureScrollbar() {
    if (typeof document === 'undefined' || typeof window === 'undefined') {
        return 0;
    }
    if (scrollbarWidth) {
        return scrollbarWidth;
    }
    const /** @type {?} */ scrollDiv = document.createElement('div');
    for (const /** @type {?} */ scrollProp in scrollbarMeasure) {
        if (scrollbarMeasure.hasOwnProperty(scrollProp)) {
            scrollDiv.style[scrollProp] = scrollbarMeasure[scrollProp];
        }
    }
    document.body.appendChild(scrollDiv);
    const /** @type {?} */ width = scrollDiv.offsetWidth - scrollDiv.clientWidth;
    document.body.removeChild(scrollDiv);
    scrollbarWidth = width;
    return scrollbarWidth;
}

class NzTableComponent {
    /**
     * @param {?} _elementRef
     * @param {?} _cd
     */
    constructor(_elementRef, _cd) {
        this._elementRef = _elementRef;
        this._cd = _cd;
        /**
         * public data for ngFor tr
         */
        this.data = [];
        this._current = 1;
        this._pageSize = 10;
        this._dataSet = [];
        this._isInit = false;
        this._isAjax = false;
        this.ths = [];
        this.nzPageSizeChange = new EventEmitter();
        this.nzPageIndexChange = new EventEmitter();
        this.nzDataChange = new EventEmitter();
        this.nzPageIndexChangeClick = new EventEmitter();
        this.nzBordered = false;
        this.nzCustomNoResult = false;
        this.nzIsPagination = true;
        this.nzLoading = false;
        this.nzShowSizeChanger = false;
        this.nzShowQuickJumper = false;
        this.nzShowTotal = false;
        this.nzShowFooter = false;
        this.nzShowTitle = false;
        this._el = this._elementRef.nativeElement;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzScroll(value) {
        this._scroll = value;
        this._cd.detectChanges();
    }
    /**
     * @return {?}
     */
    get nzScroll() {
        return this._scroll;
    }
    /**
     * async data
     * @return {?}
     */
    get nzAjaxData() {
        return this.data;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    set nzAjaxData(data) {
        this._isAjax = true;
        this.data = data;
    }
    /**
     * sync data
     * @return {?}
     */
    get nzDataSource() {
        return this._dataSet;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzDataSource(value) {
        this._dataSet = value;
        this.nzTotal = this._dataSet.length;
        this._generateData(true);
    }
    /**
     * @return {?}
     */
    get nzPageIndex() {
        return this._current;
    }
    ;
    /**
     * @param {?} value
     * @return {?}
     */
    set nzPageIndex(value) {
        if (this._current === value) {
            return;
        }
        this._current = value;
        this._generateData();
        this.nzPageIndexChange.emit(this.nzPageIndex);
    }
    ;
    /**
     * @param {?} value
     * @return {?}
     */
    pageChangeClick(value) {
        this.nzPageIndexChangeClick.emit(value);
    }
    /**
     * @return {?}
     */
    get nzPageSize() {
        return this._pageSize;
    }
    ;
    /**
     * @param {?} value
     * @return {?}
     */
    set nzPageSize(value) {
        if (this._pageSize === value) {
            return;
        }
        this._pageSize = value;
        this._generateData();
        if (this._isInit) {
            this.nzPageSizeChange.emit(value);
        }
    }
    ;
    /**
     * @return {?}
     */
    get nzTotal() {
        return this._total;
    }
    ;
    /**
     * @param {?} value
     * @return {?}
     */
    set nzTotal(value) {
        if (this._total === value) {
            return;
        }
        this._total = value;
    }
    /**
     * @param {?=} forceRefresh
     * @return {?}
     */
    _generateData(forceRefresh = false) {
        if (!this._isAjax) {
            if (this.nzIsPagination) {
                if (forceRefresh) {
                    this.nzPageIndex = 1;
                }
                this.data = this._dataSet.slice((this.nzPageIndex - 1) * this.nzPageSize, this.nzPageIndex * this.nzPageSize);
            }
            else {
                this.data = this._dataSet;
            }
            this.nzDataChange.emit(this.data);
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        const /** @type {?} */ scrollbarWidth = measureScrollbar();
        this._headerBottomStyle = {
            marginBottom: `-${scrollbarWidth}px`,
            paddingBottom: `0px`
        };
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this._isInit = true;
    }
}
NzTableComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-table',
                encapsulation: ViewEncapsulation.None,
                template: `
    <div
      class="ant-table-wrapper"
      [class.ant-table-empty]="data.length==0">
      <nz-spin [nzSpinning]="nzLoading">
        <div>
          <div
            class="ant-table"
            [class.ant-table-fixed-header]="nzScroll"
            [class.ant-table-scroll-position-left]="nzScroll"
            [class.ant-table-bordered]="nzBordered"
            [class.ant-table-large]="(nzSize!=='middle')&&(nzSize!=='small')"
            [class.ant-table-middle]="nzSize=='middle'"
            [class.ant-table-small]="nzSize=='small'">
            <div class="ant-table-title" *ngIf="nzShowTitle">
              <ng-content select="[nz-table-title]"></ng-content>
            </div>
            <div class="ant-table-content">
              <div [class.ant-table-scroll]="nzScroll">
                <div class="ant-table-header" [ngStyle]="_headerBottomStyle" *ngIf="nzScroll">
                  <table>
                    <colgroup>
                      <col *ngFor="let th of ths" [style.width]="th.nzWidth" [style.minWidth]="th.nzWidth">
                    </colgroup>
                    <ng-template [ngTemplateOutlet]="fixedHeader"></ng-template>
                  </table>
                </div>
                <div class="ant-table-body" [style.maxHeight.px]="nzScroll?.y" [style.overflowY]="nzScroll?.y?'scroll':''">
                  <table>
                    <colgroup>
                      <col [style.width]="th.nzWidth" [style.minWidth]="th.nzWidth" *ngFor="let th of ths">
                    </colgroup>
                    <ng-content></ng-content>
                  </table>
                </div>
                <div class="ant-table-placeholder" *ngIf="data.length==0 && !nzCustomNoResult">
                  <span>没有数据</span>
                </div>
                <div class="ant-table-placeholder" *ngIf="data.length==0 && nzCustomNoResult">
                  <ng-content select="[noResult]"></ng-content>
                </div>
                <div class="ant-table-footer" *ngIf="nzShowFooter">
                  <ng-content select="[nz-table-footer]"></ng-content>
                </div>
              </div>
            </div>
          </div>
        </div>
        <nz-pagination
          *ngIf="nzIsPagination&&data.length"
          class="ant-table-pagination"
          [nzShowSizeChanger]="nzShowSizeChanger"
          [nzShowQuickJumper]="nzShowQuickJumper"
          [nzShowTotal]="nzShowTotal"
          [nzSize]="(nzSize=='middle'||nzSize=='small')?'small':''"
          [(nzPageSize)]="nzPageSize"
          [nzTotal]="nzTotal"
          [(nzPageIndex)]="nzPageIndex"
          (nzPageIndexClickChange)="pageChangeClick($event)">
        </nz-pagination>
      </nz-spin>
    </div>
  `,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-table-wrapper {
  zoom: 1;
}
.ant-table-wrapper:before,
.ant-table-wrapper:after {
  content: " ";
  display: table;
}
.ant-table-wrapper:after {
  clear: both;
  visibility: hidden;
  font-size: 0;
  height: 0;
}
.ant-table {
  font-size: 12px;
  color: rgba(0, 0, 0, 0.65);
  overflow: hidden;
  position: relative;
  border-radius: 4px 4px 0 0;
  /* fix firefox scrollbar bug */
}
.ant-table-body {
  transition: opacity 0.3s ease;
}
.ant-table table {
  width: 100%;
  border-collapse: separate;
  border-spacing: 0;
  text-align: left;
  border-radius: 4px 4px 0 0;
  overflow: hidden;
}
.ant-table-thead > tr > th {
  background: #f7f7f7;
  font-weight: 500;
  transition: background .3s ease;
  text-align: left;
  color: rgba(0, 0, 0, 0.85);
}
.ant-table-thead > tr > th[colspan] {
  text-align: center;
}
.ant-table-thead > tr > th .anticon-filter,
.ant-table-thead > tr > th .ant-table-filter-icon {
  position: relative;
  margin-left: 4px;
  font-size: 12px;
  cursor: pointer;
  color: #aaa;
  transition: all .3s;
  width: 14px;
}
.ant-table-thead > tr > th .anticon-filter:hover,
.ant-table-thead > tr > th .ant-table-filter-icon:hover {
  color: rgba(0, 0, 0, 0.65);
}
.ant-table-thead > tr > th .anticon-filter:after,
.ant-table-thead > tr > th .ant-table-filter-icon:after {
  content: '';
  position: absolute;
  width: 14px;
  height: 50px;
  left: 0;
  top: -19px;
}
.ant-table-thead > tr > th .ant-table-filter-selected.anticon-filter {
  color: #3FCE9E;
}
.ant-table-tbody > tr > td {
  border-bottom: 1px solid #e9e9e9;
  transition: all .3s;
}
.ant-table-thead > tr,
.ant-table-tbody > tr {
  transition: all .3s;
}
.ant-table-thead > tr.ant-table-row-hover > td,
.ant-table-tbody > tr.ant-table-row-hover > td,
.ant-table-thead > tr:hover > td,
.ant-table-tbody > tr:hover > td {
  background: #f0fbf7;
}
.ant-table-thead > tr:hover {
  background: none;
}
.ant-table-footer {
  padding: 16px 8px;
  background: #f7f7f7;
  border-radius: 0 0 4px 4px;
  position: relative;
}
.ant-table-footer:before {
  content: '';
  height: 1px;
  background: #f7f7f7;
  position: absolute;
  top: -1px;
  width: 100%;
  left: 0;
}
.ant-table.ant-table-bordered .ant-table-footer {
  border: 1px solid #e9e9e9;
}
.ant-table-title {
  padding: 16px 0;
  position: relative;
  top: 1px;
  border-radius: 4px 4px 0 0;
}
.ant-table.ant-table-bordered .ant-table-title {
  border: 1px solid #e9e9e9;
  padding-left: 8px;
  padding-right: 8px;
}
.ant-table-title + .ant-table-content {
  position: relative;
  border-radius: 4px 4px 0 0;
  overflow: hidden;
}
.ant-table-bordered .ant-table-title + .ant-table-content,
.ant-table-bordered .ant-table-title + .ant-table-content table {
  border-radius: 0;
}
.ant-table-without-column-header .ant-table-title + .ant-table-content,
.ant-table-without-column-header table {
  border-radius: 0;
}
.ant-table-tbody > tr.ant-table-row-selected {
  background: #fafafa;
}
.ant-table-thead > tr > th.ant-table-column-sort {
  background: #eee;
}
.ant-table-thead > tr > th,
.ant-table-tbody > tr > td {
  padding: 16px 8px;
  word-break: break-all;
}
.ant-table-thead > tr > th.ant-table-selection-column-custom {
  padding-left: 16px;
  padding-right: 0;
}
.ant-table-thead > tr > th.ant-table-selection-column,
.ant-table-tbody > tr > td.ant-table-selection-column {
  text-align: center;
  min-width: 62px;
  width: 62px;
}
.ant-table-expand-icon-th,
.ant-table-row-expand-icon-cell {
  text-align: center;
  min-width: 50px;
  width: 50px;
}
.ant-table-header {
  background: #f7f7f7;
  overflow: hidden;
}
.ant-table-header table {
  border-radius: 4px 4px 0 0;
}
.ant-table-loading {
  position: relative;
}
.ant-table-loading .ant-table-body {
  background: #fff;
  opacity: 0.5;
}
.ant-table-loading .ant-table-spin-holder {
  height: 20px;
  line-height: 20px;
  left: 50%;
  top: 50%;
  margin-left: -30px;
  position: absolute;
}
.ant-table-loading .ant-table-with-pagination {
  margin-top: -20px;
}
.ant-table-loading .ant-table-without-pagination {
  margin-top: 10px;
}
.ant-table-middle .ant-table-thead > tr > th:not(.ant-table-selection-column),
.ant-table-middle .ant-table-tbody > tr > td {
  padding: 10px 8px;
}
.ant-table-middle .ant-table-title,
.ant-table-middle .ant-table-footer {
  padding: 10px 8px;
}
.ant-table-middle .ant-table-column-sorter-up:after {
  top: -13px;
  height: 13px;
}
.ant-table-middle .ant-table-column-sorter-down:after {
  bottom: -11px;
  height: 13px;
}
.ant-table-middle .ant-table-thead > tr > th .anticon-filter:after,
.ant-table-middle .ant-table-thead > tr > th .ant-table-filter-icon:after {
  height: 38px;
  top: -13px;
}
.ant-table-small {
  border: 1px solid #e9e9e9;
  border-radius: 4px;
}
.ant-table-small .ant-table-header > table,
.ant-table-small .ant-table-body > table {
  border: 0;
  padding: 0 8px;
}
.ant-table-small .ant-table-thead > tr > th {
  background: #fff;
  border-bottom: 1px solid #e9e9e9;
}
.ant-table-small .ant-table-tbody > tr > td {
  padding: 6px 8px;
}
.ant-table-small .ant-table-title,
.ant-table-small .ant-table-footer,
.ant-table-small .ant-table-thead > tr > th:not(.ant-table-selection-column) {
  padding: 10px 8px;
}
.ant-table-small .ant-table-title {
  border-bottom: 1px solid #e9e9e9;
  top: 0;
}
.ant-table-small .ant-table-header {
  background: #fff;
}
.ant-table-small .ant-table-header table {
  border-bottom: 1px solid #e9e9e9;
}
.ant-table-small .ant-table-placeholder,
.ant-table-small .ant-table-row:last-child td {
  border-bottom: 0;
}
.ant-table-small .ant-table-column-sorter-up:after {
  top: -14px;
  height: 13px;
}
.ant-table-small .ant-table-column-sorter-down:after {
  bottom: -11px;
  height: 13px;
}
.ant-table-small .ant-table-thead > tr > th .anticon-filter:after,
.ant-table-small .ant-table-thead > tr > th .ant-table-filter-icon:after {
  height: 39px;
  top: -14px;
}
.ant-table-column-sorter {
  position: relative;
  margin-left: 4px;
  display: inline-block;
  width: 14px;
  height: 14px;
  vertical-align: middle;
  text-align: center;
}
.ant-table-column-sorter-up,
.ant-table-column-sorter-down {
  line-height: 4px;
  display: block;
  width: 14px;
  cursor: pointer;
}
.ant-table-column-sorter-up:hover .anticon,
.ant-table-column-sorter-down:hover .anticon {
  color: rgba(0, 0, 0, 0.65);
}
.ant-table-column-sorter-up.on .anticon-caret-up,
.ant-table-column-sorter-down.on .anticon-caret-up,
.ant-table-column-sorter-up.on .anticon-caret-down,
.ant-table-column-sorter-down.on .anticon-caret-down {
  color: #3FCE9E;
}
.ant-table-column-sorter-up:after,
.ant-table-column-sorter-down:after {
  position: absolute;
  content: '';
  height: 20px;
  width: 14px;
  left: 0;
}
.ant-table-column-sorter-up:after {
  top: -19px;
}
.ant-table-column-sorter-down:after {
  bottom: -17px;
}
.ant-table-column-sorter .anticon-caret-up,
.ant-table-column-sorter .anticon-caret-down {
  display: inline-block;
  font-size: 12px;
  font-size: 8px \9;
  transform: scale(0.66666667) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
  line-height: 6px;
  height: 6px;
  color: #aaa;
}
:root .ant-table-column-sorter .anticon-caret-up,
:root .ant-table-column-sorter .anticon-caret-down {
  filter: none;
}
:root .ant-table-column-sorter .anticon-caret-up,
:root .ant-table-column-sorter .anticon-caret-down {
  font-size: 12px;
}
.ant-table-column-sorter .anticon-caret-up:before,
.ant-table-column-sorter .anticon-caret-down:before {
  -moz-transform-origin: 53% 50%;
  /* fix firefox position */
}
.ant-table-bordered .ant-table-header > table,
.ant-table-bordered .ant-table-body > table,
.ant-table-bordered .ant-table-fixed-left table,
.ant-table-bordered .ant-table-fixed-right table {
  border: 1px solid #e9e9e9;
  border-right: 0;
  border-bottom: 0;
}
.ant-table-bordered.ant-table-empty .ant-table-placeholder {
  border-left: 1px solid #e9e9e9;
  border-right: 1px solid #e9e9e9;
}
.ant-table-bordered.ant-table-fixed-header .ant-table-header > table {
  border-bottom: 0;
}
.ant-table-bordered.ant-table-fixed-header .ant-table-body > table {
  border-top: 0;
  border-top-left-radius: 0;
  border-top-right-radius: 0;
}
.ant-table-bordered.ant-table-fixed-header .ant-table-body-inner > table {
  border-top: 0;
}
.ant-table-bordered.ant-table-fixed-header .ant-table-placeholder {
  border: 0;
}
.ant-table-bordered .ant-table-thead > tr > th {
  border-bottom: 1px solid #e9e9e9;
}
.ant-table-bordered .ant-table-thead > tr > th,
.ant-table-bordered .ant-table-tbody > tr > td {
  border-right: 1px solid #e9e9e9;
}
.ant-table-bordered.ant-table-small {
  border-right: 0;
}
.ant-table-bordered.ant-table-small .ant-table-header > table,
.ant-table-bordered.ant-table-small .ant-table-body > table,
.ant-table-bordered.ant-table-small .ant-table-fixed-left table,
.ant-table-bordered.ant-table-small .ant-table-fixed-right table {
  border: 0;
  padding: 0;
}
.ant-table-bordered.ant-table-small .ant-table-title {
  border: 0;
  border-bottom: 1px solid #e9e9e9;
  border-right: 1px solid #e9e9e9;
}
.ant-table-bordered.ant-table-small .ant-table-footer {
  border: 0;
  border-top: 1px solid #e9e9e9;
  border-right: 1px solid #e9e9e9;
}
.ant-table-bordered.ant-table-small .ant-table-footer:before {
  display: none;
}
.ant-table-bordered.ant-table-small .ant-table-placeholder {
  border-left: 0;
  border-bottom: 0;
}
.ant-table-placeholder {
  position: relative;
  padding: 16px 8px;
  background: #fff;
  border-bottom: 1px solid #e9e9e9;
  text-align: center;
  font-size: 12px;
  color: rgba(0, 0, 0, 0.43);
}
.ant-table-placeholder .anticon {
  margin-right: 4px;
}
.ant-table-pagination {
  margin: 16px 0;
  float: right;
}
.ant-table-filter-dropdown {
  min-width: 96px;
  margin-left: -8px;
  background: #fff;
  border-radius: 4px;
  box-shadow: 0 1px 6px rgba(0, 0, 0, 0.2);
}
.ant-table-filter-dropdown .ant-dropdown-menu {
  border: 0;
  box-shadow: none;
  border-radius: 4px 4px 0 0;
}
.ant-table-filter-dropdown .ant-dropdown-menu-without-submenu {
  max-height: 400px;
  overflow-x: hidden;
}
.ant-table-filter-dropdown .ant-dropdown-menu-item > label + span {
  padding: 0;
}
.ant-table-filter-dropdown .ant-dropdown-menu-sub {
  border-radius: 4px;
  box-shadow: 0 1px 6px rgba(0, 0, 0, 0.2);
}
.ant-table-filter-dropdown .ant-dropdown-menu .ant-dropdown-submenu-contain-selected .ant-dropdown-menu-submenu-title:after {
  color: #3FCE9E;
  font-weight: bold;
  text-shadow: 0 0 2px #dbf6ed;
}
.ant-table-filter-dropdown .ant-dropdown-menu-item {
  overflow: hidden;
}
.ant-table-filter-dropdown > .ant-dropdown-menu > .ant-dropdown-menu-item:last-child,
.ant-table-filter-dropdown > .ant-dropdown-menu > .ant-dropdown-menu-submenu:last-child .ant-dropdown-menu-submenu-title {
  border-radius: 0;
}
.ant-table-filter-dropdown-btns {
  overflow: hidden;
  padding: 7px 8px;
  border-top: 1px solid #e9e9e9;
}
.ant-table-filter-dropdown-link {
  color: #3FCE9E;
}
.ant-table-filter-dropdown-link:hover {
  color: #6ddab5;
}
.ant-table-filter-dropdown-link:active {
  color: #36b38c;
}
.ant-table-filter-dropdown-link.confirm {
  float: left;
}
.ant-table-filter-dropdown-link.clear {
  float: right;
}
.ant-table-selection-select-all-custom {
  margin-right: 4px !important;
}
.ant-table-selection .anticon-down {
  color: #aaa;
  transition: all .3s;
}
.ant-table-selection-menu {
  min-width: 96px;
  margin-top: 5px;
  margin-left: -30px;
  background: #fff;
  border-radius: 4px;
  box-shadow: 0 1px 6px rgba(0, 0, 0, 0.2);
}
.ant-table-selection-menu .ant-action-down {
  color: #aaa;
}
.ant-table-selection-down {
  cursor: pointer;
  padding: 0;
  display: inline-block;
  line-height: 1;
}
.ant-table-selection-down:hover .anticon-down {
  color: #666;
}
.ant-table-row-expand-icon {
  cursor: pointer;
  display: inline-block;
  width: 17px;
  height: 17px;
  text-align: center;
  line-height: 14px;
  border: 1px solid #e9e9e9;
  user-select: none;
  background: #fff;
}
.ant-table-row-expanded:after {
  content: '-';
}
.ant-table-row-collapsed:after {
  content: '+';
}
.ant-table-row-spaced {
  visibility: hidden;
}
.ant-table-row-spaced:after {
  content: '.';
}
.ant-table-row[class*="ant-table-row-level-0"] .ant-table-selection-column > span {
  display: inline-block;
}
tr.ant-table-expanded-row,
tr.ant-table-expanded-row:hover {
  background: #fbfbfb;
}
.ant-table .ant-table-row-indent + .ant-table-row-expand-icon {
  margin-right: 8px;
}
.ant-table-scroll {
  overflow: auto;
  overflow-x: hidden;
}
.ant-table-scroll table {
  width: auto;
  min-width: 100%;
}
.ant-table-body-inner {
  height: 100%;
}
.ant-table-fixed-header > .ant-table-content > .ant-table-scroll > .ant-table-body {
  position: relative;
  background: #fff;
}
.ant-table-fixed-header .ant-table-body-inner {
  overflow: scroll;
}
.ant-table-fixed-header .ant-table-scroll .ant-table-header {
  overflow: scroll;
  padding-bottom: 20px;
  margin-bottom: -20px;
}
.ant-table-fixed-header.ant-table-empty .ant-table-scroll .ant-table-body {
  padding-bottom: 20px;
  margin-bottom: -20px;
}
.ant-table-fixed-left,
.ant-table-fixed-right {
  position: absolute;
  top: 0;
  overflow: hidden;
  transition: box-shadow 0.3s ease;
  border-radius: 0;
}
.ant-table-fixed-left table,
.ant-table-fixed-right table {
  width: auto;
  background: #fff;
}
.ant-table-fixed-header .ant-table-fixed-left .ant-table-body-outer .ant-table-fixed,
.ant-table-fixed-header .ant-table-fixed-right .ant-table-body-outer .ant-table-fixed {
  border-radius: 0;
}
.ant-table-fixed-left {
  left: 0;
  box-shadow: 6px 0 6px -4px rgba(0, 0, 0, 0.2);
}
.ant-table-fixed-left .ant-table-header {
  overflow-y: hidden;
}
.ant-table-fixed-left .ant-table-body-inner {
  margin-right: -20px;
  padding-right: 20px;
}
.ant-table-fixed-header .ant-table-fixed-left .ant-table-body-inner {
  padding-right: 0;
}
.ant-table-fixed-left,
.ant-table-fixed-left table {
  border-radius: 4px 0 0 0;
}
.ant-table-fixed-right {
  right: 0;
  box-shadow: -6px 0 6px -4px rgba(0, 0, 0, 0.2);
}
.ant-table-fixed-right,
.ant-table-fixed-right table {
  border-radius: 0 4px 0 0;
}
.ant-table-fixed-right .ant-table-expanded-row {
  color: transparent;
  pointer-events: none;
}
.ant-table.ant-table-scroll-position-left .ant-table-fixed-left {
  box-shadow: none;
}
.ant-table.ant-table-scroll-position-right .ant-table-fixed-right {
  box-shadow: none;
}
`,
                    `.nz-resize-container {
  position: relative;
}
.nz-resize-y {
  position: absolute;
  top: 0;
  left: 0;
  width: 10px;
  height: 102%;
  background: transparent;
  cursor: col-resize;
}
.nz-resizing th,
.nz-resizing td {
  user-select: none;
}
`
                ]
            },] },
];
/**
 * @nocollapse
 */
NzTableComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: ChangeDetectorRef, },
];
NzTableComponent.propDecorators = {
    'nzPageSizeChange': [{ type: Output },],
    'nzPageIndexChange': [{ type: Output },],
    'nzDataChange': [{ type: Output },],
    'nzPageIndexChangeClick': [{ type: Output },],
    'nzBordered': [{ type: Input },],
    'nzSize': [{ type: Input },],
    'nzCustomNoResult': [{ type: Input },],
    'nzIsPagination': [{ type: Input },],
    'nzLoading': [{ type: Input },],
    'nzShowSizeChanger': [{ type: Input },],
    'nzShowQuickJumper': [{ type: Input },],
    'nzShowTotal': [{ type: Input },],
    'nzShowFooter': [{ type: Input },],
    'nzShowTitle': [{ type: Input },],
    'fixedHeader': [{ type: ContentChild, args: ['nzFixedHeader',] },],
    'nzScroll': [{ type: Input },],
    'nzAjaxData': [{ type: Input },],
    'nzDataSource': [{ type: Input },],
    'nzPageIndex': [{ type: Input },],
    'nzPageSize': [{ type: Input },],
    'nzTotal': [{ type: Input },],
};

class NzThDirective {
    /**
     * @param {?} _elementRef
     * @param {?} nzTableComponent
     */
    constructor(_elementRef, nzTableComponent) {
        this._elementRef = _elementRef;
        this.nzTableComponent = nzTableComponent;
        this._el = this._elementRef.nativeElement;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.nzTableComponent.ths.push(this);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        const /** @type {?} */ index = this.nzTableComponent.ths.indexOf(this);
        if (index > -1) {
            this.nzTableComponent.ths.splice(index, 1);
        }
    }
}
NzThDirective.decorators = [
    { type: Directive, args: [{
                selector: '[nz-th]'
            },] },
];
/**
 * @nocollapse
 */
NzThDirective.ctorParameters = () => [
    { type: ElementRef, },
    { type: NzTableComponent, },
];
NzThDirective.propDecorators = {
    'nzWidth': [{ type: Input },],
    'nzCheckbox': [{ type: Input }, { type: HostBinding, args: [`class.ant-table-selection-column`,] },],
    'nzExpand': [{ type: Input }, { type: HostBinding, args: [`class.ant-table-expand-icon-th`,] },],
};

class NzTdDirective {
    /**
     * @param {?} _elementRef
     */
    constructor(_elementRef) {
        this._elementRef = _elementRef;
        this._el = this._elementRef.nativeElement;
    }
}
NzTdDirective.decorators = [
    { type: Directive, args: [{
                selector: '[nz-td]'
            },] },
];
/**
 * @nocollapse
 */
NzTdDirective.ctorParameters = () => [
    { type: ElementRef, },
];
NzTdDirective.propDecorators = {
    'nzCheckbox': [{ type: Input }, { type: HostBinding, args: [`class.ant-table-selection-column`,] },],
    'nzExpand': [{ type: Input }, { type: HostBinding, args: [`class.ant-table-row-expand-icon-cell`,] },],
};

class NzRowExpandIconComponent {
    constructor() {
        this.nzExpand = false;
        this.nzShowExpand = false;
        this.nzExpandChange = new EventEmitter();
        this._expandIcon = true;
    }
    /**
     * @return {?}
     */
    get expanded() {
        return this.nzExpand && !this.nzShowExpand;
    }
    /**
     * @return {?}
     */
    get collapsed() {
        return !this.nzExpand && !this.nzShowExpand;
    }
    /**
     * @return {?}
     */
    onClick() {
        this.nzExpand = !this.nzExpand;
        this.nzExpandChange.emit(this.nzExpand);
    }
}
NzRowExpandIconComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-row-expand-icon',
                template: ``
            },] },
];
/**
 * @nocollapse
 */
NzRowExpandIconComponent.ctorParameters = () => [];
NzRowExpandIconComponent.propDecorators = {
    'nzExpand': [{ type: Input },],
    'nzShowExpand': [{ type: Input }, { type: HostBinding, args: ['class.ant-table-row-spaced',] },],
    'nzExpandChange': [{ type: Output },],
    'expanded': [{ type: HostBinding, args: [`class.ant-table-row-expanded`,] },],
    'collapsed': [{ type: HostBinding, args: [`class.ant-table-row-collapsed`,] },],
    '_expandIcon': [{ type: HostBinding, args: [`class.ant-table-row-expand-icon`,] },],
    'onClick': [{ type: HostListener, args: ['click',] },],
};

class NzRowIndentComponent {
    constructor() {
        this._rowIndent = true;
    }
    /**
     * @return {?}
     */
    get paddingLeft() {
        return this.nzIndentSize * 20;
    }
}
NzRowIndentComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-row-indent',
                template: ``
            },] },
];
/**
 * @nocollapse
 */
NzRowIndentComponent.ctorParameters = () => [];
NzRowIndentComponent.propDecorators = {
    'nzIndentSize': [{ type: Input },],
    'paddingLeft': [{ type: HostBinding, args: [`style.paddingLeft.px`,] },],
    '_rowIndent': [{ type: HostBinding, args: [`class.ant-table-row-indent`,] },],
};

class NzMenuComponent {
    constructor() {
        /**
         * set when has submenu component
         */
        this.hasSubMenu = false;
        /**
         * set when in dropdown component
         */
        this.isInDropDown = false;
        /**
         * collection of menu item
         */
        this.menuItems = [];
        /**
         * collection of sub menu
         */
        this.subMenus = [];
        /**
         * view init flat
         */
        this.isInit = false;
        /**
         * opened index of array
         */
        this._subMenusOpenIndex = [];
        /**
         * nzInlineCollapsed
         */
        this._nzInlineCollapsed = false;
        this.nzMode = 'vertical';
        this.nzTheme = 'light';
        this.nzClickActive = true;
    }
    /**
     * @return {?}
     */
    get nzInlineCollapsed() {
        return this._nzInlineCollapsed;
    }
    /**
     * @param {?} state
     * @return {?}
     */
    set nzInlineCollapsed(state$$1) {
        this._nzInlineCollapsed = state$$1;
        if (!this.isInit) {
            return;
        }
        if (this._nzInlineCollapsed) {
            this.hideSubMenus();
            // after the animation is over
            setTimeout(() => this.nzMode = 'vertical', 150);
        }
        else {
            this.reductionSubMenus();
            this.nzMode = this._tempMode;
        }
    }
    /**
     * define host class
     * @return {?}
     */
    get _isInDropDownClass() {
        return this.isInDropDown;
    }
    /**
     * @return {?}
     */
    get _isNotInDropDownClass() {
        return !this.isInDropDown;
    }
    /**
     * @return {?}
     */
    get setDropDownThemeLightClass() {
        return this.isInDropDown && (this.nzTheme === 'light');
    }
    /**
     * @return {?}
     */
    get setDropDownThemeDarkClass() {
        return this.isInDropDown && (this.nzTheme === 'dark');
    }
    /**
     * @return {?}
     */
    get setMenuThemeLightClass() {
        return (!this.isInDropDown) && (this.nzTheme === 'light');
    }
    /**
     * @return {?}
     */
    get setMenuThemeDarkClass() {
        return (!this.isInDropDown) && (this.nzTheme === 'dark');
    }
    /**
     * @return {?}
     */
    get setMenuVerticalClass() {
        return (!this.isInDropDown) && (this.nzMode === 'vertical');
    }
    /**
     * @return {?}
     */
    get setMenuHorizontalClass() {
        return (!this.isInDropDown) && (this.nzMode === 'horizontal');
    }
    /**
     * @return {?}
     */
    get setMenuInlineClass() {
        return (!this.isInDropDown) && (this.nzMode === 'inline');
    }
    /**
     * @return {?}
     */
    get setMenuInlineCollapsedClass() {
        return (!this.isInDropDown) && (this.nzMode !== 'horizontal') && this.nzInlineCollapsed;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        for (const /** @type {?} */ propName in changes) {
            if (propName === 'nzMode') {
                if (this.isInit) {
                    this.subMenus.forEach(submenu => {
                        submenu.nzOpen = false;
                        submenu.nzOpenChange.emit(false);
                    });
                }
            }
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.isInit = true;
        this._tempMode = this.nzMode;
    }
    /**
     * trigger when menu item clicked
     * @return {?}
     */
    clearAllSelected() {
        this.menuItems.forEach(menu => menu.nzSelected = false);
    }
    /**
     * @return {?}
     */
    hideSubMenus() {
        this._subMenusOpenIndex = [];
        this.subMenus.forEach((submenu, index) => {
            if (submenu.nzOpen) {
                this._subMenusOpenIndex.push(index);
            }
            submenu.nzOpen = false;
        });
    }
    /**
     * @return {?}
     */
    reductionSubMenus() {
        this._subMenusOpenIndex.forEach(i => this.subMenus[i].nzOpen = true);
        this._subMenusOpenIndex = [];
    }
    /**
     * api for dropdown or navigation to set isInDropDown status
     * @param {?} value
     * @return {?}
     */
    setDropDown(value) {
        setTimeout(_ => {
            this.isInDropDown = value;
            this.menuItems.forEach(menu => menu.isInDropDown = value);
            this.subMenus.forEach(subMenu => subMenu.isInDropDown = value);
        });
    }
}
NzMenuComponent.decorators = [
    { type: Component, args: [{
                selector: '[nz-menu]',
                encapsulation: ViewEncapsulation.None,
                template: `
    <ng-content></ng-content>`,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-menu {
  outline: none;
  margin-bottom: 0;
  padding-left: 0;
  list-style: none;
  z-index: 1050;
  box-shadow: 0 1px 6px rgba(0, 0, 0, 0.2);
  color: rgba(0, 0, 0, 0.65);
  background: #fff;
  line-height: 46px;
  transition: background 0.3s cubic-bezier(0.645, 0.045, 0.355, 1), width 0.15s cubic-bezier(0.645, 0.045, 0.355, 1);
}
.ant-menu-hidden {
  display: none;
}
.ant-menu-item-group-list {
  margin: 0;
  padding: 0;
}
.ant-menu-item-group-title {
  color: rgba(0, 0, 0, 0.43);
  font-size: 12px;
  line-height: 1.5;
  padding: 8px 16px;
}
.ant-menu-item,
.ant-menu-submenu,
.ant-menu-submenu-title {
  cursor: pointer;
}
.ant-menu-submenu,
.ant-menu-submenu-inline {
  transition: border-color 0.3s cubic-bezier(0.645, 0.045, 0.355, 1), background 0.3s cubic-bezier(0.645, 0.045, 0.355, 1), padding 0.15s cubic-bezier(0.645, 0.045, 0.355, 1);
}
.ant-menu-item,
.ant-menu-submenu-title {
  transition: color 0.3s cubic-bezier(0.645, 0.045, 0.355, 1), border-color 0.3s cubic-bezier(0.645, 0.045, 0.355, 1), background 0.3s cubic-bezier(0.645, 0.045, 0.355, 1), padding 0.15s cubic-bezier(0.645, 0.045, 0.355, 1);
}
.ant-menu-item:active,
.ant-menu-submenu-title:active {
  background: #f0fbf7;
}
.ant-menu-submenu .ant-menu-sub {
  cursor: initial;
  transition: background 0.3s cubic-bezier(0.645, 0.045, 0.355, 1), padding 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
}
.ant-menu-item > a {
  display: block;
  color: rgba(0, 0, 0, 0.65);
}
.ant-menu-item > a:hover {
  color: #3FCE9E;
}
.ant-menu-item > a:focus {
  text-decoration: none;
}
.ant-menu-item > a:before {
  position: absolute;
  background-color: transparent;
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  content: '';
}
.ant-menu-item-divider {
  height: 1px;
  overflow: hidden;
  background-color: #e9e9e9;
  line-height: 0;
}
.ant-menu-item:hover,
.ant-menu-item-active,
.ant-menu:not(.ant-menu-inline) .ant-menu-submenu-open,
.ant-menu-submenu-active,
.ant-menu-submenu-title:hover {
  color: #3FCE9E;
}
.ant-menu:not(.ant-menu-inline) .ant-menu-submenu-open {
  z-index: 1050;
}
.ant-menu-horizontal .ant-menu-item,
.ant-menu-horizontal .ant-menu-submenu {
  margin-top: -1px;
}
.ant-menu-horizontal > .ant-menu-item:hover,
.ant-menu-horizontal > .ant-menu-item-active,
.ant-menu-horizontal > .ant-menu-submenu .ant-menu-submenu-title:hover {
  background-color: transparent;
}
.ant-menu-item-selected {
  color: #3FCE9E;
}
.ant-menu-item-selected > a,
.ant-menu-item-selected > a:hover {
  color: #3FCE9E;
}
.ant-menu:not(.ant-menu-horizontal) .ant-menu-item-selected {
  background-color: #f0fbf7;
}
.ant-menu-horizontal,
.ant-menu-inline,
.ant-menu-vertical {
  z-index: auto;
}
.ant-menu-inline,
.ant-menu-vertical {
  border-right: 1px solid #e9e9e9;
}
.ant-menu-inline .ant-menu-item,
.ant-menu-vertical .ant-menu-item {
  margin-left: -1px;
  left: 1px;
  position: relative;
  z-index: 1;
}
.ant-menu-inline .ant-menu-item:after,
.ant-menu-vertical .ant-menu-item:after {
  content: "";
  position: absolute;
  right: 0;
  top: 0;
  bottom: 0;
  border-right: 3px solid #3FCE9E;
  transform: scaleY(0.0001);
  opacity: 0;
  transition: transform 0.15s cubic-bezier(0.215, 0.61, 0.355, 1), opacity 0.15s cubic-bezier(0.215, 0.61, 0.355, 1);
}
.ant-menu-vertical.ant-menu-sub {
  border-right: 0;
}
.ant-menu-vertical.ant-menu-sub .ant-menu-item {
  border-right: 0;
  margin-left: 0;
  left: 0;
}
.ant-menu-vertical.ant-menu-sub .ant-menu-item:after {
  border-right: 0;
}
.ant-menu-vertical.ant-menu-sub > .ant-menu-item:first-child {
  border-radius: 4px 4px 0 0;
}
.ant-menu-vertical.ant-menu-sub > .ant-menu-item:last-child,
.ant-menu-vertical.ant-menu-sub > .ant-menu-item-group:last-child > .ant-menu-item-group-list:last-child > .ant-menu-item:last-child {
  border-radius: 0 0 4px 4px;
}
.ant-menu-vertical.ant-menu-sub > .ant-menu-item:only-child {
  border-radius: 4px;
}
.ant-menu-inline {
  width: 100%;
}
.ant-menu-inline .ant-menu-selected:after,
.ant-menu-inline .ant-menu-item-selected:after {
  transition: transform 0.15s cubic-bezier(0.645, 0.045, 0.355, 1), opacity 0.15s cubic-bezier(0.645, 0.045, 0.355, 1);
  opacity: 1;
  transform: scaleY(1);
}
.ant-menu-vertical.ant-menu-inline-collapsed,
.ant-menu-inline-collapsed {
  width: 64px;
}
.ant-menu-vertical.ant-menu-inline-collapsed > .ant-menu-item,
.ant-menu-inline-collapsed > .ant-menu-item,
.ant-menu-vertical.ant-menu-inline-collapsed > .ant-menu-submenu > .ant-menu-submenu-title,
.ant-menu-inline-collapsed > .ant-menu-submenu > .ant-menu-submenu-title {
  left: 0;
  text-overflow: clip;
  padding: 0 24px;
}
.ant-menu-vertical.ant-menu-inline-collapsed > .ant-menu-item:after,
.ant-menu-inline-collapsed > .ant-menu-item:after,
.ant-menu-vertical.ant-menu-inline-collapsed > .ant-menu-submenu > .ant-menu-submenu-title:after,
.ant-menu-inline-collapsed > .ant-menu-submenu > .ant-menu-submenu-title:after {
  display: none;
}
.ant-menu-vertical.ant-menu-inline-collapsed > .ant-menu-item .anticon,
.ant-menu-inline-collapsed > .ant-menu-item .anticon,
.ant-menu-vertical.ant-menu-inline-collapsed > .ant-menu-submenu > .ant-menu-submenu-title .anticon,
.ant-menu-inline-collapsed > .ant-menu-submenu > .ant-menu-submenu-title .anticon {
  font-size: 16px;
  line-height: 42px;
  margin: 0;
}
.ant-menu-vertical.ant-menu-inline-collapsed > .ant-menu-item .anticon + span,
.ant-menu-inline-collapsed > .ant-menu-item .anticon + span,
.ant-menu-vertical.ant-menu-inline-collapsed > .ant-menu-submenu > .ant-menu-submenu-title .anticon + span,
.ant-menu-inline-collapsed > .ant-menu-submenu > .ant-menu-submenu-title .anticon + span {
  max-width: 0;
  display: inline-block;
  opacity: 0;
}
.ant-menu-vertical.ant-menu-inline-collapsed-tooltip,
.ant-menu-inline-collapsed-tooltip {
  pointer-events: none;
}
.ant-menu-vertical.ant-menu-inline-collapsed-tooltip .anticon,
.ant-menu-inline-collapsed-tooltip .anticon {
  display: none;
}
.ant-menu-vertical.ant-menu-inline-collapsed-tooltip a,
.ant-menu-inline-collapsed-tooltip a {
  color: rgba(255, 255, 255, 0.91);
}
.ant-menu-submenu-horizontal > .ant-menu {
  top: 100%;
  left: 0;
  position: absolute;
  min-width: 100%;
  margin-top: 7px;
  z-index: 1050;
}
.ant-menu-submenu-vertical {
  z-index: 1;
}
.ant-menu-submenu-vertical > .ant-menu {
  top: 0;
  left: 100%;
  position: absolute;
  min-width: 160px;
  margin-left: 4px;
  z-index: 1050;
}
.ant-menu-item,
.ant-menu-submenu-title {
  margin: 0;
  padding: 0 20px;
  position: relative;
  display: block;
  white-space: nowrap;
}
.ant-menu-item .anticon,
.ant-menu-submenu-title .anticon {
  min-width: 14px;
  margin-right: 8px;
  transition: font-size 0.15s cubic-bezier(0.215, 0.61, 0.355, 1), margin 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
}
.ant-menu-item .anticon + span,
.ant-menu-submenu-title .anticon + span {
  transition: opacity 0.3s cubic-bezier(0.645, 0.045, 0.355, 1), width 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
  opacity: 1;
}
.ant-menu > .ant-menu-item-divider {
  height: 1px;
  margin: 1px 0;
  overflow: hidden;
  padding: 0;
  line-height: 0;
  background-color: #e9e9e9;
}
.ant-menu-submenu {
  position: relative;
}
.ant-menu-submenu > .ant-menu {
  background-color: #fff;
  border-radius: 4px;
}
.ant-menu-submenu > .ant-menu-submenu-title:after {
  transition: transform 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
}
.ant-menu-submenu-vertical > .ant-menu-submenu-title:after {
  font-family: "anticon" !important;
  font-style: normal;
  vertical-align: baseline;
  text-align: center;
  text-transform: none;
  text-rendering: auto;
  position: absolute;
  content: "\\e61d";
  right: 16px;
  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=3)";
  transform: rotate(270deg) scale(0.75);
}
.ant-menu-submenu-inline > .ant-menu-submenu-title:after {
  font-family: "anticon" !important;
  font-style: normal;
  vertical-align: baseline;
  text-align: center;
  text-transform: none;
  text-rendering: auto;
  position: absolute;
  content: "\\e61d";
  right: 16px;
  top: 0;
  display: inline-block;
  font-size: 12px;
  font-size: 8px \9;
  transform: scale(0.66666667) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
}
:root .ant-menu-submenu-inline > .ant-menu-submenu-title:after {
  filter: none;
}
:root .ant-menu-submenu-inline > .ant-menu-submenu-title:after {
  font-size: 12px;
}
.ant-menu-submenu-open.ant-menu-submenu-inline > .ant-menu-submenu-title:after {
  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=1)";
  transform: rotate(180deg) scale(0.75);
}
.ant-menu-vertical .ant-menu-submenu-selected {
  color: #3FCE9E;
}
.ant-menu-vertical .ant-menu-submenu-selected > a {
  color: #3FCE9E;
}
.ant-menu-horizontal {
  border: 0;
  border-bottom: 1px solid #e9e9e9;
  box-shadow: none;
  z-index: 0;
}
.ant-menu-horizontal > .ant-menu-item,
.ant-menu-horizontal > .ant-menu-submenu {
  position: relative;
  top: 1px;
  float: left;
  border-bottom: 2px solid transparent;
}
.ant-menu-horizontal > .ant-menu-item:hover,
.ant-menu-horizontal > .ant-menu-submenu:hover,
.ant-menu-horizontal > .ant-menu-item-active,
.ant-menu-horizontal > .ant-menu-submenu-active,
.ant-menu-horizontal > .ant-menu-item-open,
.ant-menu-horizontal > .ant-menu-submenu-open,
.ant-menu-horizontal > .ant-menu-item-selected,
.ant-menu-horizontal > .ant-menu-submenu-selected {
  border-bottom: 2px solid #3FCE9E;
  color: #3FCE9E;
}
.ant-menu-horizontal > .ant-menu-item > a,
.ant-menu-horizontal > .ant-menu-submenu > a {
  display: block;
  color: rgba(0, 0, 0, 0.65);
}
.ant-menu-horizontal > .ant-menu-item > a:hover,
.ant-menu-horizontal > .ant-menu-submenu > a:hover {
  color: #3FCE9E;
}
.ant-menu-horizontal:after {
  content: "\\20";
  display: block;
  height: 0;
  clear: both;
}
.ant-menu-vertical .ant-menu-item,
.ant-menu-inline .ant-menu-item,
.ant-menu-vertical .ant-menu-submenu-title,
.ant-menu-inline .ant-menu-submenu-title {
  padding: 0 16px;
  font-size: 12px;
  line-height: 42px;
  height: 42px;
  overflow: hidden;
  text-overflow: ellipsis;
}
.ant-menu-item-group-list .ant-menu-item,
.ant-menu-item-group-list .ant-menu-submenu-title {
  padding: 0 16px 0 28px;
}
.ant-menu-vertical.ant-menu-sub {
  padding: 0;
  transform-origin: 0 0;
}
.ant-menu-vertical.ant-menu-sub > .ant-menu-item,
.ant-menu-vertical.ant-menu-sub > .ant-menu-submenu {
  transform-origin: 0 0;
}
.ant-menu-root.ant-menu-vertical,
.ant-menu-root.ant-menu-inline {
  box-shadow: none;
}
.ant-menu-sub.ant-menu-inline {
  padding: 0;
  border: 0;
  box-shadow: none;
  border-radius: 0;
}
.ant-menu-sub.ant-menu-inline > .ant-menu-item,
.ant-menu-sub.ant-menu-inline > .ant-menu-submenu > .ant-menu-submenu-title {
  line-height: 42px;
  height: 42px;
  list-style-type: disc;
  list-style-position: inside;
}
.ant-menu-sub.ant-menu-inline .ant-menu-item-group-title {
  padding-left: 32px;
}
.ant-menu-item-disabled,
.ant-menu-submenu-disabled {
  color: rgba(0, 0, 0, 0.25) !important;
  cursor: not-allowed;
  background: none;
  border-color: transparent !important;
}
.ant-menu-item-disabled > a,
.ant-menu-submenu-disabled > a {
  color: rgba(0, 0, 0, 0.25) !important;
  pointer-events: none;
}
.ant-menu-item-disabled > .ant-menu-submenu-title,
.ant-menu-submenu-disabled > .ant-menu-submenu-title {
  color: rgba(0, 0, 0, 0.25) !important;
  cursor: not-allowed;
}
.ant-menu-dark,
.ant-menu-dark .ant-menu-sub {
  color: rgba(255, 255, 255, 0.67);
  background: #404040;
}
.ant-menu-dark .ant-menu-inline.ant-menu-sub {
  background: #333;
}
.ant-menu-dark.ant-menu-horizontal {
  border-bottom-color: #404040;
}
.ant-menu-dark.ant-menu-horizontal > .ant-menu-item,
.ant-menu-dark.ant-menu-horizontal > .ant-menu-submenu {
  border-color: #404040;
  border-bottom: 0;
}
.ant-menu-dark .ant-menu-item,
.ant-menu-dark .ant-menu-item-group-title,
.ant-menu-dark .ant-menu-item > a {
  color: rgba(255, 255, 255, 0.67);
}
.ant-menu-dark.ant-menu-inline,
.ant-menu-dark.ant-menu-vertical {
  border-right: 0;
}
.ant-menu-dark.ant-menu-inline .ant-menu-item,
.ant-menu-dark.ant-menu-vertical .ant-menu-item {
  border-right: 0;
  margin-left: 0;
  left: 0;
}
.ant-menu-dark.ant-menu-inline .ant-menu-item:after,
.ant-menu-dark.ant-menu-vertical .ant-menu-item:after {
  border-right: 0;
}
.ant-menu-dark .ant-menu-item:hover,
.ant-menu-dark .ant-menu-item-active,
.ant-menu-dark .ant-menu-submenu-active,
.ant-menu-dark:not(.ant-menu-inline) .ant-menu-submenu-open,
.ant-menu-dark .ant-menu-submenu-selected,
.ant-menu-dark .ant-menu-submenu:hover,
.ant-menu-dark .ant-menu-submenu-title:hover {
  background-color: transparent;
  color: #fff;
}
.ant-menu-dark .ant-menu-item:hover > a,
.ant-menu-dark .ant-menu-item-active > a,
.ant-menu-dark .ant-menu-submenu-active > a,
.ant-menu-dark:not(.ant-menu-inline) .ant-menu-submenu-open > a,
.ant-menu-dark .ant-menu-submenu-selected > a,
.ant-menu-dark .ant-menu-submenu:hover > a,
.ant-menu-dark .ant-menu-submenu-title:hover > a {
  color: #fff;
}
.ant-menu-dark .ant-menu-item-selected {
  border-right: 0;
  color: #fff;
}
.ant-menu-dark .ant-menu-item-selected:after {
  border-right: 0;
}
.ant-menu-dark .ant-menu-item-selected > a,
.ant-menu-dark .ant-menu-item-selected > a:hover {
  color: #fff;
}
.ant-menu.ant-menu-dark .ant-menu-item-selected {
  background-color: #3FCE9E;
}
.ant-menu-dark .ant-menu-item-disabled,
.ant-menu-dark .ant-menu-submenu-disabled,
.ant-menu-dark .ant-menu-item-disabled > a,
.ant-menu-dark .ant-menu-submenu-disabled > a {
  opacity: 0.8;
  color: rgba(255, 255, 255, 0.35) !important;
}
.ant-menu-dark .ant-menu-item-disabled > .ant-menu-submenu-title,
.ant-menu-dark .ant-menu-submenu-disabled > .ant-menu-submenu-title {
  color: rgba(255, 255, 255, 0.35) !important;
}
`
                ]
            },] },
];
/**
 * @nocollapse
 */
NzMenuComponent.ctorParameters = () => [];
NzMenuComponent.propDecorators = {
    'nzMode': [{ type: Input },],
    'nzTheme': [{ type: Input },],
    'nzClickActive': [{ type: Input },],
    'nzInlineCollapsed': [{ type: Input },],
    '_isInDropDownClass': [{ type: HostBinding, args: ['class.ant-dropdown-menu',] }, { type: HostBinding, args: ['class.ant-menu-dropdown-vertical',] }, { type: HostBinding, args: ['class.ant-dropdown-menu-root',] },],
    '_isNotInDropDownClass': [{ type: HostBinding, args: ['class.ant-menu',] }, { type: HostBinding, args: ['class.ant-menu-root',] },],
    'setDropDownThemeLightClass': [{ type: HostBinding, args: ['class.ant-dropdown-menu-light',] },],
    'setDropDownThemeDarkClass': [{ type: HostBinding, args: ['class.ant-dropdown-menu-dark',] },],
    'setMenuThemeLightClass': [{ type: HostBinding, args: ['class.ant-menu-light',] },],
    'setMenuThemeDarkClass': [{ type: HostBinding, args: ['class.ant-menu-dark',] },],
    'setMenuVerticalClass': [{ type: HostBinding, args: ['class.ant-menu-vertical',] },],
    'setMenuHorizontalClass': [{ type: HostBinding, args: ['class.ant-menu-horizontal',] },],
    'setMenuInlineClass': [{ type: HostBinding, args: ['class.ant-menu-inline',] },],
    'setMenuInlineCollapsedClass': [{ type: HostBinding, args: ['class.ant-menu-inline-collapsed',] },],
};

class NzDropDownDirective {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
        this._dropDownTrigger = true;
    }
}
NzDropDownDirective.decorators = [
    { type: Directive, args: [{
                selector: '[nz-dropdown]',
            },] },
];
/**
 * @nocollapse
 */
NzDropDownDirective.ctorParameters = () => [
    { type: ElementRef, },
];
NzDropDownDirective.propDecorators = {
    '_dropDownTrigger': [{ type: HostBinding, args: ['class.ant-dropdown-trigger',] },],
};

class NzDropDownComponent {
    /**
     * @param {?} _renderer
     * @param {?} _changeDetector
     */
    constructor(_renderer, _changeDetector) {
        this._renderer = _renderer;
        this._changeDetector = _changeDetector;
        this.hasFilterButton = false;
        this._triggerWidth = 0;
        this._placement = 'bottomLeft';
        this._dropDownPosition = 'bottom';
        this._positions = [...DEFAULT_DROPDOWN_POSITIONS];
        this.nzTrigger = 'hover';
        this.nzClickHide = true;
        this.nzVisible = false;
        this.nzVisibleChange = new EventEmitter();
        this._onVisibleChange = (visible) => {
            if (visible) {
                if (!this._triggerWidth) {
                    this._setTriggerWidth();
                }
            }
            this.nzVisible = visible;
            this._changeDetector.markForCheck();
        };
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzPlacement(value) {
        this._placement = value;
        this._dropDownPosition = (this.nzPlacement.indexOf('top') !== -1) ? 'top' : 'bottom';
        this._positions.unshift(/** @type {?} */ (POSITION_MAP[this._placement]));
    }
    ;
    /**
     * @return {?}
     */
    get nzPlacement() {
        return this._placement;
    }
    /**
     * @return {?}
     */
    _onClickEvent() {
        if (this.nzTrigger === 'click') {
            this._show();
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    _onMouseEnterEvent(e) {
        if (this.nzTrigger === 'hover') {
            this._show();
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    _onMouseLeaveEvent(e) {
        if (this.nzTrigger === 'hover') {
            this._hide();
        }
    }
    /**
     * @return {?}
     */
    _hide() {
        this.nzVisibleChange.emit(false);
    }
    /**
     * @return {?}
     */
    _show() {
        this.nzVisibleChange.emit(true);
    }
    /**
     * @param {?} position
     * @return {?}
     */
    _onPositionChange(position) {
        this._dropDownPosition = position.connectionPair.originY;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    _clickDropDown($event) {
        $event.stopPropagation();
        if (this.nzClickHide) {
            this.nzVisible = false;
        }
    }
    /**
     * @return {?}
     */
    _setTriggerWidth() {
        this._triggerWidth = this._nzOrigin.elementRef.nativeElement.getBoundingClientRect().width;
    }
    /**
     * @param {?} observable$
     * @return {?}
     */
    _startSubscribe(observable$) {
        this._subscription = debounceTime$1.call(observable$, 300)
            .subscribe(this._onVisibleChange);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this._nzMenu) {
            this._nzMenu.setDropDown(true);
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._subscription.unsubscribe();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        let /** @type {?} */ mouse$;
        if (this.nzTrigger === 'hover') {
            mouse$ = Observable$1.create((observer) => {
                const /** @type {?} */ disposeMouseEnter = this._renderer.listen(this._nzOrigin.elementRef.nativeElement, 'mouseenter', () => {
                    observer.next(true);
                });
                const /** @type {?} */ disposeMouseLeave = this._renderer.listen(this._nzOrigin.elementRef.nativeElement, 'mouseleave', () => {
                    observer.next(false);
                });
                return () => {
                    disposeMouseEnter();
                    disposeMouseLeave();
                };
            });
        }
        if (this.nzTrigger === 'click') {
            mouse$ = Observable$1.create((observer) => {
                const /** @type {?} */ dispose = this._renderer.listen(this._nzOrigin.elementRef.nativeElement, 'click', (e) => {
                    e.preventDefault();
                    observer.next(true);
                });
                return () => dispose();
            });
        }
        const /** @type {?} */ observable$ = merge$1(mouse$, this.nzVisibleChange.asObservable());
        this._startSubscribe(observable$);
    }
    /**
     * @return {?}
     */
    get _hasBackdrop() {
        return this.nzTrigger === 'click';
    }
}
NzDropDownComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-dropdown',
                encapsulation: ViewEncapsulation.None,
                animations: [
                    DropDownAnimation
                ],
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: `
    <div>
      <ng-content></ng-content>
    </div>
    <ng-template
      nz-connected-overlay
      [hasBackdrop]="_hasBackdrop"
      [positions]="_positions"
      [origin]="_nzOrigin"
      (backdropClick)="_hide()"
      (detach)="_hide()"
      [minWidth]="_triggerWidth"
      (positionChange)="_onPositionChange($event)"
      [open]="nzVisible">
      <div
        class="{{'ant-dropdown ant-dropdown-placement-'+nzPlacement}}"
        [@dropDownAnimation]="_dropDownPosition"
        (mouseenter)="_onMouseEnterEvent($event)"
        (mouseleave)="_onMouseLeaveEvent($event)"
        [style.minWidth.px]="_triggerWidth"
        (click)="_clickDropDown($event)">
        <div [class.ant-table-filter-dropdown]="hasFilterButton">
          <ng-content select="[nz-menu]"></ng-content>
          <ng-content select="[nz-table-filter]"></ng-content>
        </div>
        <ng-content select="[nz-dropdown-custom]"></ng-content>
      </div>
    </ng-template>`,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-dropdown {
  position: absolute;
  left: -9999px;
  top: -9999px;
  z-index: 1050;
  display: block;
  font-size: 12px;
  font-weight: normal;
  line-height: 1.5;
}
.ant-dropdown-wrap {
  position: relative;
}
.ant-dropdown-wrap .ant-btn > .anticon-down {
  display: inline-block;
  font-size: 12px;
  font-size: 10px \9;
  transform: scale(0.83333333) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
}
:root .ant-dropdown-wrap .ant-btn > .anticon-down {
  filter: none;
}
:root .ant-dropdown-wrap .ant-btn > .anticon-down {
  font-size: 12px;
}
.ant-dropdown-wrap .anticon-down:before {
  transition: transform 0.2s ease;
}
.ant-dropdown-wrap-open .anticon-down:before {
  transform: rotate(180deg);
}
.ant-dropdown-hidden,
.ant-dropdown-menu-hidden {
  display: none;
}
.ant-dropdown-menu {
  outline: none;
  position: relative;
  list-style-type: none;
  padding: 0;
  margin: 0;
  text-align: left;
  background-color: #fff;
  border-radius: 4px;
  box-shadow: 0 1px 6px rgba(0, 0, 0, 0.2);
  background-clip: padding-box;
}
.ant-dropdown-menu-item,
.ant-dropdown-menu-submenu-title {
  padding: 7px 8px;
  margin: 0;
  clear: both;
  font-size: 12px;
  font-weight: normal;
  color: rgba(0, 0, 0, 0.65);
  white-space: nowrap;
  cursor: pointer;
  transition: all .3s;
}
.ant-dropdown-menu-item > a,
.ant-dropdown-menu-submenu-title > a {
  color: rgba(0, 0, 0, 0.65);
  display: block;
  padding: 7px 8px;
  margin: -7px -8px;
  transition: all .3s;
}
.ant-dropdown-menu-item > a:focus,
.ant-dropdown-menu-submenu-title > a:focus {
  text-decoration: none;
}
.ant-dropdown-menu-item-selected,
.ant-dropdown-menu-submenu-title-selected,
.ant-dropdown-menu-item-selected > a,
.ant-dropdown-menu-submenu-title-selected > a {
  color: #3FCE9E;
  background-color: #f0fbf7;
}
.ant-dropdown-menu-item:hover,
.ant-dropdown-menu-submenu-title:hover {
  background-color: #f0fbf7;
}
.ant-dropdown-menu-item-disabled,
.ant-dropdown-menu-submenu-title-disabled {
  color: rgba(0, 0, 0, 0.25);
  cursor: not-allowed;
}
.ant-dropdown-menu-item-disabled:hover,
.ant-dropdown-menu-submenu-title-disabled:hover {
  color: rgba(0, 0, 0, 0.25);
  background-color: #fff;
  cursor: not-allowed;
}
.ant-dropdown-menu-item:first-child,
.ant-dropdown-menu-submenu-title:first-child,
.ant-dropdown-menu-item:first-child > a,
.ant-dropdown-menu-submenu-title:first-child > a {
  border-radius: 4px 4px 0 0;
}
.ant-dropdown-menu-item:last-child,
.ant-dropdown-menu-submenu-title:last-child,
.ant-dropdown-menu-item:last-child > a,
.ant-dropdown-menu-submenu-title:last-child > a {
  border-radius: 0 0 4px 4px;
}
.ant-dropdown-menu-item:only-child,
.ant-dropdown-menu-submenu-title:only-child,
.ant-dropdown-menu-item:only-child > a,
.ant-dropdown-menu-submenu-title:only-child > a {
  border-radius: 4px;
}
.ant-dropdown-menu-item-divider,
.ant-dropdown-menu-submenu-title-divider {
  height: 1px;
  overflow: hidden;
  background-color: #e9e9e9;
  line-height: 0;
}
.ant-dropdown-menu-submenu-title:after {
  font-family: "anticon" !important;
  position: absolute;
  content: "\\e61f";
  right: 8px;
  color: rgba(0, 0, 0, 0.43);
  display: inline-block;
  font-size: 12px;
  font-size: 10px \9;
  transform: scale(0.83333333) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
}
:root .ant-dropdown-menu-submenu-title:after {
  filter: none;
}
:root .ant-dropdown-menu-submenu-title:after {
  font-size: 12px;
}
.ant-dropdown-menu-submenu-vertical {
  position: relative;
}
.ant-dropdown-menu-submenu-vertical > .ant-dropdown-menu {
  top: 0;
  left: 100%;
  position: absolute;
  min-width: 100%;
  margin-left: 4px;
  transform-origin: 0 0;
}
.ant-dropdown-menu-submenu.ant-dropdown-menu-submenu-disabled .ant-dropdown-menu-submenu-title,
.ant-dropdown-menu-submenu.ant-dropdown-menu-submenu-disabled .ant-dropdown-menu-submenu-title:after {
  color: rgba(0, 0, 0, 0.25);
}
.ant-dropdown-menu-submenu:first-child .ant-dropdown-menu-submenu-title {
  border-radius: 4px 4px 0 0;
}
.ant-dropdown-menu-submenu:last-child .ant-dropdown-menu-submenu-title {
  border-radius: 0 0 4px 4px;
}
.ant-dropdown.slide-down-enter.slide-down-enter-active.ant-dropdown-placement-bottomLeft,
.ant-dropdown.slide-down-appear.slide-down-appear-active.ant-dropdown-placement-bottomLeft,
.ant-dropdown.slide-down-enter.slide-down-enter-active.ant-dropdown-placement-bottomCenter,
.ant-dropdown.slide-down-appear.slide-down-appear-active.ant-dropdown-placement-bottomCenter,
.ant-dropdown.slide-down-enter.slide-down-enter-active.ant-dropdown-placement-bottomRight,
.ant-dropdown.slide-down-appear.slide-down-appear-active.ant-dropdown-placement-bottomRight {
  animation-name: antSlideUpIn;
}
.ant-dropdown.slide-up-enter.slide-up-enter-active.ant-dropdown-placement-topLeft,
.ant-dropdown.slide-up-appear.slide-up-appear-active.ant-dropdown-placement-topLeft,
.ant-dropdown.slide-up-enter.slide-up-enter-active.ant-dropdown-placement-topCenter,
.ant-dropdown.slide-up-appear.slide-up-appear-active.ant-dropdown-placement-topCenter,
.ant-dropdown.slide-up-enter.slide-up-enter-active.ant-dropdown-placement-topRight,
.ant-dropdown.slide-up-appear.slide-up-appear-active.ant-dropdown-placement-topRight {
  animation-name: antSlideDownIn;
}
.ant-dropdown.slide-down-leave.slide-down-leave-active.ant-dropdown-placement-bottomLeft,
.ant-dropdown.slide-down-leave.slide-down-leave-active.ant-dropdown-placement-bottomCenter,
.ant-dropdown.slide-down-leave.slide-down-leave-active.ant-dropdown-placement-bottomRight {
  animation-name: antSlideUpOut;
}
.ant-dropdown.slide-up-leave.slide-up-leave-active.ant-dropdown-placement-topLeft,
.ant-dropdown.slide-up-leave.slide-up-leave-active.ant-dropdown-placement-topCenter,
.ant-dropdown.slide-up-leave.slide-up-leave-active.ant-dropdown-placement-topRight {
  animation-name: antSlideDownOut;
}
.ant-dropdown-trigger .anticon-down,
.ant-dropdown-link .anticon-down {
  display: inline-block;
  font-size: 12px;
  font-size: 10px \9;
  transform: scale(0.83333333) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
}
:root .ant-dropdown-trigger .anticon-down,
:root .ant-dropdown-link .anticon-down {
  filter: none;
}
:root .ant-dropdown-trigger .anticon-down,
:root .ant-dropdown-link .anticon-down {
  font-size: 12px;
}
.ant-dropdown-button {
  white-space: nowrap;
}
.ant-dropdown-button.ant-btn-group > .ant-btn:last-child:not(:first-child) {
  padding-right: 8px;
}
.ant-dropdown-button .anticon-down {
  display: inline-block;
  font-size: 12px;
  font-size: 10px \9;
  transform: scale(0.83333333) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
}
:root .ant-dropdown-button .anticon-down {
  filter: none;
}
:root .ant-dropdown-button .anticon-down {
  font-size: 12px;
}
.ant-dropdown-menu-dark,
.ant-dropdown-menu-dark .ant-dropdown-menu {
  background: #404040;
}
.ant-dropdown-menu-dark .ant-dropdown-menu-item,
.ant-dropdown-menu-dark .ant-dropdown-menu-submenu-title,
.ant-dropdown-menu-dark .ant-dropdown-menu-item > a {
  color: rgba(255, 255, 255, 0.67);
}
.ant-dropdown-menu-dark .ant-dropdown-menu-item:after,
.ant-dropdown-menu-dark .ant-dropdown-menu-submenu-title:after,
.ant-dropdown-menu-dark .ant-dropdown-menu-item > a:after {
  color: rgba(255, 255, 255, 0.67);
}
.ant-dropdown-menu-dark .ant-dropdown-menu-item:hover,
.ant-dropdown-menu-dark .ant-dropdown-menu-submenu-title:hover,
.ant-dropdown-menu-dark .ant-dropdown-menu-item > a:hover {
  color: #fff;
  background: transparent;
}
.ant-dropdown-menu-dark .ant-dropdown-menu-item-selected,
.ant-dropdown-menu-dark .ant-dropdown-menu-item-selected:hover,
.ant-dropdown-menu-dark .ant-dropdown-menu-item-selected > a {
  background: #3FCE9E;
  color: #fff;
}
`,
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-dropdown {
  position: absolute;
  left: -9999px;
  top: -9999px;
  z-index: 1050;
  display: block;
  font-size: 12px;
  font-weight: normal;
  line-height: 1.5;
}
.ant-dropdown-wrap {
  position: relative;
}
.ant-dropdown-wrap .ant-btn > .anticon-down {
  display: inline-block;
  font-size: 12px;
  font-size: 10px \9;
  transform: scale(0.83333333) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
}
:root .ant-dropdown-wrap .ant-btn > .anticon-down {
  filter: none;
}
:root .ant-dropdown-wrap .ant-btn > .anticon-down {
  font-size: 12px;
}
.ant-dropdown-wrap .anticon-down:before {
  transition: transform 0.2s ease;
}
.ant-dropdown-wrap-open .anticon-down:before {
  transform: rotate(180deg);
}
.ant-dropdown-hidden,
.ant-dropdown-menu-hidden {
  display: none;
}
.ant-dropdown-menu {
  outline: none;
  position: relative;
  list-style-type: none;
  padding: 0;
  margin: 0;
  text-align: left;
  background-color: #fff;
  border-radius: 4px;
  box-shadow: 0 1px 6px rgba(0, 0, 0, 0.2);
  background-clip: padding-box;
}
.ant-dropdown-menu-item,
.ant-dropdown-menu-submenu-title {
  padding: 7px 8px;
  margin: 0;
  clear: both;
  font-size: 12px;
  font-weight: normal;
  color: rgba(0, 0, 0, 0.65);
  white-space: nowrap;
  cursor: pointer;
  transition: all .3s;
}
.ant-dropdown-menu-item > a,
.ant-dropdown-menu-submenu-title > a {
  color: rgba(0, 0, 0, 0.65);
  display: block;
  padding: 7px 8px;
  margin: -7px -8px;
  transition: all .3s;
}
.ant-dropdown-menu-item > a:focus,
.ant-dropdown-menu-submenu-title > a:focus {
  text-decoration: none;
}
.ant-dropdown-menu-item-selected,
.ant-dropdown-menu-submenu-title-selected,
.ant-dropdown-menu-item-selected > a,
.ant-dropdown-menu-submenu-title-selected > a {
  color: #3FCE9E;
  background-color: #f0fbf7;
}
.ant-dropdown-menu-item:hover,
.ant-dropdown-menu-submenu-title:hover {
  background-color: #f0fbf7;
}
.ant-dropdown-menu-item-disabled,
.ant-dropdown-menu-submenu-title-disabled {
  color: rgba(0, 0, 0, 0.25);
  cursor: not-allowed;
}
.ant-dropdown-menu-item-disabled:hover,
.ant-dropdown-menu-submenu-title-disabled:hover {
  color: rgba(0, 0, 0, 0.25);
  background-color: #fff;
  cursor: not-allowed;
}
.ant-dropdown-menu-item:first-child,
.ant-dropdown-menu-submenu-title:first-child,
.ant-dropdown-menu-item:first-child > a,
.ant-dropdown-menu-submenu-title:first-child > a {
  border-radius: 4px 4px 0 0;
}
.ant-dropdown-menu-item:last-child,
.ant-dropdown-menu-submenu-title:last-child,
.ant-dropdown-menu-item:last-child > a,
.ant-dropdown-menu-submenu-title:last-child > a {
  border-radius: 0 0 4px 4px;
}
.ant-dropdown-menu-item:only-child,
.ant-dropdown-menu-submenu-title:only-child,
.ant-dropdown-menu-item:only-child > a,
.ant-dropdown-menu-submenu-title:only-child > a {
  border-radius: 4px;
}
.ant-dropdown-menu-item-divider,
.ant-dropdown-menu-submenu-title-divider {
  height: 1px;
  overflow: hidden;
  background-color: #e9e9e9;
  line-height: 0;
}
.ant-dropdown-menu-submenu-title:after {
  font-family: "anticon" !important;
  position: absolute;
  content: "\\e61f";
  right: 8px;
  color: rgba(0, 0, 0, 0.43);
  display: inline-block;
  font-size: 12px;
  font-size: 10px \9;
  transform: scale(0.83333333) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
}
:root .ant-dropdown-menu-submenu-title:after {
  filter: none;
}
:root .ant-dropdown-menu-submenu-title:after {
  font-size: 12px;
}
.ant-dropdown-menu-submenu-vertical {
  position: relative;
}
.ant-dropdown-menu-submenu-vertical > .ant-dropdown-menu {
  top: 0;
  left: 100%;
  position: absolute;
  min-width: 100%;
  margin-left: 4px;
  transform-origin: 0 0;
}
.ant-dropdown-menu-submenu.ant-dropdown-menu-submenu-disabled .ant-dropdown-menu-submenu-title,
.ant-dropdown-menu-submenu.ant-dropdown-menu-submenu-disabled .ant-dropdown-menu-submenu-title:after {
  color: rgba(0, 0, 0, 0.25);
}
.ant-dropdown-menu-submenu:first-child .ant-dropdown-menu-submenu-title {
  border-radius: 4px 4px 0 0;
}
.ant-dropdown-menu-submenu:last-child .ant-dropdown-menu-submenu-title {
  border-radius: 0 0 4px 4px;
}
.ant-dropdown.slide-down-enter.slide-down-enter-active.ant-dropdown-placement-bottomLeft,
.ant-dropdown.slide-down-appear.slide-down-appear-active.ant-dropdown-placement-bottomLeft,
.ant-dropdown.slide-down-enter.slide-down-enter-active.ant-dropdown-placement-bottomCenter,
.ant-dropdown.slide-down-appear.slide-down-appear-active.ant-dropdown-placement-bottomCenter,
.ant-dropdown.slide-down-enter.slide-down-enter-active.ant-dropdown-placement-bottomRight,
.ant-dropdown.slide-down-appear.slide-down-appear-active.ant-dropdown-placement-bottomRight {
  animation-name: antSlideUpIn;
}
.ant-dropdown.slide-up-enter.slide-up-enter-active.ant-dropdown-placement-topLeft,
.ant-dropdown.slide-up-appear.slide-up-appear-active.ant-dropdown-placement-topLeft,
.ant-dropdown.slide-up-enter.slide-up-enter-active.ant-dropdown-placement-topCenter,
.ant-dropdown.slide-up-appear.slide-up-appear-active.ant-dropdown-placement-topCenter,
.ant-dropdown.slide-up-enter.slide-up-enter-active.ant-dropdown-placement-topRight,
.ant-dropdown.slide-up-appear.slide-up-appear-active.ant-dropdown-placement-topRight {
  animation-name: antSlideDownIn;
}
.ant-dropdown.slide-down-leave.slide-down-leave-active.ant-dropdown-placement-bottomLeft,
.ant-dropdown.slide-down-leave.slide-down-leave-active.ant-dropdown-placement-bottomCenter,
.ant-dropdown.slide-down-leave.slide-down-leave-active.ant-dropdown-placement-bottomRight {
  animation-name: antSlideUpOut;
}
.ant-dropdown.slide-up-leave.slide-up-leave-active.ant-dropdown-placement-topLeft,
.ant-dropdown.slide-up-leave.slide-up-leave-active.ant-dropdown-placement-topCenter,
.ant-dropdown.slide-up-leave.slide-up-leave-active.ant-dropdown-placement-topRight {
  animation-name: antSlideDownOut;
}
.ant-dropdown-trigger .anticon-down,
.ant-dropdown-link .anticon-down {
  display: inline-block;
  font-size: 12px;
  font-size: 10px \9;
  transform: scale(0.83333333) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
}
:root .ant-dropdown-trigger .anticon-down,
:root .ant-dropdown-link .anticon-down {
  filter: none;
}
:root .ant-dropdown-trigger .anticon-down,
:root .ant-dropdown-link .anticon-down {
  font-size: 12px;
}
.ant-dropdown-button {
  white-space: nowrap;
}
.ant-dropdown-button.ant-btn-group > .ant-btn:last-child:not(:first-child) {
  padding-right: 8px;
}
.ant-dropdown-button .anticon-down {
  display: inline-block;
  font-size: 12px;
  font-size: 10px \9;
  transform: scale(0.83333333) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
}
:root .ant-dropdown-button .anticon-down {
  filter: none;
}
:root .ant-dropdown-button .anticon-down {
  font-size: 12px;
}
.ant-dropdown-menu-dark,
.ant-dropdown-menu-dark .ant-dropdown-menu {
  background: #404040;
}
.ant-dropdown-menu-dark .ant-dropdown-menu-item,
.ant-dropdown-menu-dark .ant-dropdown-menu-submenu-title,
.ant-dropdown-menu-dark .ant-dropdown-menu-item > a {
  color: rgba(255, 255, 255, 0.67);
}
.ant-dropdown-menu-dark .ant-dropdown-menu-item:after,
.ant-dropdown-menu-dark .ant-dropdown-menu-submenu-title:after,
.ant-dropdown-menu-dark .ant-dropdown-menu-item > a:after {
  color: rgba(255, 255, 255, 0.67);
}
.ant-dropdown-menu-dark .ant-dropdown-menu-item:hover,
.ant-dropdown-menu-dark .ant-dropdown-menu-submenu-title:hover,
.ant-dropdown-menu-dark .ant-dropdown-menu-item > a:hover {
  color: #fff;
  background: transparent;
}
.ant-dropdown-menu-dark .ant-dropdown-menu-item-selected,
.ant-dropdown-menu-dark .ant-dropdown-menu-item-selected:hover,
.ant-dropdown-menu-dark .ant-dropdown-menu-item-selected > a {
  background: #3FCE9E;
  color: #fff;
}
nz-dropdown {
  position: relative;
  display: inline-block;
}
nz-dropdown-button {
  position: relative;
  display: inline-block;
}
.ant-dropdown {
  top: 100%;
  left: 0;
  position: relative;
  width: 100%;
  margin-top: 4px;
  margin-bottom: 4px;
}
`
                ]
            },] },
];
/**
 * @nocollapse
 */
NzDropDownComponent.ctorParameters = () => [
    { type: Renderer2, },
    { type: ChangeDetectorRef, },
];
NzDropDownComponent.propDecorators = {
    '_nzOrigin': [{ type: ContentChild, args: [NzDropDownDirective,] },],
    '_nzMenu': [{ type: ContentChild, args: [NzMenuComponent,] },],
    'nzTrigger': [{ type: Input },],
    'nzClickHide': [{ type: Input },],
    'nzVisible': [{ type: Input },],
    'nzVisibleChange': [{ type: Output },],
    'nzPlacement': [{ type: Input },],
};

class NzTableFilterComponent {
    /**
     * @param {?} nzDropDownComponent
     */
    constructor(nzDropDownComponent) {
        this.nzDropDownComponent = nzDropDownComponent;
        this._dropDownButton = true;
    }
    /**
     * @return {?}
     */
    hideDropDown() {
        this.nzDropDownComponent.nzVisible = false;
        this.nzDropDownComponent._hide();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.nzDropDownComponent.hasFilterButton = true;
        this.nzDropDownComponent.nzClickHide = false;
    }
}
NzTableFilterComponent.decorators = [
    { type: Component, args: [{
                selector: '[nz-table-filter]',
                template: `
    <a class="ant-table-filter-dropdown-link confirm" (click)="hideDropDown()">
      <ng-content select="[nz-table-filter-confirm]"></ng-content>
    </a>
    <a class="ant-table-filter-dropdown-link clear" (click)="hideDropDown()">
      <ng-content select="[nz-table-filter-clear]"></ng-content>
    </a>
  `
            },] },
];
/**
 * @nocollapse
 */
NzTableFilterComponent.ctorParameters = () => [
    { type: NzDropDownComponent, },
];
NzTableFilterComponent.propDecorators = {
    '_dropDownButton': [{ type: HostBinding, args: ['class.ant-table-filter-dropdown-btns',] },],
};

class NzTheadDirective {
    constructor() {
        this._nzTableThead = true;
    }
}
NzTheadDirective.decorators = [
    { type: Directive, args: [{
                selector: '[nz-thead]'
            },] },
];
/**
 * @nocollapse
 */
NzTheadDirective.ctorParameters = () => [];
NzTheadDirective.propDecorators = {
    '_nzTableThead': [{ type: HostBinding, args: [`class.ant-table-thead`,] },],
};

class NzTbodyDirective {
    constructor() {
        this._nzTableTbody = true;
    }
}
NzTbodyDirective.decorators = [
    { type: Directive, args: [{
                selector: '[nz-tbody]'
            },] },
];
/**
 * @nocollapse
 */
NzTbodyDirective.ctorParameters = () => [];
NzTbodyDirective.propDecorators = {
    '_nzTableTbody': [{ type: HostBinding, args: [`class.ant-table-tbody`,] },],
};

class NzTbodyTrDirective {
    constructor() {
        this._nzTableRow = true;
    }
}
NzTbodyTrDirective.decorators = [
    { type: Directive, args: [{
                selector: '[nz-tbody-tr]'
            },] },
];
/**
 * @nocollapse
 */
NzTbodyTrDirective.ctorParameters = () => [];
NzTbodyTrDirective.propDecorators = {
    '_nzTableRow': [{ type: HostBinding, args: [`class.ant-table-row`,] },],
};

class NzTableDividerDirective {
    constructor() {
        this._nzDivider = true;
    }
}
NzTableDividerDirective.decorators = [
    { type: Directive, args: [{
                selector: '[nz-table-divider]'
            },] },
];
/**
 * @nocollapse
 */
NzTableDividerDirective.ctorParameters = () => [];
NzTableDividerDirective.propDecorators = {
    '_nzDivider': [{ type: HostBinding, args: [`class.ant-divider`,] },],
};

class NzTableSortComponent {
    /**
     * @param {?} nzThDirective
     * @param {?} _renderer
     */
    constructor(nzThDirective, _renderer) {
        this.nzThDirective = nzThDirective;
        this._renderer = _renderer;
        this._value = null;
        this.nzValueChange = new EventEmitter();
    }
    /**
     * @return {?}
     */
    get nzValue() {
        return this._value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzValue(value) {
        this._value = value;
        if ((this._value !== 'ascend') && (this._value !== 'descend')) {
            if (this.nzThDirective) {
                this._renderer.removeClass(this.nzThDirective._el, 'ant-table-column-sort');
            }
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    _setValue(value) {
        if (this.nzValue === value) {
            this.nzValue = null;
            if (this.nzThDirective) {
                this._renderer.removeClass(this.nzThDirective._el, 'ant-table-column-sort');
            }
        }
        else {
            this.nzValue = value;
            if (this.nzThDirective) {
                this._renderer.addClass(this.nzThDirective._el, 'ant-table-column-sort');
            }
        }
        this.nzValueChange.emit(this.nzValue);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
NzTableSortComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-table-sort',
                encapsulation: ViewEncapsulation.None,
                template: `
    <div class="ant-table-column-sorter">
      <span class="ant-table-column-sorter-up" [ngClass]="{'on':_value == 'ascend'}" title="↑" (click)="_setValue('ascend')">
        <i class="anticon anticon-caret-up"></i>
      </span>
      <span class="ant-table-column-sorter-down" [ngClass]="{'on':_value == 'descend'}" title="↓" (click)="_setValue('descend')">
        <i class="anticon anticon-caret-down"></i>
      </span>
    </div>
  `,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-table-wrapper {
  zoom: 1;
}
.ant-table-wrapper:before,
.ant-table-wrapper:after {
  content: " ";
  display: table;
}
.ant-table-wrapper:after {
  clear: both;
  visibility: hidden;
  font-size: 0;
  height: 0;
}
.ant-table {
  font-size: 12px;
  color: rgba(0, 0, 0, 0.65);
  overflow: hidden;
  position: relative;
  border-radius: 4px 4px 0 0;
  /* fix firefox scrollbar bug */
}
.ant-table-body {
  transition: opacity 0.3s ease;
}
.ant-table table {
  width: 100%;
  border-collapse: separate;
  border-spacing: 0;
  text-align: left;
  border-radius: 4px 4px 0 0;
  overflow: hidden;
}
.ant-table-thead > tr > th {
  background: #f7f7f7;
  font-weight: 500;
  transition: background .3s ease;
  text-align: left;
  color: rgba(0, 0, 0, 0.85);
}
.ant-table-thead > tr > th[colspan] {
  text-align: center;
}
.ant-table-thead > tr > th .anticon-filter,
.ant-table-thead > tr > th .ant-table-filter-icon {
  position: relative;
  margin-left: 4px;
  font-size: 12px;
  cursor: pointer;
  color: #aaa;
  transition: all .3s;
  width: 14px;
}
.ant-table-thead > tr > th .anticon-filter:hover,
.ant-table-thead > tr > th .ant-table-filter-icon:hover {
  color: rgba(0, 0, 0, 0.65);
}
.ant-table-thead > tr > th .anticon-filter:after,
.ant-table-thead > tr > th .ant-table-filter-icon:after {
  content: '';
  position: absolute;
  width: 14px;
  height: 50px;
  left: 0;
  top: -19px;
}
.ant-table-thead > tr > th .ant-table-filter-selected.anticon-filter {
  color: #3FCE9E;
}
.ant-table-tbody > tr > td {
  border-bottom: 1px solid #e9e9e9;
  transition: all .3s;
}
.ant-table-thead > tr,
.ant-table-tbody > tr {
  transition: all .3s;
}
.ant-table-thead > tr.ant-table-row-hover > td,
.ant-table-tbody > tr.ant-table-row-hover > td,
.ant-table-thead > tr:hover > td,
.ant-table-tbody > tr:hover > td {
  background: #f0fbf7;
}
.ant-table-thead > tr:hover {
  background: none;
}
.ant-table-footer {
  padding: 16px 8px;
  background: #f7f7f7;
  border-radius: 0 0 4px 4px;
  position: relative;
}
.ant-table-footer:before {
  content: '';
  height: 1px;
  background: #f7f7f7;
  position: absolute;
  top: -1px;
  width: 100%;
  left: 0;
}
.ant-table.ant-table-bordered .ant-table-footer {
  border: 1px solid #e9e9e9;
}
.ant-table-title {
  padding: 16px 0;
  position: relative;
  top: 1px;
  border-radius: 4px 4px 0 0;
}
.ant-table.ant-table-bordered .ant-table-title {
  border: 1px solid #e9e9e9;
  padding-left: 8px;
  padding-right: 8px;
}
.ant-table-title + .ant-table-content {
  position: relative;
  border-radius: 4px 4px 0 0;
  overflow: hidden;
}
.ant-table-bordered .ant-table-title + .ant-table-content,
.ant-table-bordered .ant-table-title + .ant-table-content table {
  border-radius: 0;
}
.ant-table-without-column-header .ant-table-title + .ant-table-content,
.ant-table-without-column-header table {
  border-radius: 0;
}
.ant-table-tbody > tr.ant-table-row-selected {
  background: #fafafa;
}
.ant-table-thead > tr > th.ant-table-column-sort {
  background: #eee;
}
.ant-table-thead > tr > th,
.ant-table-tbody > tr > td {
  padding: 16px 8px;
  word-break: break-all;
}
.ant-table-thead > tr > th.ant-table-selection-column-custom {
  padding-left: 16px;
  padding-right: 0;
}
.ant-table-thead > tr > th.ant-table-selection-column,
.ant-table-tbody > tr > td.ant-table-selection-column {
  text-align: center;
  min-width: 62px;
  width: 62px;
}
.ant-table-expand-icon-th,
.ant-table-row-expand-icon-cell {
  text-align: center;
  min-width: 50px;
  width: 50px;
}
.ant-table-header {
  background: #f7f7f7;
  overflow: hidden;
}
.ant-table-header table {
  border-radius: 4px 4px 0 0;
}
.ant-table-loading {
  position: relative;
}
.ant-table-loading .ant-table-body {
  background: #fff;
  opacity: 0.5;
}
.ant-table-loading .ant-table-spin-holder {
  height: 20px;
  line-height: 20px;
  left: 50%;
  top: 50%;
  margin-left: -30px;
  position: absolute;
}
.ant-table-loading .ant-table-with-pagination {
  margin-top: -20px;
}
.ant-table-loading .ant-table-without-pagination {
  margin-top: 10px;
}
.ant-table-middle .ant-table-thead > tr > th:not(.ant-table-selection-column),
.ant-table-middle .ant-table-tbody > tr > td {
  padding: 10px 8px;
}
.ant-table-middle .ant-table-title,
.ant-table-middle .ant-table-footer {
  padding: 10px 8px;
}
.ant-table-middle .ant-table-column-sorter-up:after {
  top: -13px;
  height: 13px;
}
.ant-table-middle .ant-table-column-sorter-down:after {
  bottom: -11px;
  height: 13px;
}
.ant-table-middle .ant-table-thead > tr > th .anticon-filter:after,
.ant-table-middle .ant-table-thead > tr > th .ant-table-filter-icon:after {
  height: 38px;
  top: -13px;
}
.ant-table-small {
  border: 1px solid #e9e9e9;
  border-radius: 4px;
}
.ant-table-small .ant-table-header > table,
.ant-table-small .ant-table-body > table {
  border: 0;
  padding: 0 8px;
}
.ant-table-small .ant-table-thead > tr > th {
  background: #fff;
  border-bottom: 1px solid #e9e9e9;
}
.ant-table-small .ant-table-tbody > tr > td {
  padding: 6px 8px;
}
.ant-table-small .ant-table-title,
.ant-table-small .ant-table-footer,
.ant-table-small .ant-table-thead > tr > th:not(.ant-table-selection-column) {
  padding: 10px 8px;
}
.ant-table-small .ant-table-title {
  border-bottom: 1px solid #e9e9e9;
  top: 0;
}
.ant-table-small .ant-table-header {
  background: #fff;
}
.ant-table-small .ant-table-header table {
  border-bottom: 1px solid #e9e9e9;
}
.ant-table-small .ant-table-placeholder,
.ant-table-small .ant-table-row:last-child td {
  border-bottom: 0;
}
.ant-table-small .ant-table-column-sorter-up:after {
  top: -14px;
  height: 13px;
}
.ant-table-small .ant-table-column-sorter-down:after {
  bottom: -11px;
  height: 13px;
}
.ant-table-small .ant-table-thead > tr > th .anticon-filter:after,
.ant-table-small .ant-table-thead > tr > th .ant-table-filter-icon:after {
  height: 39px;
  top: -14px;
}
.ant-table-column-sorter {
  position: relative;
  margin-left: 4px;
  display: inline-block;
  width: 14px;
  height: 14px;
  vertical-align: middle;
  text-align: center;
}
.ant-table-column-sorter-up,
.ant-table-column-sorter-down {
  line-height: 4px;
  display: block;
  width: 14px;
  cursor: pointer;
}
.ant-table-column-sorter-up:hover .anticon,
.ant-table-column-sorter-down:hover .anticon {
  color: rgba(0, 0, 0, 0.65);
}
.ant-table-column-sorter-up.on .anticon-caret-up,
.ant-table-column-sorter-down.on .anticon-caret-up,
.ant-table-column-sorter-up.on .anticon-caret-down,
.ant-table-column-sorter-down.on .anticon-caret-down {
  color: #3FCE9E;
}
.ant-table-column-sorter-up:after,
.ant-table-column-sorter-down:after {
  position: absolute;
  content: '';
  height: 20px;
  width: 14px;
  left: 0;
}
.ant-table-column-sorter-up:after {
  top: -19px;
}
.ant-table-column-sorter-down:after {
  bottom: -17px;
}
.ant-table-column-sorter .anticon-caret-up,
.ant-table-column-sorter .anticon-caret-down {
  display: inline-block;
  font-size: 12px;
  font-size: 8px \9;
  transform: scale(0.66666667) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
  line-height: 6px;
  height: 6px;
  color: #aaa;
}
:root .ant-table-column-sorter .anticon-caret-up,
:root .ant-table-column-sorter .anticon-caret-down {
  filter: none;
}
:root .ant-table-column-sorter .anticon-caret-up,
:root .ant-table-column-sorter .anticon-caret-down {
  font-size: 12px;
}
.ant-table-column-sorter .anticon-caret-up:before,
.ant-table-column-sorter .anticon-caret-down:before {
  -moz-transform-origin: 53% 50%;
  /* fix firefox position */
}
.ant-table-bordered .ant-table-header > table,
.ant-table-bordered .ant-table-body > table,
.ant-table-bordered .ant-table-fixed-left table,
.ant-table-bordered .ant-table-fixed-right table {
  border: 1px solid #e9e9e9;
  border-right: 0;
  border-bottom: 0;
}
.ant-table-bordered.ant-table-empty .ant-table-placeholder {
  border-left: 1px solid #e9e9e9;
  border-right: 1px solid #e9e9e9;
}
.ant-table-bordered.ant-table-fixed-header .ant-table-header > table {
  border-bottom: 0;
}
.ant-table-bordered.ant-table-fixed-header .ant-table-body > table {
  border-top: 0;
  border-top-left-radius: 0;
  border-top-right-radius: 0;
}
.ant-table-bordered.ant-table-fixed-header .ant-table-body-inner > table {
  border-top: 0;
}
.ant-table-bordered.ant-table-fixed-header .ant-table-placeholder {
  border: 0;
}
.ant-table-bordered .ant-table-thead > tr > th {
  border-bottom: 1px solid #e9e9e9;
}
.ant-table-bordered .ant-table-thead > tr > th,
.ant-table-bordered .ant-table-tbody > tr > td {
  border-right: 1px solid #e9e9e9;
}
.ant-table-bordered.ant-table-small {
  border-right: 0;
}
.ant-table-bordered.ant-table-small .ant-table-header > table,
.ant-table-bordered.ant-table-small .ant-table-body > table,
.ant-table-bordered.ant-table-small .ant-table-fixed-left table,
.ant-table-bordered.ant-table-small .ant-table-fixed-right table {
  border: 0;
  padding: 0;
}
.ant-table-bordered.ant-table-small .ant-table-title {
  border: 0;
  border-bottom: 1px solid #e9e9e9;
  border-right: 1px solid #e9e9e9;
}
.ant-table-bordered.ant-table-small .ant-table-footer {
  border: 0;
  border-top: 1px solid #e9e9e9;
  border-right: 1px solid #e9e9e9;
}
.ant-table-bordered.ant-table-small .ant-table-footer:before {
  display: none;
}
.ant-table-bordered.ant-table-small .ant-table-placeholder {
  border-left: 0;
  border-bottom: 0;
}
.ant-table-placeholder {
  position: relative;
  padding: 16px 8px;
  background: #fff;
  border-bottom: 1px solid #e9e9e9;
  text-align: center;
  font-size: 12px;
  color: rgba(0, 0, 0, 0.43);
}
.ant-table-placeholder .anticon {
  margin-right: 4px;
}
.ant-table-pagination {
  margin: 16px 0;
  float: right;
}
.ant-table-filter-dropdown {
  min-width: 96px;
  margin-left: -8px;
  background: #fff;
  border-radius: 4px;
  box-shadow: 0 1px 6px rgba(0, 0, 0, 0.2);
}
.ant-table-filter-dropdown .ant-dropdown-menu {
  border: 0;
  box-shadow: none;
  border-radius: 4px 4px 0 0;
}
.ant-table-filter-dropdown .ant-dropdown-menu-without-submenu {
  max-height: 400px;
  overflow-x: hidden;
}
.ant-table-filter-dropdown .ant-dropdown-menu-item > label + span {
  padding: 0;
}
.ant-table-filter-dropdown .ant-dropdown-menu-sub {
  border-radius: 4px;
  box-shadow: 0 1px 6px rgba(0, 0, 0, 0.2);
}
.ant-table-filter-dropdown .ant-dropdown-menu .ant-dropdown-submenu-contain-selected .ant-dropdown-menu-submenu-title:after {
  color: #3FCE9E;
  font-weight: bold;
  text-shadow: 0 0 2px #dbf6ed;
}
.ant-table-filter-dropdown .ant-dropdown-menu-item {
  overflow: hidden;
}
.ant-table-filter-dropdown > .ant-dropdown-menu > .ant-dropdown-menu-item:last-child,
.ant-table-filter-dropdown > .ant-dropdown-menu > .ant-dropdown-menu-submenu:last-child .ant-dropdown-menu-submenu-title {
  border-radius: 0;
}
.ant-table-filter-dropdown-btns {
  overflow: hidden;
  padding: 7px 8px;
  border-top: 1px solid #e9e9e9;
}
.ant-table-filter-dropdown-link {
  color: #3FCE9E;
}
.ant-table-filter-dropdown-link:hover {
  color: #6ddab5;
}
.ant-table-filter-dropdown-link:active {
  color: #36b38c;
}
.ant-table-filter-dropdown-link.confirm {
  float: left;
}
.ant-table-filter-dropdown-link.clear {
  float: right;
}
.ant-table-selection-select-all-custom {
  margin-right: 4px !important;
}
.ant-table-selection .anticon-down {
  color: #aaa;
  transition: all .3s;
}
.ant-table-selection-menu {
  min-width: 96px;
  margin-top: 5px;
  margin-left: -30px;
  background: #fff;
  border-radius: 4px;
  box-shadow: 0 1px 6px rgba(0, 0, 0, 0.2);
}
.ant-table-selection-menu .ant-action-down {
  color: #aaa;
}
.ant-table-selection-down {
  cursor: pointer;
  padding: 0;
  display: inline-block;
  line-height: 1;
}
.ant-table-selection-down:hover .anticon-down {
  color: #666;
}
.ant-table-row-expand-icon {
  cursor: pointer;
  display: inline-block;
  width: 17px;
  height: 17px;
  text-align: center;
  line-height: 14px;
  border: 1px solid #e9e9e9;
  user-select: none;
  background: #fff;
}
.ant-table-row-expanded:after {
  content: '-';
}
.ant-table-row-collapsed:after {
  content: '+';
}
.ant-table-row-spaced {
  visibility: hidden;
}
.ant-table-row-spaced:after {
  content: '.';
}
.ant-table-row[class*="ant-table-row-level-0"] .ant-table-selection-column > span {
  display: inline-block;
}
tr.ant-table-expanded-row,
tr.ant-table-expanded-row:hover {
  background: #fbfbfb;
}
.ant-table .ant-table-row-indent + .ant-table-row-expand-icon {
  margin-right: 8px;
}
.ant-table-scroll {
  overflow: auto;
  overflow-x: hidden;
}
.ant-table-scroll table {
  width: auto;
  min-width: 100%;
}
.ant-table-body-inner {
  height: 100%;
}
.ant-table-fixed-header > .ant-table-content > .ant-table-scroll > .ant-table-body {
  position: relative;
  background: #fff;
}
.ant-table-fixed-header .ant-table-body-inner {
  overflow: scroll;
}
.ant-table-fixed-header .ant-table-scroll .ant-table-header {
  overflow: scroll;
  padding-bottom: 20px;
  margin-bottom: -20px;
}
.ant-table-fixed-header.ant-table-empty .ant-table-scroll .ant-table-body {
  padding-bottom: 20px;
  margin-bottom: -20px;
}
.ant-table-fixed-left,
.ant-table-fixed-right {
  position: absolute;
  top: 0;
  overflow: hidden;
  transition: box-shadow 0.3s ease;
  border-radius: 0;
}
.ant-table-fixed-left table,
.ant-table-fixed-right table {
  width: auto;
  background: #fff;
}
.ant-table-fixed-header .ant-table-fixed-left .ant-table-body-outer .ant-table-fixed,
.ant-table-fixed-header .ant-table-fixed-right .ant-table-body-outer .ant-table-fixed {
  border-radius: 0;
}
.ant-table-fixed-left {
  left: 0;
  box-shadow: 6px 0 6px -4px rgba(0, 0, 0, 0.2);
}
.ant-table-fixed-left .ant-table-header {
  overflow-y: hidden;
}
.ant-table-fixed-left .ant-table-body-inner {
  margin-right: -20px;
  padding-right: 20px;
}
.ant-table-fixed-header .ant-table-fixed-left .ant-table-body-inner {
  padding-right: 0;
}
.ant-table-fixed-left,
.ant-table-fixed-left table {
  border-radius: 4px 0 0 0;
}
.ant-table-fixed-right {
  right: 0;
  box-shadow: -6px 0 6px -4px rgba(0, 0, 0, 0.2);
}
.ant-table-fixed-right,
.ant-table-fixed-right table {
  border-radius: 0 4px 0 0;
}
.ant-table-fixed-right .ant-table-expanded-row {
  color: transparent;
  pointer-events: none;
}
.ant-table.ant-table-scroll-position-left .ant-table-fixed-left {
  box-shadow: none;
}
.ant-table.ant-table-scroll-position-right .ant-table-fixed-right {
  box-shadow: none;
}
`
                ]
            },] },
];
/**
 * @nocollapse
 */
NzTableSortComponent.ctorParameters = () => [
    { type: NzThDirective, decorators: [{ type: Host }, { type: Optional },] },
    { type: Renderer2, },
];
NzTableSortComponent.propDecorators = {
    'nzValueChange': [{ type: Output },],
    'nzValue': [{ type: Input },],
};

class NzTableModule {
}
NzTableModule.decorators = [
    { type: NgModule, args: [{
                declarations: [NzRowIndentComponent, NzRowExpandIconComponent, NzTableFilterComponent, NzTableComponent, NzThDirective, NzTdDirective, NzTheadDirective, NzTbodyDirective, NzTbodyTrDirective, NzTableDividerDirective, NzTableSortComponent],
                exports: [NzRowIndentComponent, NzRowExpandIconComponent, NzTableFilterComponent, NzTableComponent, NzThDirective, NzTdDirective, NzTheadDirective, NzTbodyDirective, NzTbodyTrDirective, NzTableDividerDirective, NzTableSortComponent],
                imports: [CommonModule, NzPaginationModule, NzSpinModule]
            },] },
];
/**
 * @nocollapse
 */
NzTableModule.ctorParameters = () => [];

class NzTabsInkBarDirective {
    /**
     * @param {?} _renderer
     * @param {?} _elementRef
     * @param {?} _ngZone
     */
    constructor(_renderer, _elementRef, _ngZone) {
        this._renderer = _renderer;
        this._elementRef = _elementRef;
        this._ngZone = _ngZone;
        this._nzTabsInkBar = true;
        this.nzPositionMode = 'horizontal';
    }
    /**
     * @param {?} element
     * @return {?}
     */
    alignToElement(element) {
        this.show();
        this._ngZone.runOutsideAngular(() => {
            requestAnimationFrame(() => {
                /** when horizontal remove height style and add transfrom left **/
                if (this.nzPositionMode === 'horizontal') {
                    this._renderer.removeStyle(this._elementRef.nativeElement, 'height');
                    this._renderer.setStyle(this._elementRef.nativeElement, 'transform', `translate3d(${this._getLeftPosition(element)}, 0px, 0px)`);
                    this._renderer.setStyle(this._elementRef.nativeElement, 'width', this._getElementWidth(element));
                }
                else {
                    /** when vertical remove width style and add transfrom top **/
                    this._renderer.removeStyle(this._elementRef.nativeElement, 'width');
                    this._renderer.setStyle(this._elementRef.nativeElement, 'transform', `translate3d(0px, ${this._getTopPosition(element)}, 0px)`);
                    this._renderer.setStyle(this._elementRef.nativeElement, 'height', this._getElementHeight(element));
                }
            });
        });
    }
    /**
     * @return {?}
     */
    show() {
        this._renderer.setStyle(this._elementRef.nativeElement, 'visibility', 'visible');
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setDisplay(value) {
        this._renderer.setStyle(this._elementRef.nativeElement, 'display', value);
    }
    /**
     * @return {?}
     */
    hide() {
        this._renderer.setStyle(this._elementRef.nativeElement, 'visibility', 'hidden');
    }
    /**
     * @param {?} element
     * @return {?}
     */
    _getLeftPosition(element) {
        return element ? element.offsetLeft + 'px' : '0';
    }
    /**
     * @param {?} element
     * @return {?}
     */
    _getElementWidth(element) {
        return element ? element.offsetWidth + 'px' : '0';
    }
    /**
     * @param {?} element
     * @return {?}
     */
    _getTopPosition(element) {
        return element ? element.offsetTop + 'px' : '0';
    }
    /**
     * @param {?} element
     * @return {?}
     */
    _getElementHeight(element) {
        return element ? element.offsetHeight + 'px' : '0';
    }
}
NzTabsInkBarDirective.decorators = [
    { type: Directive, args: [{
                selector: '[nz-tabs-ink-bar]',
            },] },
];
/**
 * @nocollapse
 */
NzTabsInkBarDirective.ctorParameters = () => [
    { type: Renderer2, },
    { type: ElementRef, },
    { type: NgZone, },
];
NzTabsInkBarDirective.propDecorators = {
    '_nzTabsInkBar': [{ type: HostBinding, args: ['class.ant-tabs-ink-bar',] },],
    'nzAnimated': [{ type: Input }, { type: HostBinding, args: ['class.ant-tabs-ink-bar-animated',] },],
    'nzPositionMode': [{ type: Input },],
};

/** code from https://github.com/angular/material2 */
class NzTabChangeEvent {
}
class NzTabSetComponent {
    /**
     * @param {?} _renderer
     */
    constructor(_renderer) {
        this._renderer = _renderer;
        this._prefixCls = 'ant-tabs';
        this._tabPosition = 'top';
        this._tabPositionMode = 'horizontal';
        this._indexToSelect = 0;
        this._selectedIndex = null;
        this._isViewInit = false;
        this._tabs = [];
        this.nzAnimated = true;
        this.nzShowPagination = true;
        this.nzHide = false;
        this.nzSelectChange = new EventEmitter(true);
        this.nzSize = 'default';
        this._type = 'line';
        this.tabs = [];
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzSelectedIndex(value) {
        this._indexToSelect = value;
    }
    /**
     * @return {?}
     */
    get nzSelectedIndex() {
        return this._selectedIndex;
    }
    /**
     * @return {?}
     */
    get nzSelectedIndexChange() {
        return map$1.call(this.nzSelectChange, event => event.index);
    }
    /**
     * @return {?}
     */
    get nzTabPosition() {
        return this._tabPosition;
    }
    ;
    /**
     * @param {?} value
     * @return {?}
     */
    set nzTabPosition(value) {
        if (this._tabPosition === value) {
            return;
        }
        this._tabPosition = value;
        if ((this._tabPosition === 'top') || (this._tabPosition === 'bottom')) {
            this._tabPositionMode = 'horizontal';
        }
        else {
            this._tabPositionMode = 'vertical';
        }
        this._setPosition(value);
        this._setClassMap();
    }
    /**
     * @return {?}
     */
    get nzType() {
        return this._type;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzType(value) {
        if (this._type === value) {
            return;
        }
        this._type = value;
        if (this._type === 'card') {
            this.nzAnimated = false;
        }
        this._setClassMap();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    _setPosition(value) {
        if (this._isViewInit) {
            if (value === 'bottom') {
                this._renderer.insertBefore(this._hostContent.nativeElement, this._tabContent.nativeElement, this._tabNav._elementRef.nativeElement);
            }
            else {
                this._renderer.insertBefore(this._hostContent.nativeElement, this._tabNav._elementRef.nativeElement, this._tabContent.nativeElement);
            }
        }
    }
    /**
     * @return {?}
     */
    _setClassMap() {
        this._classMap = {
            [this._prefixCls]: true,
            [`${this._prefixCls}-vertical`]: (this._tabPosition === 'left') || (this._tabPosition === 'right'),
            [`${this._prefixCls}-${this._tabPosition}`]: this._tabPosition,
            [`${this._prefixCls}-no-animation`]: (this.nzAnimated === false) || (((this.nzAnimated)).tabPane === false),
            [`${this._prefixCls}-${this._type}`]: this._type,
            [`${this._prefixCls}-mini`]: (this.nzSize === 'small')
        };
    }
    /**
     * @param {?} index
     * @return {?}
     */
    clickLabel(index) {
        this.nzSelectedIndex = index;
        this._tabs[index].nzClick.emit();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._setClassMap();
    }
    /**
     * @return {?}
     */
    ngAfterContentChecked() {
        // Clamp the next selected index to the bounds of 0 and the tabs length. Note the `|| 0`, which
        // ensures that values like NaN can't get through and which would otherwise throw the
        // component into an infinite loop (since Math.max(NaN, 0) === NaN).
        const /** @type {?} */ indexToSelect = this._indexToSelect =
            Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));
        // If there is a change in selected index, emit a change event. Should not trigger if
        // the selected index has not yet been initialized.
        if (this._selectedIndex !== indexToSelect && this._selectedIndex != null) {
            this.nzSelectChange.emit(this._createChangeEvent(indexToSelect));
        }
        // Setup the position for each tab and optionally setup an origin on the next selected tab.
        this._tabs.forEach((tab, index) => {
            tab.position = index - indexToSelect;
            // If there is already a selected tab, then set up an origin for the next selected tab
            // if it doesn't have one already.
            if (this._selectedIndex != null && tab.position === 0 && !tab.origin) {
                tab.origin = indexToSelect - this._selectedIndex;
            }
        });
        this._selectedIndex = indexToSelect;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this._isViewInit = true;
        this._setPosition(this._tabPosition);
    }
    /**
     * @param {?} index
     * @return {?}
     */
    _createChangeEvent(index) {
        const /** @type {?} */ event = new NzTabChangeEvent;
        event.index = index;
        if (this._tabs && this._tabs.length) {
            event.tab = this._tabs[index];
            this._tabs.forEach((item, i) => {
                if (i !== index) {
                    item.nzDeselect.emit();
                }
            });
            event.tab.nzSelect.emit();
        }
        return event;
    }
    /**
     * @return {?}
     */
    get inkBarAnimated() {
        return (this.nzAnimated === true) || (((this.nzAnimated)).inkBar === true);
    }
    /**
     * @return {?}
     */
    get tabPaneAnimated() {
        return (this.nzAnimated === true) || (((this.nzAnimated)).tabPane === true);
    }
}
NzTabSetComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-tabset',
                encapsulation: ViewEncapsulation.None,
                template: `
    <div [ngClass]="_classMap" #hostContent>
      <nz-tabs-nav
        #tabNav
        [nzSize]="nzSize"
        [nzType]="nzType"
        [nzShowPagination]="nzShowPagination"
        [nzPositionMode]="_tabPositionMode"
        [nzAnimated]="inkBarAnimated"
        [nzHideBar]="nzHide"
        [selectedIndex]="nzSelectedIndex">
        <ng-template #tabBarExtraContent>
          <ng-template [ngTemplateOutlet]="nzTabBarExtraContent"></ng-template>
        </ng-template>
        <div
          nz-tab-label
          [class.ant-tabs-tab-active]="(nzSelectedIndex == i)&&!nzHide"
          [disabled]="tab.disabled"
          (click)="clickLabel(i)"
          *ngFor="let tab of _tabs; let i = index">
          <ng-template [ngTemplateOutlet]="tab._tabHeading"></ng-template>
        </div>
      </nz-tabs-nav>
      <div class="ant-tabs-content"
        #tabContent
        [class.ant-tabs-content-animated]="tabPaneAnimated"
        [class.ant-tabs-content-no-animated]="!tabPaneAnimated"
        [style.margin-left.%]="tabPaneAnimated&&(-nzSelectedIndex*100)">
        <nz-tab-body
          class="ant-tabs-tabpane"
          [class.ant-tabs-tabpane-active]="(nzSelectedIndex == i)&&!nzHide"
          [class.ant-tabs-tabpane-inactive]="(nzSelectedIndex != i)||nzHide"
          [content]="tab.content"
          *ngFor="let tab of _tabs; let i = index">
        </nz-tab-body>
      </div>
    </div>`,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-tabs.ant-tabs-card > .ant-tabs-bar .ant-tabs-nav-container {
  height: 32px;
}
.ant-tabs.ant-tabs-card > .ant-tabs-bar .ant-tabs-ink-bar {
  visibility: hidden;
}
.ant-tabs.ant-tabs-card > .ant-tabs-bar .ant-tabs-tab {
  margin: 0;
  border: 1px solid #d9d9d9;
  border-bottom: 0;
  border-radius: 4px 4px 0 0;
  transition: all 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
  background: #f9f9f9;
  margin-right: 2px;
}
.ant-tabs.ant-tabs-card > .ant-tabs-bar .ant-tabs-tab {
  padding: 5px 16px 4px;
  transition: all 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
}
.ant-tabs.ant-tabs-card > .ant-tabs-bar .ant-tabs-tab-active {
  background: #fff;
  border-color: #d9d9d9;
  color: #3FCE9E;
  padding-bottom: 5px;
}
.ant-tabs.ant-tabs-card > .ant-tabs-bar .ant-tabs-tab-inactive {
  padding: 0;
}
.ant-tabs.ant-tabs-card > .ant-tabs-bar .ant-tabs-nav-wrap {
  margin-bottom: 0;
}
.ant-tabs.ant-tabs-card > .ant-tabs-bar .ant-tabs-tab .anticon-close {
  color: rgba(0, 0, 0, 0.43);
  transition: all .3s;
  display: inline-block;
  font-size: 12px;
  font-size: 10px \9;
  transform: scale(0.83333333) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
  margin-right: 0;
  opacity: 0;
  position: absolute;
  right: 2px;
  top: 50%;
  margin-top: -5px;
  overflow: hidden;
  text-align: center;
  border-radius: 2px;
  width: 14px;
  height: 14px;
  line-height: 1;
}
:root .ant-tabs.ant-tabs-card > .ant-tabs-bar .ant-tabs-tab .anticon-close {
  filter: none;
}
:root .ant-tabs.ant-tabs-card > .ant-tabs-bar .ant-tabs-tab .anticon-close {
  font-size: 12px;
}
.ant-tabs.ant-tabs-card > .ant-tabs-bar .ant-tabs-tab .anticon-close:hover {
  color: rgba(0, 0, 0, 0.85);
}
.ant-tabs.ant-tabs-card .ant-tabs-content > .ant-tabs-tabpane,
.ant-tabs.ant-tabs-editable-card .ant-tabs-content > .ant-tabs-tabpane {
  transition: none !important;
}
.ant-tabs.ant-tabs-card .ant-tabs-content > .ant-tabs-tabpane-inactive,
.ant-tabs.ant-tabs-editable-card .ant-tabs-content > .ant-tabs-tabpane-inactive {
  overflow: hidden;
}
.ant-tabs.ant-tabs-card > .ant-tabs-bar .ant-tabs-tab:hover .anticon-close {
  opacity: 1;
}
.ant-tabs-extra-content {
  line-height: 32px;
}
.ant-tabs-extra-content .ant-tabs-new-tab {
  width: 20px;
  height: 20px;
  line-height: 20px;
  text-align: center;
  cursor: pointer;
  border-radius: 4px;
  border: 1px solid #d9d9d9;
  display: inline-block;
  font-size: 12px;
  font-size: 10px \9;
  transform: scale(0.83333333) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
  color: rgba(0, 0, 0, 0.43);
  transition: all .3s;
}
:root .ant-tabs-extra-content .ant-tabs-new-tab {
  filter: none;
}
:root .ant-tabs-extra-content .ant-tabs-new-tab {
  font-size: 12px;
}
.ant-tabs-extra-content .ant-tabs-new-tab:hover {
  color: #3FCE9E;
  border-color: #3FCE9E;
}
.ant-tabs-vertical.ant-tabs-card > .ant-tabs-bar .ant-tabs-nav-container {
  height: auto;
}
.ant-tabs-vertical.ant-tabs-card > .ant-tabs-bar .ant-tabs-tab {
  border-bottom: 1px solid #d9d9d9;
  margin-bottom: 8px;
}
.ant-tabs-vertical.ant-tabs-card > .ant-tabs-bar .ant-tabs-tab-active {
  padding-bottom: 4px;
}
.ant-tabs-vertical.ant-tabs-card > .ant-tabs-bar .ant-tabs-tab:last-child {
  margin-bottom: 8px;
}
.ant-tabs-vertical.ant-tabs-card > .ant-tabs-bar .ant-tabs-new-tab {
  width: 90%;
}
.ant-tabs-vertical.ant-tabs-card.ant-tabs-left > .ant-tabs-bar .ant-tabs-nav-wrap {
  margin-right: 0;
}
.ant-tabs-vertical.ant-tabs-card.ant-tabs-left > .ant-tabs-bar .ant-tabs-tab {
  border-right: 0;
  border-radius: 4px 0 0 4px;
  margin-right: 1px;
}
.ant-tabs-vertical.ant-tabs-card.ant-tabs-left > .ant-tabs-bar .ant-tabs-tab-active {
  margin-right: -1px;
  padding-right: 18px;
}
.ant-tabs-vertical.ant-tabs-card.ant-tabs-right > .ant-tabs-bar .ant-tabs-nav-wrap {
  margin-left: 0;
}
.ant-tabs-vertical.ant-tabs-card.ant-tabs-right > .ant-tabs-bar .ant-tabs-tab {
  border-left: 0;
  border-radius: 0 4px 4px 0;
  margin-left: 1px;
}
.ant-tabs-vertical.ant-tabs-card.ant-tabs-right > .ant-tabs-bar .ant-tabs-tab-active {
  margin-left: -1px;
  padding-left: 18px;
}
.ant-tabs {
  box-sizing: border-box;
  position: relative;
  overflow: hidden;
  zoom: 1;
  color: rgba(0, 0, 0, 0.65);
}
.ant-tabs:before,
.ant-tabs:after {
  content: " ";
  display: table;
}
.ant-tabs:after {
  clear: both;
  visibility: hidden;
  font-size: 0;
  height: 0;
}
.ant-tabs-ink-bar {
  z-index: 1;
  position: absolute;
  left: 0;
  bottom: 1px;
  box-sizing: border-box;
  height: 2px;
  background-color: #3FCE9E;
  transform-origin: 0 0;
}
.ant-tabs-bar {
  border-bottom: 1px solid #d9d9d9;
  margin-bottom: 16px;
  outline: none;
  transition: padding .45s;
}
.ant-tabs-nav-container {
  overflow: hidden;
  font-size: 14px;
  line-height: 1.5;
  box-sizing: border-box;
  position: relative;
  white-space: nowrap;
  margin-bottom: -1px;
  transition: padding .45s;
  zoom: 1;
}
.ant-tabs-nav-container:before,
.ant-tabs-nav-container:after {
  content: " ";
  display: table;
}
.ant-tabs-nav-container:after {
  clear: both;
  visibility: hidden;
  font-size: 0;
  height: 0;
}
.ant-tabs-nav-container-scrolling {
  padding-left: 32px;
  padding-right: 32px;
}
.ant-tabs-tab-prev,
.ant-tabs-tab-next {
  user-select: none;
  z-index: 2;
  width: 0;
  height: 0;
  line-height: 32px;
  cursor: pointer;
  border: 0;
  background-color: transparent;
  position: absolute;
  text-align: center;
  color: rgba(0, 0, 0, 0.43);
  transition: width .3s, height .3s, opacity .3s, color .3s;
  opacity: 0;
  pointer-events: none;
}
.ant-tabs-tab-prev.ant-tabs-tab-arrow-show,
.ant-tabs-tab-next.ant-tabs-tab-arrow-show {
  opacity: 1;
  width: 32px;
  height: 100%;
  pointer-events: auto;
}
.ant-tabs-tab-prev:hover,
.ant-tabs-tab-next:hover {
  color: rgba(0, 0, 0, 0.65);
}
.ant-tabs-tab-prev-icon,
.ant-tabs-tab-next-icon {
  font-style: normal;
  font-weight: bold;
  font-variant: normal;
  line-height: inherit;
  vertical-align: baseline;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  text-align: center;
  text-transform: none;
}
.ant-tabs-tab-prev-icon:before,
.ant-tabs-tab-next-icon:before {
  display: block;
  font-family: "anticon" !important;
  display: inline-block;
  font-size: 12px;
  font-size: 10px \9;
  transform: scale(0.83333333) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
}
:root .ant-tabs-tab-prev-icon:before,
:root .ant-tabs-tab-next-icon:before {
  filter: none;
}
:root .ant-tabs-tab-prev-icon:before,
:root .ant-tabs-tab-next-icon:before {
  font-size: 12px;
}
.ant-tabs-tab-btn-disabled {
  cursor: not-allowed;
}
.ant-tabs-tab-btn-disabled,
.ant-tabs-tab-btn-disabled:hover {
  color: rgba(0, 0, 0, 0.25);
}
.ant-tabs-tab-next {
  right: 2px;
}
.ant-tabs-tab-next-icon:before {
  content: "\\e61f";
}
.ant-tabs-tab-prev {
  left: 0;
}
.ant-tabs-tab-prev-icon:before {
  content: "\\e620";
}
:root .ant-tabs-tab-prev {
  filter: none;
}
.ant-tabs-nav-wrap {
  overflow: hidden;
  margin-bottom: -1px;
}
.ant-tabs-nav-scroll {
  overflow: hidden;
  white-space: nowrap;
}
.ant-tabs-nav {
  box-sizing: border-box;
  padding-left: 0;
  transition: transform 0.5s cubic-bezier(0.645, 0.045, 0.355, 1);
  position: relative;
  margin: 0;
  list-style: none;
  display: inline-block;
}
.ant-tabs-nav:before,
.ant-tabs-nav:after {
  display: table;
  content: " ";
}
.ant-tabs-nav:after {
  clear: both;
}
.ant-tabs-nav .ant-tabs-tab-disabled {
  pointer-events: none;
  cursor: default;
  color: rgba(0, 0, 0, 0.25);
}
.ant-tabs-nav .ant-tabs-tab {
  display: inline-block;
  height: 100%;
  margin-right: 24px;
  box-sizing: border-box;
  position: relative;
  padding: 8px 20px;
  transition: color 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
  cursor: pointer;
  text-decoration: none;
}
.ant-tabs-nav .ant-tabs-tab:last-child {
  margin-right: 0;
}
.ant-tabs-nav .ant-tabs-tab:hover {
  color: #6ddab5;
}
.ant-tabs-nav .ant-tabs-tab:active {
  color: #36b38c;
}
.ant-tabs-nav .ant-tabs-tab .anticon {
  width: 14px;
  height: 14px;
  margin-right: 8px;
}
.ant-tabs-nav .ant-tabs-tab-active {
  color: #3FCE9E;
}
.ant-tabs-mini .ant-tabs-nav-container {
  font-size: 12px;
}
.ant-tabs-mini .ant-tabs-tab {
  margin-right: 0;
  padding: 8px 16px;
}
.ant-tabs:not(.ant-tabs-vertical) > .ant-tabs-content {
  width: 100%;
}
.ant-tabs:not(.ant-tabs-vertical) > .ant-tabs-content > .ant-tabs-tabpane {
  flex-shrink: 0;
  width: 100%;
  transition: opacity .45s;
  opacity: 1;
}
.ant-tabs:not(.ant-tabs-vertical) > .ant-tabs-content > .ant-tabs-tabpane-inactive {
  opacity: 0;
  height: 0;
  padding: 0 !important;
  pointer-events: none;
}
.ant-tabs:not(.ant-tabs-vertical) > .ant-tabs-content-animated {
  display: flex;
  flex-direction: row;
  will-change: margin-left;
  transition: margin-left 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
}
.ant-tabs-vertical > .ant-tabs-bar {
  border-bottom: 0;
  height: 100%;
}
.ant-tabs-vertical > .ant-tabs-bar-tab-prev.ant-tabs-tab-arrow-show,
.ant-tabs-vertical > .ant-tabs-bar-tab-next.ant-tabs-tab-arrow-show {
  width: 100%;
  height: 32px;
}
.ant-tabs-vertical > .ant-tabs-bar .ant-tabs-tab {
  float: none;
  margin-right: 0;
  margin-bottom: 16px;
  display: block;
  padding: 8px 24px;
}
.ant-tabs-vertical > .ant-tabs-bar .ant-tabs-tab:last-child {
  margin-bottom: 0;
}
.ant-tabs-vertical > .ant-tabs-bar .ant-tabs-extra-content {
  text-align: center;
}
.ant-tabs-vertical > .ant-tabs-bar .ant-tabs-nav-scroll {
  width: auto;
}
.ant-tabs-vertical > .ant-tabs-bar .ant-tabs-nav-container,
.ant-tabs-vertical > .ant-tabs-bar .ant-tabs-nav-wrap {
  height: 100%;
}
.ant-tabs-vertical > .ant-tabs-bar .ant-tabs-nav-container {
  margin-bottom: 0;
}
.ant-tabs-vertical > .ant-tabs-bar .ant-tabs-nav-container.ant-tabs-nav-container-scrolling {
  padding: 32px 0;
}
.ant-tabs-vertical > .ant-tabs-bar .ant-tabs-nav-wrap {
  margin-bottom: 0;
}
.ant-tabs-vertical > .ant-tabs-bar .ant-tabs-nav {
  width: 100%;
}
.ant-tabs-vertical > .ant-tabs-bar .ant-tabs-ink-bar {
  width: 2px;
  left: auto;
  height: auto;
  top: 0;
}
.ant-tabs-vertical > .ant-tabs-content {
  overflow: hidden;
  width: auto;
  margin-top: 0 !important;
}
.ant-tabs-vertical > .ant-tabs-bar .ant-tabs-tab-next {
  width: 100%;
  bottom: 0;
  height: 32px;
}
.ant-tabs-vertical > .ant-tabs-bar .ant-tabs-tab-next-icon:before {
  content: "\\e61d";
}
.ant-tabs-vertical > .ant-tabs-bar .ant-tabs-tab-prev {
  top: 0;
  width: 100%;
  height: 32px;
}
.ant-tabs-vertical > .ant-tabs-bar .ant-tabs-tab-prev-icon:before {
  content: "\\e61e";
}
.ant-tabs-vertical.ant-tabs-left > .ant-tabs-bar {
  float: left;
  border-right: 1px solid #e9e9e9;
  margin-right: -1px;
  margin-bottom: 0;
}
.ant-tabs-vertical.ant-tabs-left > .ant-tabs-bar .ant-tabs-tab {
  text-align: right;
}
.ant-tabs-vertical.ant-tabs-left > .ant-tabs-bar .ant-tabs-nav-container {
  margin-right: -1px;
}
.ant-tabs-vertical.ant-tabs-left > .ant-tabs-bar .ant-tabs-nav-wrap {
  margin-right: -1px;
}
.ant-tabs-vertical.ant-tabs-left > .ant-tabs-bar .ant-tabs-ink-bar {
  right: 1px;
}
.ant-tabs-vertical.ant-tabs-left > .ant-tabs-content {
  padding-left: 24px;
  border-left: 1px solid #e9e9e9;
}
.ant-tabs-vertical.ant-tabs-right > .ant-tabs-bar {
  float: right;
  border-left: 1px solid #e9e9e9;
  margin-left: -1px;
  margin-bottom: 0;
}
.ant-tabs-vertical.ant-tabs-right > .ant-tabs-bar .ant-tabs-nav-container {
  margin-left: -1px;
}
.ant-tabs-vertical.ant-tabs-right > .ant-tabs-bar .ant-tabs-nav-wrap {
  margin-left: -1px;
}
.ant-tabs-vertical.ant-tabs-right > .ant-tabs-bar .ant-tabs-ink-bar {
  left: 1px;
}
.ant-tabs-vertical.ant-tabs-right > .ant-tabs-content {
  padding-right: 24px;
  border-right: 1px solid #e9e9e9;
}
.ant-tabs-bottom > .ant-tabs-bar {
  margin-bottom: 0;
  margin-top: 16px;
}
.ant-tabs-top .ant-tabs-ink-bar-animated,
.ant-tabs-bottom .ant-tabs-ink-bar-animated {
  transition: transform 0.3s cubic-bezier(0.645, 0.045, 0.355, 1), width 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
}
.ant-tabs-left .ant-tabs-ink-bar-animated,
.ant-tabs-right .ant-tabs-ink-bar-animated {
  transition: transform 0.3s cubic-bezier(0.645, 0.045, 0.355, 1), height 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
}
.no-flex > .ant-tabs-content-animated,
.ant-tabs-no-animation > .ant-tabs-content-animated,
.ant-tabs-vertical > .ant-tabs-content-animated {
  transform: none !important;
  margin-left: 0 !important;
}
.no-flex > .ant-tabs-content > .ant-tabs-tabpane-inactive,
.ant-tabs-no-animation > .ant-tabs-content > .ant-tabs-tabpane-inactive,
.ant-tabs-vertical > .ant-tabs-content > .ant-tabs-tabpane-inactive {
  display: none;
}
`,
                    `nz-tab {
  display: block;
}
nz-tabs-nav {
  display: block;
}
nz-tabset {
  display: block;
  position: relative;
  overflow: hidden;
}
nz-tabset .ant-tabs {
  height: 100%;
}
nz-tab-body {
  display: block;
}
`
                ]
            },] },
];
/**
 * @nocollapse
 */
NzTabSetComponent.ctorParameters = () => [
    { type: Renderer2, },
];
NzTabSetComponent.propDecorators = {
    'nzTabBarExtraContent': [{ type: ContentChild, args: ['nzTabBarExtraContent',] },],
    '_tabNav': [{ type: ViewChild, args: ['tabNav',] },],
    '_tabContent': [{ type: ViewChild, args: ['tabContent',] },],
    '_hostContent': [{ type: ViewChild, args: ['hostContent',] },],
    'nzAnimated': [{ type: Input },],
    'nzShowPagination': [{ type: Input },],
    'nzHide': [{ type: Input },],
    'nzSelectedIndex': [{ type: Input },],
    'nzSelectedIndexChange': [{ type: Output },],
    'nzSelectChange': [{ type: Output },],
    'nzSize': [{ type: Input },],
    'nzTabPosition': [{ type: Input },],
    'nzType': [{ type: Input },],
};

class NzTabComponent {
    /**
     * @param {?} nzTabSetComponent
     */
    constructor(nzTabSetComponent) {
        this.nzTabSetComponent = nzTabSetComponent;
        this.position = null;
        this.origin = null;
        this.disabled = false;
        this.nzSelect = new EventEmitter();
        this.nzClick = new EventEmitter();
        this.nzDeselect = new EventEmitter();
        this._nzTabsTabpane = true;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzDisabled(value) {
        this.disabled = value;
    }
    /**
     * @return {?}
     */
    get content() {
        return this._content;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.nzTabSetComponent._tabs.push(this);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.nzTabSetComponent._tabs.splice(this.nzTabSetComponent._tabs.indexOf(this), 1);
    }
}
NzTabComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-tab',
                template: `
    <ng-template>
      <ng-content></ng-content>
    </ng-template>
  `,
                styles: []
            },] },
];
/**
 * @nocollapse
 */
NzTabComponent.ctorParameters = () => [
    { type: NzTabSetComponent, },
];
NzTabComponent.propDecorators = {
    'nzDisabled': [{ type: Input },],
    'nzSelect': [{ type: Output },],
    'nzClick': [{ type: Output },],
    'nzDeselect': [{ type: Output },],
    '_tabHeading': [{ type: ContentChild, args: ['nzTabHeading',] },],
    '_nzTabsTabpane': [{ type: HostBinding, args: ['class.ant-tabs-tabpane',] },],
    '_content': [{ type: ViewChild, args: [TemplateRef,] },],
};

class NzTabLabelDirective {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
        this._nzTabsTab = true;
        this.disabled = false;
    }
    /**
     * @return {?}
     */
    getOffsetLeft() {
        return this.elementRef.nativeElement.offsetLeft;
    }
    /**
     * @return {?}
     */
    getOffsetWidth() {
        return this.elementRef.nativeElement.offsetWidth;
    }
    /**
     * @return {?}
     */
    getOffsetTop() {
        return this.elementRef.nativeElement.offsetTop;
    }
    /**
     * @return {?}
     */
    getOffsetHeight() {
        return this.elementRef.nativeElement.offsetHeight;
    }
}
NzTabLabelDirective.decorators = [
    { type: Directive, args: [{
                selector: '[nz-tab-label]'
            },] },
];
/**
 * @nocollapse
 */
NzTabLabelDirective.ctorParameters = () => [
    { type: ElementRef, },
];
NzTabLabelDirective.propDecorators = {
    '_nzTabsTab': [{ type: HostBinding, args: ['class.ant-tabs-tab',] },],
    'disabled': [{ type: Input }, { type: HostBinding, args: ['class.ant-tabs-tab-disabled',] },],
};

/** code from https://github.com/angular/material2 */
const EXAGGERATED_OVERSCROLL = 64;
class NzTabsNavComponent {
    /**
     * @param {?} _elementRef
     * @param {?} _ngZone
     * @param {?} _renderer
     * @param {?} _dir
     */
    constructor(_elementRef, _ngZone, _renderer, _dir) {
        this._elementRef = _elementRef;
        this._ngZone = _ngZone;
        this._renderer = _renderer;
        this._dir = _dir;
        this._showPaginationControls = false;
        this._disableScrollAfter = true;
        this._disableScrollBefore = true;
        this._scrollDistance = 0;
        this._selectedIndexChanged = false;
        this._realignInkBar = null;
        this._selectedIndex = 0;
        this._tabPositionMode = 'horizontal';
        this.nzAnimated = true;
        this.nzHideBar = false;
        this.nzSize = 'default';
        this._type = 'line';
        this._nzTabsBar = true;
        this.nzShowPagination = true;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzType(value) {
        this._type = value;
        if (this._type !== 'line') {
            this._inkBar.setDisplay('none');
        }
        else {
            this._inkBar.setDisplay('block');
        }
    }
    /**
     * @return {?}
     */
    get nzType() {
        return this._type;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzPositionMode(value) {
        this._tabPositionMode = value;
        this._alignInkBarToSelectedTab();
        if (this.nzShowPagination) {
            this._updatePagination();
        }
    }
    /**
     * @return {?}
     */
    get nzPositionMode() {
        return this._tabPositionMode;
    }
    /**
     * @return {?}
     */
    get selectedIndex() {
        return this._selectedIndex;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set selectedIndex(value) {
        this._selectedIndexChanged = this._selectedIndex !== value;
        this._selectedIndex = value;
    }
    /**
     * @return {?}
     */
    _onContentChanges() {
        if (this.nzShowPagination) {
            this._updatePagination();
        }
        this._alignInkBarToSelectedTab();
    }
    /**
     * @param {?} scrollDir
     * @return {?}
     */
    _scrollHeader(scrollDir) {
        // Move the scroll distance one-third the length of the tab list's viewport.
        this.scrollDistance += (scrollDir === 'before' ? -1 : 1) * this.viewWidthHeightPix / 3;
    }
    /**
     * @return {?}
     */
    ngAfterContentChecked() {
        if (this._tabLabelCount !== this._labelWrappers.length) {
            if (this.nzShowPagination) {
                this._updatePagination();
            }
            this._tabLabelCount = this._labelWrappers.length;
        }
        if (this._selectedIndexChanged) {
            this._scrollToLabel(this._selectedIndex);
            if (this.nzShowPagination) {
                this._checkScrollingControls();
            }
            this._alignInkBarToSelectedTab();
            this._selectedIndexChanged = false;
        }
        if (this._scrollDistanceChanged) {
            if (this.nzShowPagination) {
                this._updateTabScrollPosition();
            }
            this._scrollDistanceChanged = false;
        }
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this._realignInkBar = this._ngZone.runOutsideAngular(() => {
            const /** @type {?} */ dirChange = this._dir ? this._dir.change : of$1(null);
            const /** @type {?} */ resize = typeof window !== 'undefined' ?
                auditTime$1.call(fromEvent$1(window, 'resize'), 10) :
                of$1(null);
            return startWith$1.call(merge$1(dirChange, resize), null).subscribe(() => {
                if (this.nzShowPagination) {
                    this._updatePagination();
                }
                this._alignInkBarToSelectedTab();
            });
        });
    }
    /**
     * @return {?}
     */
    _updateTabScrollPosition() {
        const /** @type {?} */ scrollDistance = this.scrollDistance;
        if (this.nzPositionMode === 'horizontal') {
            const /** @type {?} */ translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;
            this._renderer.setStyle(this._tabList.nativeElement, 'transform', `translate3d(${translateX}px, 0, 0)`);
        }
        else {
            this._renderer.setStyle(this._tabList.nativeElement, 'transform', `translate3d(0,${-scrollDistance}px, 0)`);
        }
    }
    /**
     * @return {?}
     */
    _updatePagination() {
        this._checkPaginationEnabled();
        this._checkScrollingControls();
        this._updateTabScrollPosition();
    }
    /**
     * @return {?}
     */
    _checkPaginationEnabled() {
        this._showPaginationControls =
            this.tabListScrollWidthHeightPix > this.elementRefOffSetWidthHeight;
        if (!this._showPaginationControls) {
            this.scrollDistance = 0;
        }
    }
    /**
     * @param {?} labelIndex
     * @return {?}
     */
    _scrollToLabel(labelIndex) {
        const /** @type {?} */ selectedLabel = this._labelWrappers
            ? this._labelWrappers.toArray()[labelIndex]
            : null;
        if (!selectedLabel) {
            return;
        }
        // The view length is the visible width of the tab labels.
        let /** @type {?} */ labelBeforePos, /** @type {?} */ labelAfterPos;
        if (this.nzPositionMode === 'horizontal') {
            if (this._getLayoutDirection() === 'ltr') {
                labelBeforePos = selectedLabel.getOffsetLeft();
                labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();
            }
            else {
                labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();
                labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();
            }
        }
        else {
            labelBeforePos = selectedLabel.getOffsetTop();
            labelAfterPos = labelBeforePos + selectedLabel.getOffsetHeight();
        }
        const /** @type {?} */ beforeVisiblePos = this.scrollDistance;
        const /** @type {?} */ afterVisiblePos = this.scrollDistance + this.viewWidthHeightPix;
        if (labelBeforePos < beforeVisiblePos) {
            // Scroll header to move label to the before direction
            this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;
        }
        else if (labelAfterPos > afterVisiblePos) {
            // Scroll header to move label to the after direction
            this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;
        }
    }
    /**
     * @return {?}
     */
    _checkScrollingControls() {
        // Check if the pagination arrows should be activated.
        this._disableScrollBefore = this.scrollDistance === 0;
        this._disableScrollAfter = this.scrollDistance === this._getMaxScrollDistance();
    }
    /**
     * Determines what is the maximum length in pixels that can be set for the scroll distance. This
     * is equal to the difference in width between the tab list container and tab header container.
     *
     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and
     * should be called sparingly.
     * @return {?}
     */
    _getMaxScrollDistance() {
        return (this.tabListScrollWidthHeightPix - this.viewWidthHeightPix) || 0;
    }
    /**
     * Sets the distance in pixels that the tab header should be transformed in the X-axis.
     * @param {?} v
     * @return {?}
     */
    set scrollDistance(v) {
        this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));
        // Mark that the scroll distance has changed so that after the view is checked, the CSS
        // transformation can move the header.
        this._scrollDistanceChanged = true;
        this._checkScrollingControls();
    }
    /**
     * @return {?}
     */
    get scrollDistance() {
        return this._scrollDistance;
    }
    /**
     * @return {?}
     */
    get viewWidthHeightPix() {
        let /** @type {?} */ PAGINATION_PIX = 0;
        if (this._showPaginationControls) {
            PAGINATION_PIX = 64;
        }
        if (this.nzPositionMode === 'horizontal') {
            return this._tabListContainer.nativeElement.offsetWidth - PAGINATION_PIX;
        }
        else {
            return this._tabListContainer.nativeElement.offsetHeight - PAGINATION_PIX;
        }
    }
    /**
     * @return {?}
     */
    get tabListScrollWidthHeightPix() {
        if (this.nzPositionMode === 'horizontal') {
            return this._tabList.nativeElement.scrollWidth;
        }
        else {
            return this._tabList.nativeElement.scrollHeight;
        }
    }
    /**
     * @return {?}
     */
    get elementRefOffSetWidthHeight() {
        if (this.nzPositionMode === 'horizontal') {
            return this._elementRef.nativeElement.offsetWidth;
        }
        else {
            return this._elementRef.nativeElement.offsetHeight;
        }
    }
    /**
     * @return {?}
     */
    _getLayoutDirection() {
        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';
    }
    /**
     * @return {?}
     */
    _alignInkBarToSelectedTab() {
        if (this.nzType === 'line') {
            const /** @type {?} */ selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length
                ? this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement
                : null;
            if (this._inkBar) {
                this._inkBar.alignToElement(selectedLabelWrapper);
            }
        }
    }
}
NzTabsNavComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-tabs-nav',
                encapsulation: ViewEncapsulation.None,
                template: `
    <div style="float:right;" *ngIf="_tabBarExtraContent">
      <div class="ant-tabs-extra-content">
        <ng-template [ngTemplateOutlet]="_tabBarExtraContent">
        </ng-template>
      </div>
    </div>
    <div class="ant-tabs-nav-container" [class.ant-tabs-nav-container-scrolling]="_showPaginationControls" #tabListContainer>
      <span class="ant-tabs-tab-prev ant-tabs-tab-arrow-show" (click)="_scrollHeader('before')" [class.ant-tabs-tab-btn-disabled]="_disableScrollBefore" *ngIf="_showPaginationControls">
        <span class="ant-tabs-tab-prev-icon"></span>
      </span>
      <span class="ant-tabs-tab-next ant-tabs-tab-arrow-show" (click)="_scrollHeader('after')" [class.ant-tabs-tab-btn-disabled]="_disableScrollAfter" *ngIf="_showPaginationControls">
        <span class="ant-tabs-tab-next-icon"></span>
      </span>
      <div class="ant-tabs-nav-wrap">
        <div class="ant-tabs-nav-scroll">
          <div class="ant-tabs-nav" [class.ant-tabs-nav-animated]="nzAnimated" #tabList (cdkObserveContent)="_onContentChanges()">
            <div nz-tabs-ink-bar [hidden]="nzHideBar" [nzAnimated]="nzAnimated" [nzPositionMode]="nzPositionMode" style="display: block;"></div>
            <ng-content></ng-content>
          </div>
        </div>
      </div>
    </div>`
            },] },
];
/**
 * @nocollapse
 */
NzTabsNavComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: NgZone, },
    { type: Renderer2, },
    { type: Directionality, decorators: [{ type: Optional },] },
];
NzTabsNavComponent.propDecorators = {
    'nzAnimated': [{ type: Input },],
    'nzHideBar': [{ type: Input },],
    'nzSize': [{ type: Input },],
    'nzType': [{ type: Input },],
    '_tabBarExtraContent': [{ type: ContentChild, args: ['tabBarExtraContent',] },],
    '_labelWrappers': [{ type: ContentChildren, args: [NzTabLabelDirective,] },],
    '_inkBar': [{ type: ViewChild, args: [NzTabsInkBarDirective,] },],
    '_tabListContainer': [{ type: ViewChild, args: ['tabListContainer',] },],
    '_tabList': [{ type: ViewChild, args: ['tabList',] },],
    '_nzTabsBar': [{ type: HostBinding, args: ['class.ant-tabs-bar',] },],
    'nzShowPagination': [{ type: Input },],
    'nzPositionMode': [{ type: Input },],
    'selectedIndex': [{ type: Input },],
};

class NzTabBodyComponent {
}
NzTabBodyComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-tab-body',
                encapsulation: ViewEncapsulation.None,
                template: `
    <ng-template [ngTemplateOutlet]="content"></ng-template>
  `,
            },] },
];
/**
 * @nocollapse
 */
NzTabBodyComponent.ctorParameters = () => [];
NzTabBodyComponent.propDecorators = {
    'content': [{ type: Input },],
};

class NzTabsModule {
}
NzTabsModule.decorators = [
    { type: NgModule, args: [{
                declarations: [NzTabComponent, NzTabSetComponent, NzTabsNavComponent, NzTabLabelDirective, NzTabsInkBarDirective, NzTabBodyComponent],
                exports: [NzTabComponent, NzTabSetComponent, NzTabsNavComponent, NzTabLabelDirective, NzTabsInkBarDirective, NzTabBodyComponent],
                imports: [CommonModule, PortalModule, ObserveContentModule]
            },] },
];
/**
 * @nocollapse
 */
NzTabsModule.ctorParameters = () => [];

class NzTagComponent {
    /**
     * @param {?} _elementRef
     * @param {?} _render
     */
    constructor(_elementRef, _render) {
        this._elementRef = _elementRef;
        this._render = _render;
        this._prefixCls = 'ant-tag';
        this._closed = false;
        /**
         * Whether tag is closable
         */
        this.nzClosable = false;
        /**
         * Event: emit before close
         */
        this.nzBeforeClose = new EventEmitter();
        /**
         * Event: emit after close
         */
        this.nzClose = new EventEmitter();
    }
    /**
     * @return {?}
     */
    get _dataShow() {
        return !this._closed;
    }
    /**
     * @return {?}
     */
    get _backgroundColor() {
        const /** @type {?} */ isPresetColor = this._isPresetColor(this.nzColor);
        return (this.nzColor && !isPresetColor) ? this.nzColor : null;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    _afterClose(event) {
        if (this._closed) {
            this.nzClose.emit(event);
        }
    }
    /**
     * @return {?}
     */
    get _tagCls() {
        const /** @type {?} */ isPresetColor = this._isPresetColor(this.nzColor);
        return {
            [this._prefixCls]: true,
            [`${this._prefixCls}-${this.nzColor}`]: isPresetColor,
            [`${this._prefixCls}-has-color`]: (this.nzColor && !isPresetColor)
        };
    }
    /**
     * @return {?}
     */
    get _textClass() {
        return `${this._prefixCls}-text`;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    _close(event) {
        this.nzBeforeClose.emit(event);
        if (event.defaultPrevented) {
            return;
        }
        this._closed = true;
    }
    /**
     * @param {?} color
     * @return {?}
     */
    _isPresetColor(color) {
        return /^(pink|red|yellow|orange|cyan|green|blue|purple)(-inverse)?$/.test(color);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this._render.addClass(this._elementRef.nativeElement, `${this._prefixCls}-root`);
    }
}
NzTagComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-tag',
                encapsulation: ViewEncapsulation.None,
                animations: [
                    TagAnimation
                ],
                template: `
    <span *ngIf="!_closed"
      [ngClass]="_tagCls"
      [style.backgroundColor]="_backgroundColor"
      [@tagAnimation]
      (@tagAnimation.done)="_afterClose($event)">
      <span [class]="_textClass"><ng-content></ng-content></span>
      <i class="anticon anticon-cross" (click)="_close($event)" *ngIf="nzClosable"></i>
    </span>
  `,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-tag {
  display: inline-block;
  line-height: 20px;
  height: 22px;
  padding: 0 8px;
  border-radius: 4px;
  border: 1px solid #e9e9e9;
  background: #f3f3f3;
  font-size: 12px;
  transition: all 0.3s cubic-bezier(0.78, 0.14, 0.15, 0.86);
  opacity: 1;
  margin-right: 8px;
  cursor: pointer;
  white-space: nowrap;
}
.ant-tag:hover {
  opacity: 0.85;
}
.ant-tag,
.ant-tag a,
.ant-tag a:hover {
  color: rgba(0, 0, 0, 0.65);
}
.ant-tag-text a:first-child:last-child {
  display: inline-block;
  margin: 0 -8px;
  padding: 0 8px;
}
.ant-tag .anticon-cross {
  display: inline-block;
  font-size: 12px;
  font-size: 10px \9;
  transform: scale(0.83333333) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
  cursor: pointer;
  font-weight: bold;
  margin-left: 3px;
  transition: all 0.3s ease;
  opacity: 0.66;
}
:root .ant-tag .anticon-cross {
  filter: none;
}
:root .ant-tag .anticon-cross {
  font-size: 12px;
}
.ant-tag .anticon-cross:hover {
  opacity: 1;
}
.ant-tag-has-color {
  border-color: transparent;
}
.ant-tag-has-color,
.ant-tag-has-color a,
.ant-tag-has-color a:hover,
.ant-tag-has-color .anticon-cross,
.ant-tag-has-color .anticon-cross:hover {
  color: #fff;
}
.ant-tag-checkable {
  background-color: transparent;
  border-color: transparent;
}
.ant-tag-checkable:not(.ant-tag-checkable-checked):hover {
  color: #3FCE9E;
}
.ant-tag-checkable:active,
.ant-tag-checkable-checked {
  color: #fff;
}
.ant-tag-checkable-checked {
  background-color: #3FCE9E;
}
.ant-tag-checkable:active {
  background-color: #36b38c;
}
.ant-tag-close {
  width: 0 !important;
  padding: 0;
  margin: 0;
}
.ant-tag-zoom-enter,
.ant-tag-zoom-appear {
  animation: antFadeIn 0.2s cubic-bezier(0.78, 0.14, 0.15, 0.86);
  animation-fill-mode: both;
}
.ant-tag-zoom-leave {
  animation: antZoomOut 0.3s cubic-bezier(0.78, 0.14, 0.15, 0.86);
  animation-fill-mode: both;
}
.ant-tag-pink {
  color: #f5317f;
  background: #fdd8e7;
  border-color: #fdd8e7;
}
.ant-tag-pink-inverse {
  background: #f5317f;
  border-color: #f5317f;
  color: #fff;
}
.ant-tag-red {
  color: #f04134;
  background: #fcdbd9;
  border-color: #fcdbd9;
}
.ant-tag-red-inverse {
  background: #f04134;
  border-color: #f04134;
  color: #fff;
}
.ant-tag-orange {
  color: #f56a00;
  background: #fde3cf;
  border-color: #fde3cf;
}
.ant-tag-orange-inverse {
  background: #f56a00;
  border-color: #f56a00;
  color: #fff;
}
.ant-tag-yellow {
  color: #ffbf00;
  background: #fff3cf;
  border-color: #fff3cf;
}
.ant-tag-yellow-inverse {
  background: #ffbf00;
  border-color: #ffbf00;
  color: #fff;
}
.ant-tag-cyan {
  color: #00a2ae;
  background: #cfedf0;
  border-color: #cfedf0;
}
.ant-tag-cyan-inverse {
  background: #00a2ae;
  border-color: #00a2ae;
  color: #fff;
}
.ant-tag-green {
  color: #00a854;
  background: #cfefdf;
  border-color: #cfefdf;
}
.ant-tag-green-inverse {
  background: #00a854;
  border-color: #00a854;
  color: #fff;
}
.ant-tag-blue {
  color: #3FCE9E;
  background: #DBF6ED;
  border-color: #DBF6ED;
}
.ant-tag-blue-inverse {
  background: #3FCE9E;
  border-color: #3FCE9E;
  color: #fff;
}
.ant-tag-purple {
  color: #7265e6;
  background: #e4e2fa;
  border-color: #e4e2fa;
}
.ant-tag-purple-inverse {
  background: #7265e6;
  border-color: #7265e6;
  color: #fff;
}
`,
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-tag-root {
  display: inline-block;
}
`
                ]
            },] },
];
/**
 * @nocollapse
 */
NzTagComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
];
NzTagComponent.propDecorators = {
    'nzClosable': [{ type: Input },],
    'nzColor': [{ type: Input },],
    'nzBeforeClose': [{ type: Output },],
    'nzClose': [{ type: Output },],
    '_dataShow': [{ type: HostBinding, args: ['attr.data-show',] },],
};

class NzCheckableTagComponent {
    /**
     * @param {?} _elementRef
     * @param {?} _render
     */
    constructor(_elementRef, _render) {
        this._elementRef = _elementRef;
        this._render = _render;
        this._prefixCls = 'ant-tag';
        this._closed = false;
        /**
         * Whether tag is checked
         */
        this.nzChecked = false;
        /**
         * Whether tag is closable
         */
        this.nzClosable = false;
        /**
         * Event: emit before close
         */
        this.nzBeforeClose = new EventEmitter();
        /**
         * Event: emit after close
         */
        this.nzClose = new EventEmitter();
        /**
         * Event: emit on change
         */
        this.nzChange = new EventEmitter();
    }
    /**
     * @return {?}
     */
    get _dataShow() {
        return !this._closed;
    }
    /**
     * @return {?}
     */
    get _backgroundColor() {
        const /** @type {?} */ isPresetColor = this._isPresetColor(this.nzColor);
        return (this.nzColor && !isPresetColor) ? this.nzColor : null;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    _afterClose(event) {
        if (this._closed) {
            this.nzClose.emit(event);
        }
    }
    /**
     * @return {?}
     */
    get _tagCls() {
        const /** @type {?} */ isPresetColor = this._isPresetColor(this.nzColor);
        return {
            [this._prefixCls]: true,
            [`${this._prefixCls}-${this.nzColor}`]: isPresetColor,
            [`${this._prefixCls}-has-color`]: (this.nzColor && !isPresetColor),
            [`${this._prefixCls}-checkable`]: true,
            [`${this._prefixCls}-checkable-checked`]: this.nzChecked
        };
    }
    /**
     * @return {?}
     */
    get _textClass() {
        return `${this._prefixCls}-text`;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    _handleClick(event) {
        event.preventDefault();
        this.nzChange.emit(!this.nzChecked);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    _close(event) {
        this.nzBeforeClose.emit(event);
        if (event.defaultPrevented) {
            return;
        }
        this._closed = true;
    }
    /**
     * @param {?} color
     * @return {?}
     */
    _isPresetColor(color) {
        return /^(pink|red|yellow|orange|cyan|green|blue|purple)(-inverse)?$/.test(color);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this._render.addClass(this._elementRef.nativeElement, `${this._prefixCls}-root`);
    }
}
NzCheckableTagComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-checkable-tag',
                encapsulation: ViewEncapsulation.None,
                animations: [
                    TagAnimation
                ],
                template: `
    <span *ngIf="!_closed"
      [ngClass]="_tagCls"
      [style.backgroundColor]="_backgroundColor"
      [@tagAnimation]
      (@tagAnimation.done)="_afterClose($event)">
      <span [class]="_textClass"><ng-content></ng-content></span>
      <i class="anticon anticon-cross" (click)="_close($event)" *ngIf="nzClosable"></i>
    </span>
  `,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-tag {
  display: inline-block;
  line-height: 20px;
  height: 22px;
  padding: 0 8px;
  border-radius: 4px;
  border: 1px solid #e9e9e9;
  background: #f3f3f3;
  font-size: 12px;
  transition: all 0.3s cubic-bezier(0.78, 0.14, 0.15, 0.86);
  opacity: 1;
  margin-right: 8px;
  cursor: pointer;
  white-space: nowrap;
}
.ant-tag:hover {
  opacity: 0.85;
}
.ant-tag,
.ant-tag a,
.ant-tag a:hover {
  color: rgba(0, 0, 0, 0.65);
}
.ant-tag-text a:first-child:last-child {
  display: inline-block;
  margin: 0 -8px;
  padding: 0 8px;
}
.ant-tag .anticon-cross {
  display: inline-block;
  font-size: 12px;
  font-size: 10px \9;
  transform: scale(0.83333333) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
  cursor: pointer;
  font-weight: bold;
  margin-left: 3px;
  transition: all 0.3s ease;
  opacity: 0.66;
}
:root .ant-tag .anticon-cross {
  filter: none;
}
:root .ant-tag .anticon-cross {
  font-size: 12px;
}
.ant-tag .anticon-cross:hover {
  opacity: 1;
}
.ant-tag-has-color {
  border-color: transparent;
}
.ant-tag-has-color,
.ant-tag-has-color a,
.ant-tag-has-color a:hover,
.ant-tag-has-color .anticon-cross,
.ant-tag-has-color .anticon-cross:hover {
  color: #fff;
}
.ant-tag-checkable {
  background-color: transparent;
  border-color: transparent;
}
.ant-tag-checkable:not(.ant-tag-checkable-checked):hover {
  color: #3FCE9E;
}
.ant-tag-checkable:active,
.ant-tag-checkable-checked {
  color: #fff;
}
.ant-tag-checkable-checked {
  background-color: #3FCE9E;
}
.ant-tag-checkable:active {
  background-color: #36b38c;
}
.ant-tag-close {
  width: 0 !important;
  padding: 0;
  margin: 0;
}
.ant-tag-zoom-enter,
.ant-tag-zoom-appear {
  animation: antFadeIn 0.2s cubic-bezier(0.78, 0.14, 0.15, 0.86);
  animation-fill-mode: both;
}
.ant-tag-zoom-leave {
  animation: antZoomOut 0.3s cubic-bezier(0.78, 0.14, 0.15, 0.86);
  animation-fill-mode: both;
}
.ant-tag-pink {
  color: #f5317f;
  background: #fdd8e7;
  border-color: #fdd8e7;
}
.ant-tag-pink-inverse {
  background: #f5317f;
  border-color: #f5317f;
  color: #fff;
}
.ant-tag-red {
  color: #f04134;
  background: #fcdbd9;
  border-color: #fcdbd9;
}
.ant-tag-red-inverse {
  background: #f04134;
  border-color: #f04134;
  color: #fff;
}
.ant-tag-orange {
  color: #f56a00;
  background: #fde3cf;
  border-color: #fde3cf;
}
.ant-tag-orange-inverse {
  background: #f56a00;
  border-color: #f56a00;
  color: #fff;
}
.ant-tag-yellow {
  color: #ffbf00;
  background: #fff3cf;
  border-color: #fff3cf;
}
.ant-tag-yellow-inverse {
  background: #ffbf00;
  border-color: #ffbf00;
  color: #fff;
}
.ant-tag-cyan {
  color: #00a2ae;
  background: #cfedf0;
  border-color: #cfedf0;
}
.ant-tag-cyan-inverse {
  background: #00a2ae;
  border-color: #00a2ae;
  color: #fff;
}
.ant-tag-green {
  color: #00a854;
  background: #cfefdf;
  border-color: #cfefdf;
}
.ant-tag-green-inverse {
  background: #00a854;
  border-color: #00a854;
  color: #fff;
}
.ant-tag-blue {
  color: #3FCE9E;
  background: #DBF6ED;
  border-color: #DBF6ED;
}
.ant-tag-blue-inverse {
  background: #3FCE9E;
  border-color: #3FCE9E;
  color: #fff;
}
.ant-tag-purple {
  color: #7265e6;
  background: #e4e2fa;
  border-color: #e4e2fa;
}
.ant-tag-purple-inverse {
  background: #7265e6;
  border-color: #7265e6;
  color: #fff;
}
`,
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-tag-root {
  display: inline-block;
}
`
                ]
            },] },
];
/**
 * @nocollapse
 */
NzCheckableTagComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
];
NzCheckableTagComponent.propDecorators = {
    'nzChecked': [{ type: Input },],
    'nzClosable': [{ type: Input },],
    'nzColor': [{ type: Input },],
    'nzBeforeClose': [{ type: Output },],
    'nzClose': [{ type: Output },],
    'nzChange': [{ type: Output },],
    '_dataShow': [{ type: HostBinding, args: ['attr.data-show',] },],
    '_handleClick': [{ type: HostListener, args: ['click', ['$event'],] },],
};

class NzTagModule {
}
NzTagModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, FormsModule],
                declarations: [
                    NzTagComponent, NzCheckableTagComponent
                ],
                exports: [
                    NzTagComponent, NzCheckableTagComponent
                ]
            },] },
];
/**
 * @nocollapse
 */
NzTagModule.ctorParameters = () => [];

class NzProgressComponent {
    constructor() {
        this._statusColorMap = {
            normal: '#108ee9',
            exception: '#ff5500',
            success: '#87d068',
        };
        this._pathString = '';
        this._pathStyle = {};
        this._circleStyle = {};
        this._percent = 0;
        this._hasFormat = false;
        this._rawStatus = 'normal';
        // ngModel Access
        this.onChange = Function.prototype;
        this.onTouched = Function.prototype;
        this.nzType = 'line';
        this.nzStrokeWidth = this.nzType === 'line' ? 10 : 6;
        this.nzWidth = 132;
        this.nzShowInfo = true;
        this.nzStatus = 'normal';
        this._format = percent => percent + '%';
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set _setFormat(value) {
        this._format = value;
        this._hasFormat = true;
    }
    /**
     * @return {?}
     */
    updateCircleStatus() {
        const /** @type {?} */ circleSize = this.nzWidth || 132;
        this._circleStyle = {
            'width.px': circleSize,
            'height.px': circleSize,
            'font-size.px': circleSize * 0.16 + 6,
        };
        const /** @type {?} */ radius = 50 - this.nzStrokeWidth / 2;
        const /** @type {?} */ len = Math.PI * 2 * radius;
        this._pathString = 'M 50,50 m 0,-' + radius + '\n     a ' + radius + ',' + radius + ' 0 1 1 0,' + 2 * radius + '\n     a ' + radius + ',' + radius + ' 0 1 1 0,-' + 2 * radius;
        this._pathStyle = {
            'stroke-dasharray': len + 'px ' + len + 'px',
            'stroke-dashoffset': (100 - this._percent) / 100 * len + 'px',
            'transition': 'stroke-dashoffset 0.3s ease 0s, stroke 0.3s ease'
        };
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this._percent = value;
        if (this._percent === 100) {
            this.nzStatus = 'success';
        }
        else {
            this.nzStatus = this._rawStatus;
        }
        if (this.nzType === 'circle') {
            this.updateCircleStatus();
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._rawStatus = this.nzStatus;
    }
}
NzProgressComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-progress',
                encapsulation: ViewEncapsulation.None,
                template: `
    <div [ngClass]="'ant-progress ant-progress-status-'+nzStatus"
      [class.ant-progress-line]="nzType=='line'"
      [class.ant-progress-show-info]="nzShowInfo"
      [class.ant-progress-circle]="nzType=='circle'">
      <div *ngIf="nzType=='line'">
        <div class="ant-progress-outer"><!----><div class="ant-progress-inner"><!----><div class="ant-progress-bg" [style.width.%]="_percent" [style.height.px]="nzStrokeWidth"></div><!----></div><!----></div><!----><span class="ant-progress-text" *ngIf="nzShowInfo"><ng-template [ngIf]="(nzStatus=='active')||(nzStatus=='normal')||(_hasFormat)">{{_format(_percent)}}</ng-template><ng-template [ngIf]="(nzStatus=='exception')||(nzStatus=='success')&&(!_hasFormat)"><i class="anticon" [ngClass]="{'anticon-check-circle':nzStatus=='success','anticon-cross-circle':nzStatus=='exception'}"></i></ng-template></span>
      </div>
      <div class="ant-progress-inner" *ngIf="nzType=='circle'" [ngStyle]="_circleStyle">
        <svg class="rc-progress-circle " viewBox="0 0 100 100" *ngIf="nzType=='circle'">
          <path class="rc-progress-circle-trail" [attr.d]="_pathString" stroke="#f3f3f3" [attr.stroke-width]="nzStrokeWidth" fill-opacity="0"></path>
          <path class="rc-progress-circle-path" [attr.d]="_pathString" stroke-linecap="round" [attr.stroke]="_statusColorMap[nzStatus]" stroke-width="6" fill-opacity="0" [ngStyle]="_pathStyle"></path>
        </svg>
        <span class="ant-progress-text" *ngIf="nzShowInfo"><ng-template [ngIf]="(nzStatus=='active')||(nzStatus=='normal')||(_hasFormat)">{{_format(_percent)}}</ng-template><ng-template [ngIf]="(nzStatus=='exception')||(nzStatus=='success')&&!(_hasFormat)"><i class="anticon" [ngClass]="{'anticon-check':nzStatus=='success','anticon-cross':nzStatus=='exception'}"></i></ng-template></span>
      </div>
    </div>
  `,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => NzProgressComponent),
                        multi: true
                    }
                ],
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-progress {
  display: inline-block;
}
.ant-progress-line {
  width: 100%;
  font-size: 12px;
  position: relative;
}
.ant-progress-outer {
  display: inline-block;
  width: 100%;
  margin-right: 0;
  padding-right: 0;
}
.ant-progress-show-info .ant-progress-outer {
  padding-right: 2.75em;
  margin-right: -2.75em;
}
.ant-progress-inner {
  display: inline-block;
  width: 100%;
  background-color: #f7f7f7;
  border-radius: 100px;
  vertical-align: middle;
}
.ant-progress-circle-trail {
  stroke: #f7f7f7;
}
.ant-progress-circle-path {
  stroke: #3FCE9E;
}
.ant-progress-bg {
  border-radius: 100px;
  background-color: #3FCE9E;
  transition: all 0.4s cubic-bezier(0.08, 0.82, 0.17, 1) 0s;
  position: relative;
}
.ant-progress-text {
  width: 2em;
  text-align: left;
  font-size: 1em;
  margin-left: 0.75em;
  vertical-align: middle;
  display: inline-block;
}
.ant-progress-text .anticon {
  font-size: 12px;
}
.ant-progress-status-active .ant-progress-bg:before {
  content: "";
  opacity: 0;
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: #fff;
  border-radius: 10px;
  animation: ant-progress-active 2.4s cubic-bezier(0.23, 1, 0.32, 1) infinite;
}
.ant-progress-status-exception .ant-progress-bg {
  background-color: #f04134;
}
.ant-progress-status-exception .ant-progress-text {
  color: #f04134;
}
.ant-progress-status-exception .ant-progress-circle-path {
  stroke: #f04134;
}
.ant-progress-status-success .ant-progress-bg {
  background-color: #00a854;
}
.ant-progress-status-success .ant-progress-text {
  color: #00a854;
}
.ant-progress-status-success .ant-progress-circle-path {
  stroke: #00a854;
}
.ant-progress-circle .ant-progress-inner {
  position: relative;
  line-height: 1;
  background-color: transparent;
}
.ant-progress-circle .ant-progress-text {
  display: block;
  position: absolute;
  width: 100%;
  text-align: center;
  line-height: 1;
  top: 50%;
  transform: translateY(-50%);
  left: 0;
  font-family: tahoma;
  margin: 0;
}
.ant-progress-circle .ant-progress-text .anticon {
  font-size: 1.16666667em;
}
.ant-progress-circle .ant-progress-status-exception .ant-progress-text {
  color: #f04134;
}
.ant-progress-circle .ant-progress-status-success .ant-progress-text {
  color: #00a854;
}
@keyframes ant-progress-active {
  0% {
    opacity: 0.1;
    width: 0;
  }
  20% {
    opacity: 0.5;
    width: 0;
  }
  100% {
    opacity: 0;
    width: 100%;
  }
}
`
                ]
            },] },
];
/**
 * @nocollapse
 */
NzProgressComponent.ctorParameters = () => [];
NzProgressComponent.propDecorators = {
    'nzType': [{ type: Input },],
    'nzStrokeWidth': [{ type: Input },],
    'nzWidth': [{ type: Input },],
    'nzShowInfo': [{ type: Input },],
    'nzStatus': [{ type: Input },],
    '_setFormat': [{ type: Input, args: ['nzFormat',] },],
};

class NzProgressModule {
}
NzProgressModule.decorators = [
    { type: NgModule, args: [{
                exports: [NzProgressComponent],
                declarations: [NzProgressComponent],
                imports: [CommonModule]
            },] },
];
/**
 * @nocollapse
 */
NzProgressModule.ctorParameters = () => [];

class NzStepConnectService {
    constructor() {
        this.lastElementSizeEvent = new EventEmitter();
        this.currentEvent = new EventEmitter();
        this.itemIndex = 0;
        this.direction = 'horizontal';
        this.directionEvent = new EventEmitter();
        this.processDot = false;
        this.processDotEvent = new EventEmitter();
        this.errorIndexObject = new EventEmitter();
    }
}
NzStepConnectService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
NzStepConnectService.ctorParameters = () => [];

class NzStepsComponent {
    /**
     * @param {?} nzStepConnectService
     */
    constructor(nzStepConnectService) {
        this.nzStepConnectService = nzStepConnectService;
        this._progressDot = false;
        this._direction = 'horizontal';
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzDirection(value) {
        this._direction = value;
        this.nzStepConnectService.direction = value;
        this.nzStepConnectService.directionEvent.next(value);
    }
    /**
     * @return {?}
     */
    get nzDirection() {
        return this._direction;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzProgressDot(value) {
        if (value === '') {
            this._progressDot = true;
        }
        else {
            this._progressDot = (value);
        }
        this.nzStepConnectService.processDot = true;
        this.nzStepConnectService.processDotEvent.next(true);
        this.setDirectionClass();
    }
    /**
     * @return {?}
     */
    get nzProgressDot() {
        return this._progressDot;
    }
    /**
     * @param {?} status
     * @return {?}
     */
    set nzStatus(status) {
        this._status = status;
        this.nzStepConnectService.errorIndex = this._status;
        this.nzStepConnectService.errorIndexObject.next(this._status);
    }
    /**
     * @param {?} current
     * @return {?}
     */
    set nzCurrent(current) {
        this._current = current;
        this.nzStepConnectService.current = current;
        this.nzStepConnectService.currentEvent.next(current);
    }
    /**
     * @return {?}
     */
    get nzCurrent() {
        return this._current;
    }
    /**
     * @return {?}
     */
    setDirectionClass() {
        this._stepsClassMap = {
            [`ant-steps-${this.nzDirection}`]: true,
            [`ant-steps-label-${this.nzDirection}`]: true,
            [`ant-steps-dot`]: this.nzProgressDot,
            ['ant-steps-small']: this.nzSize === 'small'
        };
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.setDirectionClass();
        if (this._status) {
            this.nzStepConnectService.errorIndex = this._status;
            this.nzStepConnectService.errorIndexObject.next(this._status);
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.nzStepConnectService.itemIndex = 0;
    }
}
NzStepsComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-steps',
                encapsulation: ViewEncapsulation.None,
                providers: [NzStepConnectService],
                template: `
    <div class="ant-steps" [ngClass]="_stepsClassMap">
      <ng-content></ng-content>
    </div>
  `,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-steps {
  font-size: 0;
  line-height: 1.5;
}
.ant-steps .ant-steps-item {
  position: relative;
  display: inline-block;
  vertical-align: top;
}
.ant-steps .ant-steps-item.ant-steps-status-wait .ant-steps-head-inner {
  border-color: rgba(0, 0, 0, 0.25);
  background-color: #fff;
}
.ant-steps .ant-steps-item.ant-steps-status-wait .ant-steps-head-inner > .ant-steps-icon {
  color: rgba(0, 0, 0, 0.25);
}
.ant-steps .ant-steps-item.ant-steps-status-wait .ant-steps-head-inner > .ant-steps-icon .ant-steps-icon-dot {
  background: rgba(0, 0, 0, 0.25);
}
.ant-steps .ant-steps-item.ant-steps-status-wait .ant-steps-title {
  color: rgba(0, 0, 0, 0.43);
}
.ant-steps .ant-steps-item.ant-steps-status-wait .ant-steps-description {
  color: rgba(0, 0, 0, 0.43);
}
.ant-steps .ant-steps-item.ant-steps-status-wait .ant-steps-tail > i {
  background-color: #e9e9e9;
}
.ant-steps .ant-steps-item.ant-steps-status-process .ant-steps-head-inner {
  border-color: #3FCE9E;
  background-color: #3FCE9E;
}
.ant-steps .ant-steps-item.ant-steps-status-process .ant-steps-head-inner > .ant-steps-icon {
  color: #fff;
}
.ant-steps .ant-steps-item.ant-steps-status-process .ant-steps-head-inner > .ant-steps-icon .ant-steps-icon-dot {
  background: #3FCE9E;
}
.ant-steps .ant-steps-item.ant-steps-status-process .ant-steps-title {
  color: rgba(0, 0, 0, 0.65);
}
.ant-steps .ant-steps-item.ant-steps-status-process .ant-steps-description {
  color: rgba(0, 0, 0, 0.65);
}
.ant-steps .ant-steps-item.ant-steps-status-process .ant-steps-tail > i {
  background-color: #e9e9e9;
}
.ant-steps .ant-steps-item.ant-steps-status-finish .ant-steps-head-inner {
  border-color: #3FCE9E;
  background-color: #fff;
}
.ant-steps .ant-steps-item.ant-steps-status-finish .ant-steps-head-inner > .ant-steps-icon {
  color: #3FCE9E;
}
.ant-steps .ant-steps-item.ant-steps-status-finish .ant-steps-head-inner > .ant-steps-icon .ant-steps-icon-dot {
  background: #3FCE9E;
}
.ant-steps .ant-steps-item.ant-steps-status-finish .ant-steps-tail > i:after {
  width: 100%;
  background: #3FCE9E;
  transition: all .6s;
  opacity: 1;
  box-shadow: 0 0 0 0 #3FCE9E;
  animation: tailEffect .4s;
}
.ant-steps .ant-steps-item.ant-steps-status-finish .ant-steps-title {
  color: rgba(0, 0, 0, 0.43);
}
.ant-steps .ant-steps-item.ant-steps-status-finish .ant-steps-description {
  color: rgba(0, 0, 0, 0.43);
}
.ant-steps .ant-steps-item.ant-steps-status-error .ant-steps-head-inner {
  border-color: #f04134;
  background-color: #fff;
}
.ant-steps .ant-steps-item.ant-steps-status-error .ant-steps-head-inner > .ant-steps-icon {
  color: #f04134;
}
.ant-steps .ant-steps-item.ant-steps-status-error .ant-steps-head-inner > .ant-steps-icon .ant-steps-icon-dot {
  background: #f04134;
}
.ant-steps .ant-steps-item.ant-steps-status-error .ant-steps-title {
  color: #f04134;
}
.ant-steps .ant-steps-item.ant-steps-status-error .ant-steps-description {
  color: #f04134;
}
.ant-steps .ant-steps-item.ant-steps-status-error .ant-steps-tail > i {
  background-color: #e9e9e9;
}
.ant-steps .ant-steps-item.ant-steps-next-error .ant-steps-tail > i,
.ant-steps .ant-steps-item.ant-steps-next-error .ant-steps-tail > i:after {
  background-color: #f04134;
}
.ant-steps .ant-steps-item.ant-steps-custom .ant-steps-head-inner {
  background: none;
  border: 0;
  width: auto;
  height: auto;
}
.ant-steps .ant-steps-item.ant-steps-custom .ant-steps-head-inner > .ant-steps-icon {
  font-size: 26px;
  width: 26px;
  height: 26px;
}
.ant-steps .ant-steps-item.ant-steps-custom.ant-steps-status-process .ant-steps-head-inner > .ant-steps-icon {
  color: #3FCE9E;
}
.ant-steps .ant-steps-head,
.ant-steps .ant-steps-main {
  position: relative;
  display: inline-block;
  vertical-align: top;
}
.ant-steps .ant-steps-head {
  background: #fff;
}
.ant-steps .ant-steps-head-inner {
  display: block;
  border: 1px solid rgba(0, 0, 0, 0.25);
  width: 26px;
  height: 26px;
  line-height: 23px;
  text-align: center;
  border-radius: 26px;
  font-size: 14px;
  margin-right: 8px;
  transition: background-color 0.3s ease, border-color 0.3s ease;
}
.ant-steps .ant-steps-head-inner > .ant-steps-icon {
  line-height: 1;
  color: #3FCE9E;
  position: relative;
}
.ant-steps .ant-steps-head-inner > .ant-steps-icon.anticon {
  font-size: 12px;
}
.ant-steps .ant-steps-head-inner > .ant-steps-icon.anticon-cross,
.ant-steps .ant-steps-head-inner > .ant-steps-icon.anticon-check {
  font-weight: bold;
}
.ant-steps .ant-steps-title {
  font-size: 14px;
  line-height: 26px;
  color: rgba(0, 0, 0, 0.65);
  font-weight: bold;
  background-color: #fff;
  display: inline-block;
  padding-right: 10px;
}
.ant-steps .ant-steps-title > a:first-child:last-child {
  color: rgba(0, 0, 0, 0.65);
}
.ant-steps .ant-steps-item:last-child .ant-steps-title {
  padding-right: 0;
  width: 100%;
}
.ant-steps .ant-steps-item:last-child .ant-steps-tail {
  display: none;
}
.ant-steps .ant-steps-description {
  font-size: 12px;
  color: rgba(0, 0, 0, 0.43);
}
.ant-steps .ant-steps-tail {
  position: absolute;
  left: 0;
  width: 100%;
  top: 13px;
  padding: 0 10px;
}
.ant-steps .ant-steps-tail > i {
  display: inline-block;
  vertical-align: top;
  background: #e9e9e9;
  height: 1px;
  border-radius: 1px;
  width: 100%;
  position: relative;
}
.ant-steps .ant-steps-tail > i:after {
  position: absolute;
  content: '';
  top: 0;
  width: 0;
  background: #e9e9e9;
  height: 100%;
  opacity: 0;
}
.ant-steps.ant-steps-small .ant-steps-head-inner {
  border: 1px solid rgba(0, 0, 0, 0.25);
  width: 18px;
  height: 18px;
  line-height: 15px;
  text-align: center;
  border-radius: 18px;
  font-size: 12px;
  margin-right: 10px;
}
.ant-steps.ant-steps-small .ant-steps-head-inner > .ant-steps-icon.anticon {
  display: inline-block;
  font-size: 12px;
  font-size: 9px \9;
  transform: scale(0.75) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
  top: 0;
}
:root .ant-steps.ant-steps-small .ant-steps-head-inner > .ant-steps-icon.anticon {
  filter: none;
}
:root .ant-steps.ant-steps-small .ant-steps-head-inner > .ant-steps-icon.anticon {
  font-size: 12px;
}
.ant-steps.ant-steps-small .ant-steps-main {
  margin-top: 0;
}
.ant-steps.ant-steps-small .ant-steps-title {
  font-size: 12px;
  line-height: 18px;
  color: rgba(0, 0, 0, 0.65);
  font-weight: bold;
}
.ant-steps.ant-steps-small .ant-steps-description {
  font-size: 12px;
  color: rgba(0, 0, 0, 0.43);
}
.ant-steps.ant-steps-small .ant-steps-tail {
  top: 8px;
  padding: 0 8px;
}
.ant-steps.ant-steps-small .ant-steps-tail > i {
  height: 1px;
  border-radius: 1px;
  width: 100%;
}
.ant-steps.ant-steps-small .ant-steps-custom .ant-steps-head-inner > .ant-steps-icon {
  font-size: 18px;
  width: 18px;
  height: 18px;
}
.ant-steps-vertical > .ant-steps-item {
  display: block;
}
.ant-steps-vertical > .ant-steps-item > .ant-steps-tail {
  position: absolute;
  left: 13px;
  top: 0;
  height: 100%;
  width: 1px;
  padding: 30px 0 4px;
}
.ant-steps-vertical > .ant-steps-item > .ant-steps-tail > i {
  height: 100%;
  width: 1px;
}
.ant-steps-vertical > .ant-steps-item > .ant-steps-tail > i:after {
  height: 0;
  width: 100%;
}
.ant-steps-vertical .ant-steps-status-finish .ant-steps-tail > i:after {
  height: 100%;
}
.ant-steps-vertical .ant-steps-head {
  float: left;
}
.ant-steps-vertical .ant-steps-head-inner {
  margin-right: 16px;
}
.ant-steps-vertical .ant-steps-main {
  min-height: 47px;
  overflow: hidden;
  display: block;
}
.ant-steps-vertical .ant-steps-main .ant-steps-title {
  line-height: 26px;
}
.ant-steps-vertical .ant-steps-main .ant-steps-description {
  padding-bottom: 12px;
}
.ant-steps-vertical.ant-steps-small .ant-steps-tail {
  position: absolute;
  left: 9px;
  top: 0;
  padding: 22px 0 4px;
}
.ant-steps-vertical.ant-steps-small .ant-steps-tail > i {
  height: 100%;
}
.ant-steps-vertical.ant-steps-small .ant-steps-title {
  line-height: 18px;
}
.ant-steps-horizontal.ant-steps-hidden {
  visibility: hidden;
}
.ant-steps-horizontal .ant-steps-description {
  max-width: 120px;
}
.ant-steps-horizontal .ant-steps-item:not(:first-child) .ant-steps-head {
  padding-left: 10px;
  margin-left: -10px;
}
.ant-steps-dot .ant-steps-item .ant-steps-step {
  display: inline-block;
  text-align: center;
  width: 120px;
}
.ant-steps-dot .ant-steps-item:not(:first-child) .ant-steps-head {
  margin-left: 0;
  padding-left: 0;
}
.ant-steps-dot .ant-steps-tail {
  margin: 0 0 0 60px;
  padding: 0;
  width: 100%;
  top: 1px;
}
.ant-steps-dot .ant-steps-tail > i {
  height: 3px;
}
.ant-steps-dot .ant-steps-head {
  display: inline-block;
  padding-right: 0;
}
.ant-steps-dot .ant-steps-head-inner {
  margin: 0 auto;
  width: 5px;
  height: 5px;
  line-height: 5px;
  border: 0;
}
.ant-steps-dot .ant-steps-head-inner .ant-steps-icon-dot {
  float: left;
  width: 100%;
  height: 100%;
  border-radius: 2.5px;
  position: relative;
}
.ant-steps-dot .ant-steps-head-inner .ant-steps-icon-dot:after {
  content: '';
  background: rgba(255, 255, 255, 0.001);
  width: 40px;
  height: 24px;
  position: absolute;
  top: -8px;
  left: -16px;
}
.ant-steps-dot .ant-steps-head-inner .ant-steps-icon-dot:hover {
  transform: scale(1.3);
}
.ant-steps-dot .ant-steps-main {
  display: block;
  margin-top: 10px;
}
.ant-steps-dot .ant-steps-main .ant-steps-title {
  padding-right: 0;
  background-color: transparent;
}
.ant-steps-dot .ant-steps-status-process .ant-steps-head {
  top: -1px;
}
.ant-steps-dot .ant-steps-status-process .ant-steps-head-inner {
  width: 7px;
  height: 7px;
  line-height: 7px;
}
.ant-steps-dot .ant-steps-status-process .ant-steps-head-inner .ant-steps-icon-dot {
  border-radius: 3.5px;
}
.ant-steps-dot.ant-steps-vertical .ant-steps-tail {
  left: 2px;
  height: 100%;
  padding: 0;
  top: 15px;
}
.ant-steps-dot.ant-steps-vertical .ant-steps-tail > i {
  height: 100%;
  width: 3px;
}
.ant-steps-dot.ant-steps-vertical .ant-steps-head {
  top: 12px;
  left: 1px;
}
.ant-steps-dot.ant-steps-vertical .ant-steps-status-process .ant-steps-head {
  left: 0;
}
@keyframes tailEffect {
  to {
    box-shadow: 0 0 3px 3px transparent;
  }
}
`
                ]
            },] },
];
/**
 * @nocollapse
 */
NzStepsComponent.ctorParameters = () => [
    { type: NzStepConnectService, },
];
NzStepsComponent.propDecorators = {
    'nzDirection': [{ type: Input },],
    'nzSize': [{ type: Input },],
    'nzProgressDot': [{ type: Input },],
    'nzStatus': [{ type: Input },],
    'nzCurrent': [{ type: Input },],
};

class NzStepComponent {
    /**
     * @param {?} erf
     * @param {?} nzStepConnectService
     * @param {?} _renderer
     */
    constructor(erf, nzStepConnectService, _renderer) {
        this.erf = erf;
        this.nzStepConnectService = nzStepConnectService;
        this._renderer = _renderer;
        this._status = 'wait';
        this._ifCustomStatus = false;
        this._last = false;
        this._processDot = false;
        this._direction = 'horizontal';
        this._el = erf.nativeElement;
    }
    /**
     * @param {?} status
     * @return {?}
     */
    set nzStatus(status) {
        this._status = status;
        this._ifCustomStatus = true;
    }
    /**
     * @return {?}
     */
    get nzStatus() {
        return this._status;
    }
    /**
     * @return {?}
     */
    get _current() {
        return this._currentIndex;
    }
    /**
     * @param {?} current
     * @return {?}
     */
    set _current(current) {
        this._currentIndex = current;
        if (!this._ifCustomStatus) {
            if (current > this.index) {
                this._status = 'finish';
            }
            else if (current === this.index) {
                if (this.nzStepConnectService.errorIndex) {
                    this._status = 'error';
                }
                else {
                    this._status = 'process';
                }
            }
            else {
                this._status = 'wait';
            }
        }
        this.initClassMap();
    }
    ;
    /**
     * @return {?}
     */
    initClassMap() {
        this.stepStatusClass = {
            ['ant-steps-item']: true,
            [`ant-steps-status-wait`]: this._status === 'wait',
            [`ant-steps-status-process`]: this._status === 'process',
            [`ant-steps-status-finish`]: this._status === 'finish',
            [`ant-steps-status-error`]: this._status === 'error',
            ['ant-steps-item-last']: this._last,
            ['ant-steps-custom']: !!this.nzIcon,
            ['ant-steps-next-error']: (this.nzStepConnectService.errorIndex === 'error' && this._current === this.index - 1)
        };
        for (const /** @type {?} */ i in this.stepStatusClass) {
            if (this.stepStatusClass[i]) {
                this._renderer.addClass(this._el, i);
            }
            else {
                this._renderer.removeClass(this._el, i);
            }
        }
    }
    /**
     * @return {?}
     */
    init() {
        // 记录个数
        this.index = this.nzStepConnectService.itemIndex;
        this._processDot = this.nzStepConnectService.processDot;
        this._direction = this.nzStepConnectService.direction;
        this._current = this.nzStepConnectService.current;
        this._processDotEventSubscription = this.nzStepConnectService.processDotEvent.subscribe(data => {
            this._processDot = data;
        });
        this._directionEventSubscription = this.nzStepConnectService.directionEvent.subscribe(data => {
            this._direction = data;
        });
        this._currentEventSubscription = this.nzStepConnectService.currentEvent.subscribe(data => {
            this._current = data;
        });
        this._errorIndexObjectSubscription = this.nzStepConnectService.errorIndexObject.subscribe(data => {
            if (this._current === this.index) {
                this._status = data;
            }
        });
        this.initClassMap();
        this.nzStepConnectService.itemIndex += 1;
        /** judge if last step */
        if (!this.erf.nativeElement.nextElementSibling) {
            this._last = true;
        }
        else {
            this.nzStepConnectService.lastElementSizeEvent.subscribe(data => {
                const { count, width } = data;
                this._renderer.setStyle(this.erf.nativeElement, 'width', (100 / (count - 1)) + '%');
                this._renderer.setStyle(this.erf.nativeElement, 'margin-right', (-(width / (count - 1) + 5)) + 'px');
                if (this._direction === 'horizontal') {
                    this._renderer.setStyle(this._stepsTail.nativeElement, 'padding-right', ((width / (count - 1) + 5)) + 'px');
                }
            });
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.init();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this._last) {
            setTimeout(_ => {
                this.nzStepConnectService.lastElementSizeEvent.next({
                    count: this.erf.nativeElement.parentElement.childElementCount,
                    width: this.erf.nativeElement.firstElementChild.offsetWidth
                });
            });
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this._processDotEventSubscription) {
            this._processDotEventSubscription.unsubscribe();
        }
        if (this._directionEventSubscription) {
            this._directionEventSubscription.unsubscribe();
        }
        if (this._currentEventSubscription) {
            this._currentEventSubscription.unsubscribe();
        }
        if (this._errorIndexObjectSubscription) {
            this._errorIndexObjectSubscription.unsubscribe();
        }
    }
}
NzStepComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-step',
                encapsulation: ViewEncapsulation.None,
                template: `
    <div class="ant-steps-tail" #stepsTail *ngIf="_last !== true">
      <i></i>
    </div>
    <div class="ant-steps-step">
      <div class="ant-steps-head">
        <div class="ant-steps-head-inner">
          <ng-template [ngIf]="!_processDot">
            <span class="ant-steps-icon anticon anticon-check" *ngIf="_status === 'finish' && !nzIcon"></span>
            <span class="ant-steps-icon anticon anticon-cross" *ngIf="_status === 'error'"></span>
            <span class="ant-steps-icon" *ngIf="(_status === 'process' || _status === 'wait') && !nzIcon">{{index + 1}}</span>
            <span class="ant-steps-icon" *ngIf="nzIcon">
            <ng-template [ngTemplateOutlet]="nzIcon"></ng-template>
          </span>
          </ng-template>
          <ng-template [ngIf]="_processDot">
            <span class="ant-steps-icon">
              <span class="ant-steps-icon-dot"></span>
            </span>
          </ng-template>
        </div>
      </div>
      <div class="ant-steps-main">
        <div class="ant-steps-title">{{nzTitle}}</div>
        <div class="ant-steps-description">{{nzDescription}}</div>
      </div>
    </div>
  `,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-steps {
  font-size: 0;
  line-height: 1.5;
}
.ant-steps .ant-steps-item {
  position: relative;
  display: inline-block;
  vertical-align: top;
}
.ant-steps .ant-steps-item.ant-steps-status-wait .ant-steps-head-inner {
  border-color: rgba(0, 0, 0, 0.25);
  background-color: #fff;
}
.ant-steps .ant-steps-item.ant-steps-status-wait .ant-steps-head-inner > .ant-steps-icon {
  color: rgba(0, 0, 0, 0.25);
}
.ant-steps .ant-steps-item.ant-steps-status-wait .ant-steps-head-inner > .ant-steps-icon .ant-steps-icon-dot {
  background: rgba(0, 0, 0, 0.25);
}
.ant-steps .ant-steps-item.ant-steps-status-wait .ant-steps-title {
  color: rgba(0, 0, 0, 0.43);
}
.ant-steps .ant-steps-item.ant-steps-status-wait .ant-steps-description {
  color: rgba(0, 0, 0, 0.43);
}
.ant-steps .ant-steps-item.ant-steps-status-wait .ant-steps-tail > i {
  background-color: #e9e9e9;
}
.ant-steps .ant-steps-item.ant-steps-status-process .ant-steps-head-inner {
  border-color: #3FCE9E;
  background-color: #3FCE9E;
}
.ant-steps .ant-steps-item.ant-steps-status-process .ant-steps-head-inner > .ant-steps-icon {
  color: #fff;
}
.ant-steps .ant-steps-item.ant-steps-status-process .ant-steps-head-inner > .ant-steps-icon .ant-steps-icon-dot {
  background: #3FCE9E;
}
.ant-steps .ant-steps-item.ant-steps-status-process .ant-steps-title {
  color: rgba(0, 0, 0, 0.65);
}
.ant-steps .ant-steps-item.ant-steps-status-process .ant-steps-description {
  color: rgba(0, 0, 0, 0.65);
}
.ant-steps .ant-steps-item.ant-steps-status-process .ant-steps-tail > i {
  background-color: #e9e9e9;
}
.ant-steps .ant-steps-item.ant-steps-status-finish .ant-steps-head-inner {
  border-color: #3FCE9E;
  background-color: #fff;
}
.ant-steps .ant-steps-item.ant-steps-status-finish .ant-steps-head-inner > .ant-steps-icon {
  color: #3FCE9E;
}
.ant-steps .ant-steps-item.ant-steps-status-finish .ant-steps-head-inner > .ant-steps-icon .ant-steps-icon-dot {
  background: #3FCE9E;
}
.ant-steps .ant-steps-item.ant-steps-status-finish .ant-steps-tail > i:after {
  width: 100%;
  background: #3FCE9E;
  transition: all .6s;
  opacity: 1;
  box-shadow: 0 0 0 0 #3FCE9E;
  animation: tailEffect .4s;
}
.ant-steps .ant-steps-item.ant-steps-status-finish .ant-steps-title {
  color: rgba(0, 0, 0, 0.43);
}
.ant-steps .ant-steps-item.ant-steps-status-finish .ant-steps-description {
  color: rgba(0, 0, 0, 0.43);
}
.ant-steps .ant-steps-item.ant-steps-status-error .ant-steps-head-inner {
  border-color: #f04134;
  background-color: #fff;
}
.ant-steps .ant-steps-item.ant-steps-status-error .ant-steps-head-inner > .ant-steps-icon {
  color: #f04134;
}
.ant-steps .ant-steps-item.ant-steps-status-error .ant-steps-head-inner > .ant-steps-icon .ant-steps-icon-dot {
  background: #f04134;
}
.ant-steps .ant-steps-item.ant-steps-status-error .ant-steps-title {
  color: #f04134;
}
.ant-steps .ant-steps-item.ant-steps-status-error .ant-steps-description {
  color: #f04134;
}
.ant-steps .ant-steps-item.ant-steps-status-error .ant-steps-tail > i {
  background-color: #e9e9e9;
}
.ant-steps .ant-steps-item.ant-steps-next-error .ant-steps-tail > i,
.ant-steps .ant-steps-item.ant-steps-next-error .ant-steps-tail > i:after {
  background-color: #f04134;
}
.ant-steps .ant-steps-item.ant-steps-custom .ant-steps-head-inner {
  background: none;
  border: 0;
  width: auto;
  height: auto;
}
.ant-steps .ant-steps-item.ant-steps-custom .ant-steps-head-inner > .ant-steps-icon {
  font-size: 26px;
  width: 26px;
  height: 26px;
}
.ant-steps .ant-steps-item.ant-steps-custom.ant-steps-status-process .ant-steps-head-inner > .ant-steps-icon {
  color: #3FCE9E;
}
.ant-steps .ant-steps-head,
.ant-steps .ant-steps-main {
  position: relative;
  display: inline-block;
  vertical-align: top;
}
.ant-steps .ant-steps-head {
  background: #fff;
}
.ant-steps .ant-steps-head-inner {
  display: block;
  border: 1px solid rgba(0, 0, 0, 0.25);
  width: 26px;
  height: 26px;
  line-height: 23px;
  text-align: center;
  border-radius: 26px;
  font-size: 14px;
  margin-right: 8px;
  transition: background-color 0.3s ease, border-color 0.3s ease;
}
.ant-steps .ant-steps-head-inner > .ant-steps-icon {
  line-height: 1;
  color: #3FCE9E;
  position: relative;
}
.ant-steps .ant-steps-head-inner > .ant-steps-icon.anticon {
  font-size: 12px;
}
.ant-steps .ant-steps-head-inner > .ant-steps-icon.anticon-cross,
.ant-steps .ant-steps-head-inner > .ant-steps-icon.anticon-check {
  font-weight: bold;
}
.ant-steps .ant-steps-title {
  font-size: 14px;
  line-height: 26px;
  color: rgba(0, 0, 0, 0.65);
  font-weight: bold;
  background-color: #fff;
  display: inline-block;
  padding-right: 10px;
}
.ant-steps .ant-steps-title > a:first-child:last-child {
  color: rgba(0, 0, 0, 0.65);
}
.ant-steps .ant-steps-item:last-child .ant-steps-title {
  padding-right: 0;
  width: 100%;
}
.ant-steps .ant-steps-item:last-child .ant-steps-tail {
  display: none;
}
.ant-steps .ant-steps-description {
  font-size: 12px;
  color: rgba(0, 0, 0, 0.43);
}
.ant-steps .ant-steps-tail {
  position: absolute;
  left: 0;
  width: 100%;
  top: 13px;
  padding: 0 10px;
}
.ant-steps .ant-steps-tail > i {
  display: inline-block;
  vertical-align: top;
  background: #e9e9e9;
  height: 1px;
  border-radius: 1px;
  width: 100%;
  position: relative;
}
.ant-steps .ant-steps-tail > i:after {
  position: absolute;
  content: '';
  top: 0;
  width: 0;
  background: #e9e9e9;
  height: 100%;
  opacity: 0;
}
.ant-steps.ant-steps-small .ant-steps-head-inner {
  border: 1px solid rgba(0, 0, 0, 0.25);
  width: 18px;
  height: 18px;
  line-height: 15px;
  text-align: center;
  border-radius: 18px;
  font-size: 12px;
  margin-right: 10px;
}
.ant-steps.ant-steps-small .ant-steps-head-inner > .ant-steps-icon.anticon {
  display: inline-block;
  font-size: 12px;
  font-size: 9px \9;
  transform: scale(0.75) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
  top: 0;
}
:root .ant-steps.ant-steps-small .ant-steps-head-inner > .ant-steps-icon.anticon {
  filter: none;
}
:root .ant-steps.ant-steps-small .ant-steps-head-inner > .ant-steps-icon.anticon {
  font-size: 12px;
}
.ant-steps.ant-steps-small .ant-steps-main {
  margin-top: 0;
}
.ant-steps.ant-steps-small .ant-steps-title {
  font-size: 12px;
  line-height: 18px;
  color: rgba(0, 0, 0, 0.65);
  font-weight: bold;
}
.ant-steps.ant-steps-small .ant-steps-description {
  font-size: 12px;
  color: rgba(0, 0, 0, 0.43);
}
.ant-steps.ant-steps-small .ant-steps-tail {
  top: 8px;
  padding: 0 8px;
}
.ant-steps.ant-steps-small .ant-steps-tail > i {
  height: 1px;
  border-radius: 1px;
  width: 100%;
}
.ant-steps.ant-steps-small .ant-steps-custom .ant-steps-head-inner > .ant-steps-icon {
  font-size: 18px;
  width: 18px;
  height: 18px;
}
.ant-steps-vertical > .ant-steps-item {
  display: block;
}
.ant-steps-vertical > .ant-steps-item > .ant-steps-tail {
  position: absolute;
  left: 13px;
  top: 0;
  height: 100%;
  width: 1px;
  padding: 30px 0 4px;
}
.ant-steps-vertical > .ant-steps-item > .ant-steps-tail > i {
  height: 100%;
  width: 1px;
}
.ant-steps-vertical > .ant-steps-item > .ant-steps-tail > i:after {
  height: 0;
  width: 100%;
}
.ant-steps-vertical .ant-steps-status-finish .ant-steps-tail > i:after {
  height: 100%;
}
.ant-steps-vertical .ant-steps-head {
  float: left;
}
.ant-steps-vertical .ant-steps-head-inner {
  margin-right: 16px;
}
.ant-steps-vertical .ant-steps-main {
  min-height: 47px;
  overflow: hidden;
  display: block;
}
.ant-steps-vertical .ant-steps-main .ant-steps-title {
  line-height: 26px;
}
.ant-steps-vertical .ant-steps-main .ant-steps-description {
  padding-bottom: 12px;
}
.ant-steps-vertical.ant-steps-small .ant-steps-tail {
  position: absolute;
  left: 9px;
  top: 0;
  padding: 22px 0 4px;
}
.ant-steps-vertical.ant-steps-small .ant-steps-tail > i {
  height: 100%;
}
.ant-steps-vertical.ant-steps-small .ant-steps-title {
  line-height: 18px;
}
.ant-steps-horizontal.ant-steps-hidden {
  visibility: hidden;
}
.ant-steps-horizontal .ant-steps-description {
  max-width: 120px;
}
.ant-steps-horizontal .ant-steps-item:not(:first-child) .ant-steps-head {
  padding-left: 10px;
  margin-left: -10px;
}
.ant-steps-dot .ant-steps-item .ant-steps-step {
  display: inline-block;
  text-align: center;
  width: 120px;
}
.ant-steps-dot .ant-steps-item:not(:first-child) .ant-steps-head {
  margin-left: 0;
  padding-left: 0;
}
.ant-steps-dot .ant-steps-tail {
  margin: 0 0 0 60px;
  padding: 0;
  width: 100%;
  top: 1px;
}
.ant-steps-dot .ant-steps-tail > i {
  height: 3px;
}
.ant-steps-dot .ant-steps-head {
  display: inline-block;
  padding-right: 0;
}
.ant-steps-dot .ant-steps-head-inner {
  margin: 0 auto;
  width: 5px;
  height: 5px;
  line-height: 5px;
  border: 0;
}
.ant-steps-dot .ant-steps-head-inner .ant-steps-icon-dot {
  float: left;
  width: 100%;
  height: 100%;
  border-radius: 2.5px;
  position: relative;
}
.ant-steps-dot .ant-steps-head-inner .ant-steps-icon-dot:after {
  content: '';
  background: rgba(255, 255, 255, 0.001);
  width: 40px;
  height: 24px;
  position: absolute;
  top: -8px;
  left: -16px;
}
.ant-steps-dot .ant-steps-head-inner .ant-steps-icon-dot:hover {
  transform: scale(1.3);
}
.ant-steps-dot .ant-steps-main {
  display: block;
  margin-top: 10px;
}
.ant-steps-dot .ant-steps-main .ant-steps-title {
  padding-right: 0;
  background-color: transparent;
}
.ant-steps-dot .ant-steps-status-process .ant-steps-head {
  top: -1px;
}
.ant-steps-dot .ant-steps-status-process .ant-steps-head-inner {
  width: 7px;
  height: 7px;
  line-height: 7px;
}
.ant-steps-dot .ant-steps-status-process .ant-steps-head-inner .ant-steps-icon-dot {
  border-radius: 3.5px;
}
.ant-steps-dot.ant-steps-vertical .ant-steps-tail {
  left: 2px;
  height: 100%;
  padding: 0;
  top: 15px;
}
.ant-steps-dot.ant-steps-vertical .ant-steps-tail > i {
  height: 100%;
  width: 3px;
}
.ant-steps-dot.ant-steps-vertical .ant-steps-head {
  top: 12px;
  left: 1px;
}
.ant-steps-dot.ant-steps-vertical .ant-steps-status-process .ant-steps-head {
  left: 0;
}
@keyframes tailEffect {
  to {
    box-shadow: 0 0 3px 3px transparent;
  }
}
`,
                    `.ant-steps-horizontal nz-step:not(:first-child) .ant-steps-head {
  padding-left: 10px;
  margin-left: -10px;
}
nz-step {
  display: block;
}
`
                ]
            },] },
];
/**
 * @nocollapse
 */
NzStepComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: NzStepConnectService, },
    { type: Renderer2, },
];
NzStepComponent.propDecorators = {
    'nzIcon': [{ type: ContentChild, args: ['nzIcon',] },],
    '_stepsTail': [{ type: ViewChild, args: ['stepsTail',] },],
    'nzStatus': [{ type: Input },],
    'nzTitle': [{ type: Input },],
    'nzDescription': [{ type: Input },],
};

class NzStepsModule {
}
NzStepsModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                exports: [NzStepsComponent, NzStepComponent],
                declarations: [NzStepsComponent, NzStepComponent],
                providers: [NzStepConnectService]
            },] },
];
/**
 * @nocollapse
 */
NzStepsModule.ctorParameters = () => [];

class NzDropDownButtonComponent extends NzDropDownComponent {
    constructor() {
        super(...arguments);
        this.nzDisable = false;
        this.nzSize = 'default';
        this.nzType = 'default';
        this.nzClick = new EventEmitter();
        this._onVisibleChange = (visible) => {
            if (this.nzDisable) {
                return;
            }
            if (visible) {
                if (!this._triggerWidth) {
                    this._setTriggerWidth();
                }
            }
            this.nzVisible = visible;
            this._changeDetector.markForCheck();
        };
    }
    /**
     * rewrite afterViewInit hook
     * @return {?}
     */
    ngAfterViewInit() {
        this._startSubscribe(this.nzVisibleChange.asObservable());
    }
}
NzDropDownButtonComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-dropdown-button',
                encapsulation: ViewEncapsulation.None,
                animations: [
                    DropDownAnimation
                ],
                template: `
    <div class="ant-btn-group ant-dropdown-button" nz-dropdown>
      <button
        type="button"
        nz-button
        [disabled]="nzDisable"
        [nzType]="nzType"
        [nzSize]="nzSize"
        (click)="nzClick.emit($event)">
        <span><ng-content></ng-content></span></button><button
        [nzType]="nzType"
        [nzSize]="nzSize"
        nz-button type="button"
        class="ant-dropdown-trigger"
        [disabled]="nzDisable"
        (click)="_onClickEvent()"
        (mouseenter)="_onMouseEnterEvent($event)"
        (mouseleave)="_onMouseLeaveEvent($event)">
        <i class="anticon anticon-down"></i></button>
    </div>
    <ng-template
      nz-connected-overlay
      [hasBackdrop]="_hasBackdrop"
      [positions]="_positions"
      [origin]="_nzOrigin"
      (backdropClick)="_hide()"
      (detach)="_hide()"
      [minWidth]="_triggerWidth"
      (positionChange)="_onPositionChange($event)"
      [open]="nzVisible">
      <div
        class="{{'ant-dropdown ant-dropdown-placement-'+nzPlacement}}"
        [@dropDownAnimation]="_dropDownPosition"
        (mouseenter)="_onMouseEnterEvent($event)"
        (mouseleave)="_onMouseLeaveEvent($event)"
        [style.minWidth.px]="_triggerWidth"
        (click)="_clickDropDown($event)">
        <ng-content select="[nz-menu]"></ng-content>
      </div>
    </ng-template>    `,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-dropdown {
  position: absolute;
  left: -9999px;
  top: -9999px;
  z-index: 1050;
  display: block;
  font-size: 12px;
  font-weight: normal;
  line-height: 1.5;
}
.ant-dropdown-wrap {
  position: relative;
}
.ant-dropdown-wrap .ant-btn > .anticon-down {
  display: inline-block;
  font-size: 12px;
  font-size: 10px \9;
  transform: scale(0.83333333) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
}
:root .ant-dropdown-wrap .ant-btn > .anticon-down {
  filter: none;
}
:root .ant-dropdown-wrap .ant-btn > .anticon-down {
  font-size: 12px;
}
.ant-dropdown-wrap .anticon-down:before {
  transition: transform 0.2s ease;
}
.ant-dropdown-wrap-open .anticon-down:before {
  transform: rotate(180deg);
}
.ant-dropdown-hidden,
.ant-dropdown-menu-hidden {
  display: none;
}
.ant-dropdown-menu {
  outline: none;
  position: relative;
  list-style-type: none;
  padding: 0;
  margin: 0;
  text-align: left;
  background-color: #fff;
  border-radius: 4px;
  box-shadow: 0 1px 6px rgba(0, 0, 0, 0.2);
  background-clip: padding-box;
}
.ant-dropdown-menu-item,
.ant-dropdown-menu-submenu-title {
  padding: 7px 8px;
  margin: 0;
  clear: both;
  font-size: 12px;
  font-weight: normal;
  color: rgba(0, 0, 0, 0.65);
  white-space: nowrap;
  cursor: pointer;
  transition: all .3s;
}
.ant-dropdown-menu-item > a,
.ant-dropdown-menu-submenu-title > a {
  color: rgba(0, 0, 0, 0.65);
  display: block;
  padding: 7px 8px;
  margin: -7px -8px;
  transition: all .3s;
}
.ant-dropdown-menu-item > a:focus,
.ant-dropdown-menu-submenu-title > a:focus {
  text-decoration: none;
}
.ant-dropdown-menu-item-selected,
.ant-dropdown-menu-submenu-title-selected,
.ant-dropdown-menu-item-selected > a,
.ant-dropdown-menu-submenu-title-selected > a {
  color: #3FCE9E;
  background-color: #f0fbf7;
}
.ant-dropdown-menu-item:hover,
.ant-dropdown-menu-submenu-title:hover {
  background-color: #f0fbf7;
}
.ant-dropdown-menu-item-disabled,
.ant-dropdown-menu-submenu-title-disabled {
  color: rgba(0, 0, 0, 0.25);
  cursor: not-allowed;
}
.ant-dropdown-menu-item-disabled:hover,
.ant-dropdown-menu-submenu-title-disabled:hover {
  color: rgba(0, 0, 0, 0.25);
  background-color: #fff;
  cursor: not-allowed;
}
.ant-dropdown-menu-item:first-child,
.ant-dropdown-menu-submenu-title:first-child,
.ant-dropdown-menu-item:first-child > a,
.ant-dropdown-menu-submenu-title:first-child > a {
  border-radius: 4px 4px 0 0;
}
.ant-dropdown-menu-item:last-child,
.ant-dropdown-menu-submenu-title:last-child,
.ant-dropdown-menu-item:last-child > a,
.ant-dropdown-menu-submenu-title:last-child > a {
  border-radius: 0 0 4px 4px;
}
.ant-dropdown-menu-item:only-child,
.ant-dropdown-menu-submenu-title:only-child,
.ant-dropdown-menu-item:only-child > a,
.ant-dropdown-menu-submenu-title:only-child > a {
  border-radius: 4px;
}
.ant-dropdown-menu-item-divider,
.ant-dropdown-menu-submenu-title-divider {
  height: 1px;
  overflow: hidden;
  background-color: #e9e9e9;
  line-height: 0;
}
.ant-dropdown-menu-submenu-title:after {
  font-family: "anticon" !important;
  position: absolute;
  content: "\\e61f";
  right: 8px;
  color: rgba(0, 0, 0, 0.43);
  display: inline-block;
  font-size: 12px;
  font-size: 10px \9;
  transform: scale(0.83333333) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
}
:root .ant-dropdown-menu-submenu-title:after {
  filter: none;
}
:root .ant-dropdown-menu-submenu-title:after {
  font-size: 12px;
}
.ant-dropdown-menu-submenu-vertical {
  position: relative;
}
.ant-dropdown-menu-submenu-vertical > .ant-dropdown-menu {
  top: 0;
  left: 100%;
  position: absolute;
  min-width: 100%;
  margin-left: 4px;
  transform-origin: 0 0;
}
.ant-dropdown-menu-submenu.ant-dropdown-menu-submenu-disabled .ant-dropdown-menu-submenu-title,
.ant-dropdown-menu-submenu.ant-dropdown-menu-submenu-disabled .ant-dropdown-menu-submenu-title:after {
  color: rgba(0, 0, 0, 0.25);
}
.ant-dropdown-menu-submenu:first-child .ant-dropdown-menu-submenu-title {
  border-radius: 4px 4px 0 0;
}
.ant-dropdown-menu-submenu:last-child .ant-dropdown-menu-submenu-title {
  border-radius: 0 0 4px 4px;
}
.ant-dropdown.slide-down-enter.slide-down-enter-active.ant-dropdown-placement-bottomLeft,
.ant-dropdown.slide-down-appear.slide-down-appear-active.ant-dropdown-placement-bottomLeft,
.ant-dropdown.slide-down-enter.slide-down-enter-active.ant-dropdown-placement-bottomCenter,
.ant-dropdown.slide-down-appear.slide-down-appear-active.ant-dropdown-placement-bottomCenter,
.ant-dropdown.slide-down-enter.slide-down-enter-active.ant-dropdown-placement-bottomRight,
.ant-dropdown.slide-down-appear.slide-down-appear-active.ant-dropdown-placement-bottomRight {
  animation-name: antSlideUpIn;
}
.ant-dropdown.slide-up-enter.slide-up-enter-active.ant-dropdown-placement-topLeft,
.ant-dropdown.slide-up-appear.slide-up-appear-active.ant-dropdown-placement-topLeft,
.ant-dropdown.slide-up-enter.slide-up-enter-active.ant-dropdown-placement-topCenter,
.ant-dropdown.slide-up-appear.slide-up-appear-active.ant-dropdown-placement-topCenter,
.ant-dropdown.slide-up-enter.slide-up-enter-active.ant-dropdown-placement-topRight,
.ant-dropdown.slide-up-appear.slide-up-appear-active.ant-dropdown-placement-topRight {
  animation-name: antSlideDownIn;
}
.ant-dropdown.slide-down-leave.slide-down-leave-active.ant-dropdown-placement-bottomLeft,
.ant-dropdown.slide-down-leave.slide-down-leave-active.ant-dropdown-placement-bottomCenter,
.ant-dropdown.slide-down-leave.slide-down-leave-active.ant-dropdown-placement-bottomRight {
  animation-name: antSlideUpOut;
}
.ant-dropdown.slide-up-leave.slide-up-leave-active.ant-dropdown-placement-topLeft,
.ant-dropdown.slide-up-leave.slide-up-leave-active.ant-dropdown-placement-topCenter,
.ant-dropdown.slide-up-leave.slide-up-leave-active.ant-dropdown-placement-topRight {
  animation-name: antSlideDownOut;
}
.ant-dropdown-trigger .anticon-down,
.ant-dropdown-link .anticon-down {
  display: inline-block;
  font-size: 12px;
  font-size: 10px \9;
  transform: scale(0.83333333) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
}
:root .ant-dropdown-trigger .anticon-down,
:root .ant-dropdown-link .anticon-down {
  filter: none;
}
:root .ant-dropdown-trigger .anticon-down,
:root .ant-dropdown-link .anticon-down {
  font-size: 12px;
}
.ant-dropdown-button {
  white-space: nowrap;
}
.ant-dropdown-button.ant-btn-group > .ant-btn:last-child:not(:first-child) {
  padding-right: 8px;
}
.ant-dropdown-button .anticon-down {
  display: inline-block;
  font-size: 12px;
  font-size: 10px \9;
  transform: scale(0.83333333) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
}
:root .ant-dropdown-button .anticon-down {
  filter: none;
}
:root .ant-dropdown-button .anticon-down {
  font-size: 12px;
}
.ant-dropdown-menu-dark,
.ant-dropdown-menu-dark .ant-dropdown-menu {
  background: #404040;
}
.ant-dropdown-menu-dark .ant-dropdown-menu-item,
.ant-dropdown-menu-dark .ant-dropdown-menu-submenu-title,
.ant-dropdown-menu-dark .ant-dropdown-menu-item > a {
  color: rgba(255, 255, 255, 0.67);
}
.ant-dropdown-menu-dark .ant-dropdown-menu-item:after,
.ant-dropdown-menu-dark .ant-dropdown-menu-submenu-title:after,
.ant-dropdown-menu-dark .ant-dropdown-menu-item > a:after {
  color: rgba(255, 255, 255, 0.67);
}
.ant-dropdown-menu-dark .ant-dropdown-menu-item:hover,
.ant-dropdown-menu-dark .ant-dropdown-menu-submenu-title:hover,
.ant-dropdown-menu-dark .ant-dropdown-menu-item > a:hover {
  color: #fff;
  background: transparent;
}
.ant-dropdown-menu-dark .ant-dropdown-menu-item-selected,
.ant-dropdown-menu-dark .ant-dropdown-menu-item-selected:hover,
.ant-dropdown-menu-dark .ant-dropdown-menu-item-selected > a {
  background: #3FCE9E;
  color: #fff;
}
`,
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-dropdown {
  position: absolute;
  left: -9999px;
  top: -9999px;
  z-index: 1050;
  display: block;
  font-size: 12px;
  font-weight: normal;
  line-height: 1.5;
}
.ant-dropdown-wrap {
  position: relative;
}
.ant-dropdown-wrap .ant-btn > .anticon-down {
  display: inline-block;
  font-size: 12px;
  font-size: 10px \9;
  transform: scale(0.83333333) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
}
:root .ant-dropdown-wrap .ant-btn > .anticon-down {
  filter: none;
}
:root .ant-dropdown-wrap .ant-btn > .anticon-down {
  font-size: 12px;
}
.ant-dropdown-wrap .anticon-down:before {
  transition: transform 0.2s ease;
}
.ant-dropdown-wrap-open .anticon-down:before {
  transform: rotate(180deg);
}
.ant-dropdown-hidden,
.ant-dropdown-menu-hidden {
  display: none;
}
.ant-dropdown-menu {
  outline: none;
  position: relative;
  list-style-type: none;
  padding: 0;
  margin: 0;
  text-align: left;
  background-color: #fff;
  border-radius: 4px;
  box-shadow: 0 1px 6px rgba(0, 0, 0, 0.2);
  background-clip: padding-box;
}
.ant-dropdown-menu-item,
.ant-dropdown-menu-submenu-title {
  padding: 7px 8px;
  margin: 0;
  clear: both;
  font-size: 12px;
  font-weight: normal;
  color: rgba(0, 0, 0, 0.65);
  white-space: nowrap;
  cursor: pointer;
  transition: all .3s;
}
.ant-dropdown-menu-item > a,
.ant-dropdown-menu-submenu-title > a {
  color: rgba(0, 0, 0, 0.65);
  display: block;
  padding: 7px 8px;
  margin: -7px -8px;
  transition: all .3s;
}
.ant-dropdown-menu-item > a:focus,
.ant-dropdown-menu-submenu-title > a:focus {
  text-decoration: none;
}
.ant-dropdown-menu-item-selected,
.ant-dropdown-menu-submenu-title-selected,
.ant-dropdown-menu-item-selected > a,
.ant-dropdown-menu-submenu-title-selected > a {
  color: #3FCE9E;
  background-color: #f0fbf7;
}
.ant-dropdown-menu-item:hover,
.ant-dropdown-menu-submenu-title:hover {
  background-color: #f0fbf7;
}
.ant-dropdown-menu-item-disabled,
.ant-dropdown-menu-submenu-title-disabled {
  color: rgba(0, 0, 0, 0.25);
  cursor: not-allowed;
}
.ant-dropdown-menu-item-disabled:hover,
.ant-dropdown-menu-submenu-title-disabled:hover {
  color: rgba(0, 0, 0, 0.25);
  background-color: #fff;
  cursor: not-allowed;
}
.ant-dropdown-menu-item:first-child,
.ant-dropdown-menu-submenu-title:first-child,
.ant-dropdown-menu-item:first-child > a,
.ant-dropdown-menu-submenu-title:first-child > a {
  border-radius: 4px 4px 0 0;
}
.ant-dropdown-menu-item:last-child,
.ant-dropdown-menu-submenu-title:last-child,
.ant-dropdown-menu-item:last-child > a,
.ant-dropdown-menu-submenu-title:last-child > a {
  border-radius: 0 0 4px 4px;
}
.ant-dropdown-menu-item:only-child,
.ant-dropdown-menu-submenu-title:only-child,
.ant-dropdown-menu-item:only-child > a,
.ant-dropdown-menu-submenu-title:only-child > a {
  border-radius: 4px;
}
.ant-dropdown-menu-item-divider,
.ant-dropdown-menu-submenu-title-divider {
  height: 1px;
  overflow: hidden;
  background-color: #e9e9e9;
  line-height: 0;
}
.ant-dropdown-menu-submenu-title:after {
  font-family: "anticon" !important;
  position: absolute;
  content: "\\e61f";
  right: 8px;
  color: rgba(0, 0, 0, 0.43);
  display: inline-block;
  font-size: 12px;
  font-size: 10px \9;
  transform: scale(0.83333333) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
}
:root .ant-dropdown-menu-submenu-title:after {
  filter: none;
}
:root .ant-dropdown-menu-submenu-title:after {
  font-size: 12px;
}
.ant-dropdown-menu-submenu-vertical {
  position: relative;
}
.ant-dropdown-menu-submenu-vertical > .ant-dropdown-menu {
  top: 0;
  left: 100%;
  position: absolute;
  min-width: 100%;
  margin-left: 4px;
  transform-origin: 0 0;
}
.ant-dropdown-menu-submenu.ant-dropdown-menu-submenu-disabled .ant-dropdown-menu-submenu-title,
.ant-dropdown-menu-submenu.ant-dropdown-menu-submenu-disabled .ant-dropdown-menu-submenu-title:after {
  color: rgba(0, 0, 0, 0.25);
}
.ant-dropdown-menu-submenu:first-child .ant-dropdown-menu-submenu-title {
  border-radius: 4px 4px 0 0;
}
.ant-dropdown-menu-submenu:last-child .ant-dropdown-menu-submenu-title {
  border-radius: 0 0 4px 4px;
}
.ant-dropdown.slide-down-enter.slide-down-enter-active.ant-dropdown-placement-bottomLeft,
.ant-dropdown.slide-down-appear.slide-down-appear-active.ant-dropdown-placement-bottomLeft,
.ant-dropdown.slide-down-enter.slide-down-enter-active.ant-dropdown-placement-bottomCenter,
.ant-dropdown.slide-down-appear.slide-down-appear-active.ant-dropdown-placement-bottomCenter,
.ant-dropdown.slide-down-enter.slide-down-enter-active.ant-dropdown-placement-bottomRight,
.ant-dropdown.slide-down-appear.slide-down-appear-active.ant-dropdown-placement-bottomRight {
  animation-name: antSlideUpIn;
}
.ant-dropdown.slide-up-enter.slide-up-enter-active.ant-dropdown-placement-topLeft,
.ant-dropdown.slide-up-appear.slide-up-appear-active.ant-dropdown-placement-topLeft,
.ant-dropdown.slide-up-enter.slide-up-enter-active.ant-dropdown-placement-topCenter,
.ant-dropdown.slide-up-appear.slide-up-appear-active.ant-dropdown-placement-topCenter,
.ant-dropdown.slide-up-enter.slide-up-enter-active.ant-dropdown-placement-topRight,
.ant-dropdown.slide-up-appear.slide-up-appear-active.ant-dropdown-placement-topRight {
  animation-name: antSlideDownIn;
}
.ant-dropdown.slide-down-leave.slide-down-leave-active.ant-dropdown-placement-bottomLeft,
.ant-dropdown.slide-down-leave.slide-down-leave-active.ant-dropdown-placement-bottomCenter,
.ant-dropdown.slide-down-leave.slide-down-leave-active.ant-dropdown-placement-bottomRight {
  animation-name: antSlideUpOut;
}
.ant-dropdown.slide-up-leave.slide-up-leave-active.ant-dropdown-placement-topLeft,
.ant-dropdown.slide-up-leave.slide-up-leave-active.ant-dropdown-placement-topCenter,
.ant-dropdown.slide-up-leave.slide-up-leave-active.ant-dropdown-placement-topRight {
  animation-name: antSlideDownOut;
}
.ant-dropdown-trigger .anticon-down,
.ant-dropdown-link .anticon-down {
  display: inline-block;
  font-size: 12px;
  font-size: 10px \9;
  transform: scale(0.83333333) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
}
:root .ant-dropdown-trigger .anticon-down,
:root .ant-dropdown-link .anticon-down {
  filter: none;
}
:root .ant-dropdown-trigger .anticon-down,
:root .ant-dropdown-link .anticon-down {
  font-size: 12px;
}
.ant-dropdown-button {
  white-space: nowrap;
}
.ant-dropdown-button.ant-btn-group > .ant-btn:last-child:not(:first-child) {
  padding-right: 8px;
}
.ant-dropdown-button .anticon-down {
  display: inline-block;
  font-size: 12px;
  font-size: 10px \9;
  transform: scale(0.83333333) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
}
:root .ant-dropdown-button .anticon-down {
  filter: none;
}
:root .ant-dropdown-button .anticon-down {
  font-size: 12px;
}
.ant-dropdown-menu-dark,
.ant-dropdown-menu-dark .ant-dropdown-menu {
  background: #404040;
}
.ant-dropdown-menu-dark .ant-dropdown-menu-item,
.ant-dropdown-menu-dark .ant-dropdown-menu-submenu-title,
.ant-dropdown-menu-dark .ant-dropdown-menu-item > a {
  color: rgba(255, 255, 255, 0.67);
}
.ant-dropdown-menu-dark .ant-dropdown-menu-item:after,
.ant-dropdown-menu-dark .ant-dropdown-menu-submenu-title:after,
.ant-dropdown-menu-dark .ant-dropdown-menu-item > a:after {
  color: rgba(255, 255, 255, 0.67);
}
.ant-dropdown-menu-dark .ant-dropdown-menu-item:hover,
.ant-dropdown-menu-dark .ant-dropdown-menu-submenu-title:hover,
.ant-dropdown-menu-dark .ant-dropdown-menu-item > a:hover {
  color: #fff;
  background: transparent;
}
.ant-dropdown-menu-dark .ant-dropdown-menu-item-selected,
.ant-dropdown-menu-dark .ant-dropdown-menu-item-selected:hover,
.ant-dropdown-menu-dark .ant-dropdown-menu-item-selected > a {
  background: #3FCE9E;
  color: #fff;
}
nz-dropdown {
  position: relative;
  display: inline-block;
}
nz-dropdown-button {
  position: relative;
  display: inline-block;
}
.ant-dropdown {
  top: 100%;
  left: 0;
  position: relative;
  width: 100%;
  margin-top: 4px;
  margin-bottom: 4px;
}
`
                ]
            },] },
];
/**
 * @nocollapse
 */
NzDropDownButtonComponent.ctorParameters = () => [];
NzDropDownButtonComponent.propDecorators = {
    'nzDisable': [{ type: Input },],
    'nzSize': [{ type: Input },],
    'nzType': [{ type: Input },],
    'content': [{ type: ViewChild, args: ['content',] },],
    'nzClick': [{ type: Output },],
    '_nzOrigin': [{ type: ViewChild, args: [NzDropDownDirective,] },],
};

class NzSubMenuComponent {
    /**
     * @param {?} nzMenuComponent
     * @param {?} cd
     */
    constructor(nzMenuComponent, cd) {
        this.nzMenuComponent = nzMenuComponent;
        this.cd = cd;
        this.isInDropDown = false;
        this.level = 1;
        this._$mouseSubject = new Subject$1();
        this.nzOpen = false;
        this.nzOpenChange = new EventEmitter();
        this.nzMenuComponent.hasSubMenu = true;
        this.nzMenuComponent.subMenus.push(this);
    }
    /**
     * @return {?}
     */
    get subItemSelected() {
        return !!this.nzMenuComponent.menuItems.find(e => e.selected && e.nzSubMenuComponent === this);
    }
    /**
     * @return {?}
     */
    get submenuSelected() {
        return !!this.subMenus._results.find(e => e !== this && e.subItemSelected);
    }
    /**
     * @return {?}
     */
    clickSubMenuTitle() {
        if ((this.nzMenuComponent.nzMode === 'inline') || (!this.isInDropDown)) {
            this.nzOpen = !this.nzOpen;
            this.nzOpenChange.emit(this.nzOpen);
        }
    }
    /**
     * @return {?}
     */
    clickSubMenuDropDown() {
        if (this.isInDropDown || (this.nzMenuComponent.nzMode === 'vertical') || (this.nzMenuComponent.nzMode === 'horizontal')) {
            this._$mouseSubject.next(false);
            this.nzOpen = false;
            this.nzOpenChange.emit(this.nzOpen);
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onMouseEnterEvent(e) {
        if ((this.nzMenuComponent.nzMode === 'horizontal') || (this.nzMenuComponent.nzMode === 'vertical') || this.isInDropDown) {
            this._$mouseSubject.next(true);
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onMouseLeaveEvent(e) {
        if ((this.nzMenuComponent.nzMode === 'horizontal') || (this.nzMenuComponent.nzMode === 'vertical') || this.isInDropDown) {
            this._$mouseSubject.next(false);
        }
    }
    /**
     * @return {?}
     */
    get setDropDownSubmenuClass() {
        return this.isInDropDown;
    }
    /**
     * @return {?}
     */
    get setMenuSubmenuOpenClass() {
        return (!this.isInDropDown) && (this.nzOpen);
    }
    /**
     * @return {?}
     */
    get setDropDownVerticalClass() {
        return this.isInDropDown && (this.nzMenuComponent.nzMode === 'vertical');
    }
    /**
     * @return {?}
     */
    get setDropDownHorizontalClass() {
        return this.isInDropDown && (this.nzMenuComponent.nzMode === 'horizontal');
    }
    /**
     * @return {?}
     */
    get setMenuSubmenuClass() {
        return !this.isInDropDown;
    }
    /**
     * @return {?}
     */
    get setMenuSubmenuSelectedClass() {
        return this.submenuSelected || this.subItemSelected;
    }
    /**
     * @return {?}
     */
    get setMenuVerticalClass() {
        return (!this.isInDropDown) && (this.nzMenuComponent.nzMode === 'vertical');
    }
    /**
     * @return {?}
     */
    get setMenuHorizontalClass() {
        return (!this.isInDropDown) && (this.nzMenuComponent.nzMode === 'horizontal');
    }
    /**
     * @return {?}
     */
    get setMenuInlineClass() {
        return (!this.isInDropDown) && (this.nzMenuComponent.nzMode === 'inline');
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.isInDropDown = this.nzMenuComponent.isInDropDown;
        if (this.subMenus.length && (this.nzMenuComponent.nzMode === 'inline')) {
            this.subMenus.filter(x => x !== this).forEach(menu => {
                setTimeout(_ => {
                    menu.level = this.level + 1;
                });
            });
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        debounceTime$1.call(this._$mouseSubject, 300).subscribe((data) => {
            this.nzOpen = data;
        });
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._$mouseSubject.unsubscribe();
    }
}
NzSubMenuComponent.decorators = [
    { type: Component, args: [{
                selector: '[nz-submenu]',
                animations: [
                    trigger('fadeAnimation', [
                        state('*', style({ opacity: 1 })),
                        transition('* => void', [
                            animate(150, style({ opacity: 0, display: 'none' }))
                        ]),
                        transition('void => *', [
                            style({ opacity: '0' }),
                            animate(150, style({ opacity: 1 }))
                        ])
                    ])
                ],
                template: `
    <div
      [class.ant-dropdown-menu-submenu-title]="isInDropDown"
      [class.ant-menu-submenu-title]="!isInDropDown"
      (mouseenter)="onMouseEnterEvent($event)"
      (mouseleave)="onMouseLeaveEvent($event)"
      (click)="clickSubMenuTitle()"
      [style.paddingLeft.px]="(nzMenuComponent.nzMode === 'inline')?(level*24):null">
      <ng-content select="[title]"></ng-content>
    </div>
    <ul
      [class.ant-dropdown-menu]="isInDropDown"
      [@fadeAnimation]
      [class.ant-menu]="!isInDropDown"
      [class.ant-dropdown-menu-vertical]="isInDropDown"
      [class.ant-menu-vertical]="(!isInDropDown)&&(nzMenuComponent.nzMode!=='inline')"
      [class.ant-menu-inline]="(!isInDropDown)&&(nzMenuComponent.nzMode==='inline')"
      [class.ant-dropdown-menu-sub]="isInDropDown"
      [class.ant-menu-sub]="!isInDropDown"
      *ngIf="nzOpen"
      (click)="clickSubMenuDropDown()"
      (mouseleave)="onMouseLeaveEvent($event)"
      (mouseenter)="onMouseEnterEvent($event)">
      <ng-content></ng-content>
    </ul>
  `,
            },] },
];
/**
 * @nocollapse
 */
NzSubMenuComponent.ctorParameters = () => [
    { type: NzMenuComponent, },
    { type: ChangeDetectorRef, },
];
NzSubMenuComponent.propDecorators = {
    'subMenus': [{ type: ContentChildren, args: [NzSubMenuComponent,] },],
    'nzOpen': [{ type: Input },],
    'nzOpenChange': [{ type: Output },],
    'onMouseEnterEvent': [{ type: HostListener, args: ['mouseenter', ['$event'],] },],
    'onMouseLeaveEvent': [{ type: HostListener, args: ['mouseleave', ['$event'],] },],
    'setDropDownSubmenuClass': [{ type: HostBinding, args: ['class.ant-dropdown-menu-submenu',] },],
    'setMenuSubmenuOpenClass': [{ type: HostBinding, args: ['class.ant-menu-submenu-open',] },],
    'setDropDownVerticalClass': [{ type: HostBinding, args: ['class.ant-dropdown-menu-submenu-vertical',] },],
    'setDropDownHorizontalClass': [{ type: HostBinding, args: ['class.ant-dropdown-menu-submenu-horizontal',] },],
    'setMenuSubmenuClass': [{ type: HostBinding, args: ['class.ant-menu-submenu',] },],
    'setMenuSubmenuSelectedClass': [{ type: HostBinding, args: ['class.ant-menu-submenu-selected',] },],
    'setMenuVerticalClass': [{ type: HostBinding, args: ['class.ant-menu-submenu-vertical',] },],
    'setMenuHorizontalClass': [{ type: HostBinding, args: ['class.ant-menu-submenu-horizontal',] },],
    'setMenuInlineClass': [{ type: HostBinding, args: ['class.ant-menu-submenu-inline',] },],
};

const PADDING_BASE = 24;
class NzMenuItemComponent {
    /**
     * @param {?} _renderer
     * @param {?} cd
     * @param {?} nzMenuComponent
     * @param {?} nzSubMenuComponent
     * @param {?} hostElement
     */
    constructor(_renderer, cd, nzMenuComponent, nzSubMenuComponent, hostElement) {
        this._renderer = _renderer;
        this.cd = cd;
        this.nzMenuComponent = nzMenuComponent;
        this.nzSubMenuComponent = nzSubMenuComponent;
        this.hostElement = hostElement;
        this.level = 0;
        this.padding = null;
        this.isInDropDown = false;
        this.selected = false;
        this.nzDisable = false;
        this.nzMenuComponent.menuItems.push(this);
        /** store origin padding in padding */
        if (this.hostElement.nativeElement.style['padding-left']) {
            this.padding = parseInt(this.hostElement.nativeElement.style['padding-left'], 10);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzSelected(value) {
        this.selected = value;
        if (value) {
            this._renderer.addClass(this.hostElement.nativeElement, this.isInDropDown ? 'ant-dropdown-menu-item-selected' : 'ant-menu-item-selected');
        }
        else {
            this._renderer.removeClass(this.hostElement.nativeElement, this.isInDropDown ? 'ant-dropdown-menu-item-selected' : 'ant-menu-item-selected');
        }
    }
    /**
     * @return {?}
     */
    get nzSelected() {
        return this.selected;
    }
    /**
     * clear all item selected status except this
     * @return {?}
     */
    _onClickItem() {
        if (this.nzMenuComponent.nzClickActive && (!this.nzDisable)) {
            this.nzMenuComponent.clearAllSelected();
            this.nzSelected = true;
        }
    }
    /**
     * define host class
     * @return {?}
     */
    get _isInDropDownClass() {
        return this.isInDropDown;
    }
    /**
     * @return {?}
     */
    get _isNotInDropDownClass() {
        return !this.isInDropDown;
    }
    /**
     * @return {?}
     */
    get setDropDownDisableClass() {
        return this.isInDropDown && this.nzDisable;
    }
    /**
     * @return {?}
     */
    get setMenuDisableClass() {
        return (!this.isInDropDown) && this.nzDisable;
    }
    /**
     * @return {?}
     */
    get setPaddingLeft() {
        if (this.nzSubMenuComponent) {
            /** if in sub menu component */
            if (this.nzSubMenuComponent.nzMenuComponent.nzMode === 'inline') {
                /** if host menu's mode is inline add PADDING_BASE * level padding */
                return (this.nzSubMenuComponent.level + 1) * PADDING_BASE;
            }
            else {
                /** return origin padding */
                return this.padding;
            }
        }
        else if (this.nzMenuComponent.hasSubMenu && (this.nzMenuComponent.nzMode === 'inline')) {
            /** not in sub menu component but root menu's mode is inline and contains submenu return default padding*/
            return PADDING_BASE;
        }
        else {
            return this.padding;
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        setTimeout(_ => {
            this.isInDropDown = this.nzMenuComponent.isInDropDown;
        });
    }
}
NzMenuItemComponent.decorators = [
    { type: Component, args: [{
                selector: '[nz-menu-item]',
                template: `
    <ng-content></ng-content>`,
            },] },
];
/**
 * @nocollapse
 */
NzMenuItemComponent.ctorParameters = () => [
    { type: Renderer2, },
    { type: ChangeDetectorRef, },
    { type: NzMenuComponent, },
    { type: NzSubMenuComponent, decorators: [{ type: Optional },] },
    { type: ElementRef, },
];
NzMenuItemComponent.propDecorators = {
    'nzDisable': [{ type: Input },],
    'nzSelected': [{ type: Input },],
    '_onClickItem': [{ type: HostListener, args: ['click', ['$event'],] },],
    '_isInDropDownClass': [{ type: HostBinding, args: ['class.ant-dropdown-menu-item',] },],
    '_isNotInDropDownClass': [{ type: HostBinding, args: ['class.ant-menu-item',] },],
    'setDropDownDisableClass': [{ type: HostBinding, args: ['class.ant-dropdown-menu-item-disabled',] },],
    'setMenuDisableClass': [{ type: HostBinding, args: ['class.ant-menu-item-disabled',] },],
    'setPaddingLeft': [{ type: HostBinding, args: ['style.padding-left.px',] },],
};

class NzMenuDividerComponent {
    constructor() {
        this._nzDropdownMenuItemDivider = true;
    }
}
NzMenuDividerComponent.decorators = [
    { type: Component, args: [{
                selector: '[nz-menu-divider]',
                template: `
    <ng-content></ng-content>`,
            },] },
];
/**
 * @nocollapse
 */
NzMenuDividerComponent.ctorParameters = () => [];
NzMenuDividerComponent.propDecorators = {
    '_nzDropdownMenuItemDivider': [{ type: HostBinding, args: ['class.ant-dropdown-menu-item-divider',] },],
};

class NzMenuGroupComponent {
    constructor() {
        this._nzMenuItemGroup = true;
    }
}
NzMenuGroupComponent.decorators = [
    { type: Component, args: [{
                selector: '[nz-menu-group]',
                template: `
    <div class="ant-menu-item-group-title">
      <ng-content select="[title]"></ng-content>
    </div>
    <ul class="ant-menu-item-group-list">
      <ng-content></ng-content>
    </ul>`,
            },] },
];
/**
 * @nocollapse
 */
NzMenuGroupComponent.ctorParameters = () => [];
NzMenuGroupComponent.propDecorators = {
    '_nzMenuItemGroup': [{ type: HostBinding, args: ['class.ant-menu-item-group',] },],
};

class NzMenuModule {
}
NzMenuModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, FormsModule, NzButtonModule],
                declarations: [NzMenuComponent, NzMenuItemComponent, NzSubMenuComponent, NzMenuDividerComponent, NzMenuGroupComponent],
                exports: [NzMenuComponent, NzMenuItemComponent, NzSubMenuComponent, NzMenuDividerComponent, NzMenuGroupComponent]
            },] },
];
/**
 * @nocollapse
 */
NzMenuModule.ctorParameters = () => [];

class NzDropDownModule {
}
NzDropDownModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, OverlayModule, FormsModule, NzButtonModule, NzMenuModule],
                declarations: [NzDropDownComponent, NzDropDownButtonComponent, NzDropDownDirective],
                exports: [NzDropDownComponent, NzDropDownButtonComponent, NzDropDownDirective]
            },] },
];
/**
 * @nocollapse
 */
NzDropDownModule.ctorParameters = () => [];

class NzBreadCrumbComponent {
    constructor() {
        this.nzSeparator = '/';
        this._nzBreadcrumb = true;
    }
}
NzBreadCrumbComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-breadcrumb',
                encapsulation: ViewEncapsulation.None,
                template: `
    <ng-content></ng-content>`,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-breadcrumb {
  color: rgba(0, 0, 0, 0.65);
  font-size: 12px;
}
.ant-breadcrumb a {
  color: rgba(0, 0, 0, 0.65);
  transition: color .3s;
}
.ant-breadcrumb a:hover {
  color: #6ddab5;
}
.ant-breadcrumb > span:last-child {
  font-weight: bold;
  color: rgba(0, 0, 0, 0.65);
}
.ant-breadcrumb > span:last-child .ant-breadcrumb-separator {
  display: none;
}
.ant-breadcrumb-separator {
  margin: 0 8px;
  color: rgba(0, 0, 0, 0.3);
}
.ant-breadcrumb-link > .anticon + span {
  margin-left: 4px;
}
`,
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-breadcrumb {
  color: rgba(0, 0, 0, 0.65);
  font-size: 12px;
}
.ant-breadcrumb a {
  color: rgba(0, 0, 0, 0.65);
  transition: color .3s;
}
.ant-breadcrumb a:hover {
  color: #6ddab5;
}
.ant-breadcrumb > span:last-child {
  font-weight: bold;
  color: rgba(0, 0, 0, 0.65);
}
.ant-breadcrumb > span:last-child .ant-breadcrumb-separator {
  display: none;
}
.ant-breadcrumb-separator {
  margin: 0 8px;
  color: rgba(0, 0, 0, 0.3);
}
.ant-breadcrumb-link > .anticon + span {
  margin-left: 4px;
}
.ant-breadcrumb {
  display: block;
}
.ant-breadcrumb > nz-breadcrumb-item:last-child {
  font-weight: bold;
  color: rgba(0, 0, 0, 0.65);
}
.ant-breadcrumb > nz-breadcrumb-item:last-child .ant-breadcrumb-separator {
  display: none;
}
`
                ]
            },] },
];
/**
 * @nocollapse
 */
NzBreadCrumbComponent.ctorParameters = () => [];
NzBreadCrumbComponent.propDecorators = {
    'nzSeparator': [{ type: Input },],
    '_nzBreadcrumb': [{ type: HostBinding, args: ['class.ant-breadcrumb',] },],
};

class NzBreadCrumbItemComponent {
    /**
     * @param {?} nzBreadCrumbComponent
     */
    constructor(nzBreadCrumbComponent) {
        this.nzBreadCrumbComponent = nzBreadCrumbComponent;
    }
}
NzBreadCrumbItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-breadcrumb-item',
                template: `
    <span class="ant-breadcrumb-link">
      <ng-content></ng-content>
    </span>
    <span class="ant-breadcrumb-separator">{{nzBreadCrumbComponent?.nzSeparator}}</span>`
            },] },
];
/**
 * @nocollapse
 */
NzBreadCrumbItemComponent.ctorParameters = () => [
    { type: NzBreadCrumbComponent, },
];

class NzBreadCrumbModule {
}
NzBreadCrumbModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [NzBreadCrumbComponent, NzBreadCrumbItemComponent],
                exports: [NzBreadCrumbComponent, NzBreadCrumbItemComponent]
            },] },
];
/**
 * @nocollapse
 */
NzBreadCrumbModule.ctorParameters = () => [];

class NzLayoutComponent {
    constructor() {
        this.hasSider = false;
        this._nzLayout = true;
    }
}
NzLayoutComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-layout',
                encapsulation: ViewEncapsulation.None,
                template: `
    <ng-content></ng-content>
  `,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-layout {
  display: flex;
  flex-direction: column;
  flex: auto;
  background: #ececec;
}
.ant-layout.ant-layout-has-sider {
  flex-direction: row;
}
.ant-layout.ant-layout-has-sider > .ant-layout,
.ant-layout.ant-layout-has-sider > .ant-layout-content {
  overflow-x: hidden;
}
.ant-layout-header,
.ant-layout-footer {
  flex: 0 0 auto;
}
.ant-layout-header {
  background: #404040;
  padding: 0 50px;
  height: 64px;
  line-height: 64px;
}
.ant-layout-footer {
  padding: 24px 50px;
  color: rgba(0, 0, 0, 0.65);
  font-size: 12px;
}
.ant-layout-content {
  flex: auto;
}
.ant-layout-sider {
  transition: all 0.15s cubic-bezier(0.645, 0.045, 0.355, 1);
  position: relative;
  background: #404040;
  /* fix firefox can't set width smaller than content on flex item */
  min-width: 0;
}
.ant-layout-sider-has-trigger {
  padding-bottom: 48px;
}
.ant-layout-sider-right {
  order: 1;
}
.ant-layout-sider-trigger {
  position: absolute;
  text-align: center;
  width: 100%;
  bottom: 0;
  cursor: pointer;
  height: 48px;
  line-height: 48px;
  background: rgba(64, 64, 64, 0.88);
  color: #fff;
}
.ant-layout-sider-zero-width > * {
  overflow: hidden;
}
.ant-layout-sider-zero-width-trigger {
  position: absolute;
  top: 64px;
  right: -36px;
  text-align: center;
  width: 36px;
  height: 42px;
  line-height: 42px;
  background: #404040;
  color: #fff;
  font-size: 18px;
  border-radius: 0 4px 4px 0;
  cursor: pointer;
  transition: background .3s ease;
}
.ant-layout-sider-zero-width-trigger:hover {
  background: #535353;
}
`,
                    `nz-layout,
nz-footer,
nz-header,
nz-content {
  display: block;
}
`
                ]
            },] },
];
/**
 * @nocollapse
 */
NzLayoutComponent.ctorParameters = () => [];
NzLayoutComponent.propDecorators = {
    'hasSider': [{ type: HostBinding, args: ['class.ant-layout-has-sider',] },],
    '_nzLayout': [{ type: HostBinding, args: ['class.ant-layout',] },],
};

class NzHeaderComponent {
    constructor() {
        this._nzLayoutHeader = true;
    }
}
NzHeaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-header',
                template: `
    <ng-content></ng-content>
  `
            },] },
];
/**
 * @nocollapse
 */
NzHeaderComponent.ctorParameters = () => [];
NzHeaderComponent.propDecorators = {
    '_nzLayoutHeader': [{ type: HostBinding, args: ['class.ant-layout-header',] },],
};

class NzContentComponent {
    constructor() {
        this._nzLayoutContent = true;
    }
}
NzContentComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-content',
                encapsulation: ViewEncapsulation.None,
                template: `
    <ng-content></ng-content>
  `
            },] },
];
/**
 * @nocollapse
 */
NzContentComponent.ctorParameters = () => [];
NzContentComponent.propDecorators = {
    '_nzLayoutContent': [{ type: HostBinding, args: ['class.ant-layout-content',] },],
};

class NzFooterComponent {
    constructor() {
        this._nzLayoutFooter = true;
    }
}
NzFooterComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-footer',
                encapsulation: ViewEncapsulation.None,
                template: `
    <ng-content></ng-content>
  `
            },] },
];
/**
 * @nocollapse
 */
NzFooterComponent.ctorParameters = () => [];
NzFooterComponent.propDecorators = {
    '_nzLayoutFooter': [{ type: HostBinding, args: ['class.ant-layout-footer',] },],
};

class NzSiderComponent {
    /**
     * @param {?} nzLayoutComponent
     */
    constructor(nzLayoutComponent) {
        this.nzLayoutComponent = nzLayoutComponent;
        this._dimensionMap = {
            xl: '1600px',
            lg: '1200px',
            md: '992px',
            sm: '768px',
            xs: '480px',
        };
        this._below = false;
        this.nzWidth = '200';
        this.nzTrigger = true;
        this.nzCollapsedWidth = 64;
        this.nzCollapsed = false;
        this._collapsible = false;
        this.nzCollapsedChange = new EventEmitter();
        this._nzLayoutSider = true;
        if (this.nzLayoutComponent) {
            this.nzLayoutComponent.hasSider = true;
        }
        if (typeof window !== 'undefined') {
            const matchMediaPolyfill = (mediaQuery) => {
                return {
                    media: mediaQuery,
                    matches: false,
                    addListener() {
                    },
                    removeListener() {
                    },
                };
            };
            window.matchMedia = window.matchMedia || matchMediaPolyfill;
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzCollapsible(value) {
        if (value === '') {
            this._collapsible = true;
        }
        else {
            this._collapsible = (value);
        }
    }
    /**
     * @return {?}
     */
    get nzCollapsible() {
        return this._collapsible;
    }
    /**
     * @return {?}
     */
    get setZeroClass() {
        return this.nzCollapsed && (this.nzCollapsedWidth === 0);
    }
    /**
     * @return {?}
     */
    get setFlex() {
        if (this.nzCollapsed) {
            return `0 0 ${this.nzCollapsedWidth}px`;
        }
        else {
            return `0 0 ${this.nzWidth}px`;
        }
    }
    /**
     * @return {?}
     */
    get setWidth() {
        if (this.nzCollapsed) {
            return this.nzCollapsedWidth;
        }
        else {
            return this.nzWidth;
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onWindowResize(e) {
        if (this.nzBreakpoint) {
            const /** @type {?} */ matchBelow = window.matchMedia(`(max-width: ${this._dimensionMap[this.nzBreakpoint]})`).matches;
            this._below = matchBelow;
            this.nzCollapsed = matchBelow;
            this.nzCollapsedChange.emit(matchBelow);
        }
    }
    /**
     * @return {?}
     */
    toggleCollapse() {
        this.nzCollapsed = !this.nzCollapsed;
        this.nzCollapsedChange.emit(this.nzCollapsed);
    }
    /**
     * @return {?}
     */
    get _isZeroTrigger() {
        return this.nzCollapsible && this.nzTrigger && (this.nzCollapsedWidth === 0) && ((this.nzBreakpoint && this._below) || (!this.nzBreakpoint));
    }
    /**
     * @return {?}
     */
    get _isSiderTrgger() {
        return this.nzCollapsible && this.nzTrigger && (this.nzCollapsedWidth !== 0);
    }
}
NzSiderComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-sider',
                encapsulation: ViewEncapsulation.None,
                template: `
    <ng-content></ng-content>
    <span class="ant-layout-sider-zero-width-trigger" *ngIf="_isZeroTrigger" (click)="toggleCollapse()">
      <i class="anticon anticon-bars"></i>
    </span>
    <div class="ant-layout-sider-trigger" *ngIf="_isSiderTrgger" (click)="toggleCollapse()">
      <i class="anticon" [class.anticon-left]="!nzCollapsed" [class.anticon-right]="nzCollapsed"></i>
    </div>
  `
            },] },
];
/**
 * @nocollapse
 */
NzSiderComponent.ctorParameters = () => [
    { type: NzLayoutComponent, decorators: [{ type: Optional }, { type: Host },] },
];
NzSiderComponent.propDecorators = {
    'nzWidth': [{ type: Input },],
    'nzTrigger': [{ type: Input },],
    'nzCollapsedWidth': [{ type: Input },],
    'nzBreakpoint': [{ type: Input },],
    'nzCollapsed': [{ type: Input }, { type: HostBinding, args: ['class.ant-layout-sider-collapsed',] },],
    'nzCollapsible': [{ type: Input },],
    'nzCollapsedChange': [{ type: Output },],
    '_nzLayoutSider': [{ type: HostBinding, args: ['class.ant-layout-sider',] },],
    'setZeroClass': [{ type: HostBinding, args: ['class.ant-layout-sider-zero-width',] },],
    'setFlex': [{ type: HostBinding, args: ['style.flex',] },],
    'setWidth': [{ type: HostBinding, args: ['style.width.px',] },],
    'onWindowResize': [{ type: HostListener, args: ['window:resize', ['$event'],] },],
};

class NzLayoutModule {
}
NzLayoutModule.decorators = [
    { type: NgModule, args: [{
                declarations: [NzLayoutComponent, NzHeaderComponent, NzContentComponent, NzFooterComponent, NzSiderComponent],
                exports: [NzLayoutComponent, NzHeaderComponent, NzContentComponent, NzFooterComponent, NzSiderComponent],
                imports: [CommonModule]
            },] },
];
/**
 * @nocollapse
 */
NzLayoutModule.ctorParameters = () => [];

const NZ_ROOT_CONFIG = new InjectionToken('NzRootConfig');
/**
 * @param {?} document
 * @param {?=} options
 * @return {?}
 */
function createNzRootInitializer(document, options) {
    return function nzRootInitializer() {
        if (options) {
            const /** @type {?} */ style$$1 = document.createElement('style');
            style$$1.innerHTML = `
        @font-face {
          font-family: '${options.extraFontName}';
          src: url('${options.extraFontUrl}.eot'); /* IE9*/
          src:
            /* IE6-IE8 */
            url('${options.extraFontUrl}.eot?#iefix') format('embedded-opentype'),
            /* chrome、firefox */
            url('${options.extraFontUrl}.woff') format('woff'),
            /* chrome、firefox、opera、Safari, Android, iOS 4.2+*/
            url('${options.extraFontUrl}.ttf') format('truetype'),
            /* iOS 4.1- */
            url('${options.extraFontUrl}.svg#iconfont') format('svg');
        }
      `;
            document.head.appendChild(style$$1);
        }
    };
}

class NzRootComponent {
    /**
     * @param {?} _document
     * @param {?} options
     */
    constructor(_document, options) {
        this._document = _document;
        this.options = options;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.nzExtraFontName && this.nzExtraFontUrl && !this.options) {
            const /** @type {?} */ options = { extraFontName: this.nzExtraFontName, extraFontUrl: this.nzExtraFontUrl };
            const /** @type {?} */ initializer = createNzRootInitializer(this._document, options);
            initializer();
        }
    }
}
NzRootComponent.decorators = [
    { type: Component, args: [{
                selector: '[nz-root],nz-root',
                template: `
    <ng-content></ng-content>
  `,
            },] },
];
/**
 * @nocollapse
 */
NzRootComponent.ctorParameters = () => [
    { type: Document, decorators: [{ type: Inject, args: [DOCUMENT,] },] },
    { type: undefined, decorators: [{ type: Inject, args: [NZ_ROOT_CONFIG,] }, { type: Optional },] },
];
NzRootComponent.propDecorators = {
    'nzExtraFontName': [{ type: Input },],
    'nzExtraFontUrl': [{ type: Input },],
};

class NzRootStyleComponent {
}
NzRootStyleComponent.decorators = [
    { type: Component, args: [{
                template: ``,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
/*! normalize.css v7.0.0 | MIT License | github.com/necolas/normalize.css */
/* Document
   ========================================================================== */
/**
 * 1. Correct the line height in all browsers.
 * 2. Prevent adjustments of font size after orientation changes in
 *    IE on Windows Phone and in iOS.
 */
html {
  line-height: 1.15;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */
}
/* Sections
   ========================================================================== */
/**
 * Remove the margin in all browsers (opinionated).
 */
body {
  margin: 0;
}
/**
 * Add the correct display in IE 9-.
 */
article,
aside,
footer,
header,
nav,
section {
  display: block;
}
/**
 * Correct the font size and margin on 'h1' elements within 'section' and
 * 'article' contexts in Chrome, Firefox, and Safari.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0;
}
/* Grouping content
   ========================================================================== */
/**
 * Add the correct display in IE 9-.
 * 1. Add the correct display in IE.
 */
figcaption,
figure,
main {
  /* 1 */
  display: block;
}
/**
 * Add the correct margin in IE 8.
 */
figure {
  margin: 1em 40px;
}
/**
 * 1. Add the correct box sizing in Firefox.
 * 2. Show the overflow in Edge and IE.
 */
hr {
  box-sizing: content-box;
  /* 1 */
  height: 0;
  /* 1 */
  overflow: visible;
  /* 2 */
}
/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd 'em' font sizing in all browsers.
 */
pre {
  font-family: monospace, monospace;
  /* 1 */
  /* stylelint-disable-line */
  font-size: 1em;
  /* 2 */
}
/* Text-level semantics
   ========================================================================== */
/**
 * 1. Remove the gray background on active links in IE 10.
 * 2. Remove gaps in links underline in iOS 8+ and Safari 8+.
 */
a {
  background-color: transparent;
  /* 1 */
  -webkit-text-decoration-skip: objects;
  /* 2 */
}
/**
 * 1. Remove the bottom border in Chrome 57- and Firefox 39-.
 * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
 */
abbr[title] {
  border-bottom: none;
  /* 1 */
  text-decoration: underline;
  /* 2 */
  text-decoration: underline dotted;
  /* 2 */
}
/**
 * Prevent the duplicate application of 'bolder' by the next rule in Safari 6.
 */
b,
strong {
  font-weight: inherit;
}
/**
 * Add the correct font weight in Chrome, Edge, and Safari.
 */
b,
strong {
  font-weight: bolder;
}
/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd 'em' font sizing in all browsers.
 */
code,
kbd,
samp {
  font-family: monospace, monospace;
  /* 1 */
  /* stylelint-disable-line */
  font-size: 1em;
  /* 2 */
}
/**
 * Add the correct font style in Android 4.3-.
 */
dfn {
  font-style: italic;
}
/**
 * Add the correct background and color in IE 9-.
 */
mark {
  background-color: #ff0;
  color: #000;
}
/**
 * Add the correct font size in all browsers.
 */
small {
  font-size: 80%;
}
/**
 * Prevent 'sub' and 'sup' elements from affecting the line height in
 * all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}
sub {
  bottom: -0.25em;
}
sup {
  top: -0.5em;
}
/* Embedded content
   ========================================================================== */
/**
 * Add the correct display in IE 9-.
 */
audio,
video {
  display: inline-block;
}
/**
 * Add the correct display in iOS 4-7.
 */
audio:not([controls]) {
  display: none;
  height: 0;
}
/**
 * Remove the border on images inside links in IE 10-.
 */
img {
  border-style: none;
}
/**
 * Hide the overflow in IE.
 */
svg:not(:root) {
  overflow: hidden;
}
/* Forms
   ========================================================================== */
/**
 * 1. Change the font styles in all browsers (opinionated).
 * 2. Remove the margin in Firefox and Safari.
 */
button,
input,
optgroup,
select,
textarea {
  font-family: sans-serif;
  /* 1 */
  font-size: 100%;
  /* 1 */
  line-height: 1.15;
  /* 1 */
  margin: 0;
  /* 2 */
}
/**
 * Show the overflow in IE.
 * 1. Show the overflow in Edge.
 */
button,
input {
  /* 1 */
  overflow: visible;
}
/**
 * Remove the inheritance of text transform in Edge, Firefox, and IE.
 * 1. Remove the inheritance of text transform in Firefox.
 */
button,
select {
  /* 1 */
  text-transform: none;
}
/**
 * 1. Prevent a WebKit bug where (2) destroys native 'audio' and 'video'
 *    controls in Android 4.
 * 2. Correct the inability to style clickable types in iOS and Safari.
 */
button,
html [type="button"],
[type="reset"],
[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
}
/**
 * Remove the inner border and padding in Firefox.
 */
button::-moz-focus-inner,
[type="button"]::-moz-focus-inner,
[type="reset"]::-moz-focus-inner,
[type="submit"]::-moz-focus-inner {
  border-style: none;
  padding: 0;
}
/**
 * Restore the focus styles unset by the previous rule.
 */
button:-moz-focusring,
[type="button"]:-moz-focusring,
[type="reset"]:-moz-focusring,
[type="submit"]:-moz-focusring {
  outline: 1px dotted ButtonText;
}
/**
 * Correct the padding in Firefox.
 */
fieldset {
  padding: 0.35em 0.75em 0.625em;
}
/**
 * 1. Correct the text wrapping in Edge and IE.
 * 2. Correct the color inheritance from 'fieldset' elements in IE.
 * 3. Remove the padding so developers are not caught out when they zero out
 *    'fieldset' elements in all browsers.
 */
legend {
  box-sizing: border-box;
  /* 1 */
  color: inherit;
  /* 2 */
  display: table;
  /* 1 */
  max-width: 100%;
  /* 1 */
  padding: 0;
  /* 3 */
  white-space: normal;
  /* 1 */
}
/**
 * 1. Add the correct display in IE 9-.
 * 2. Add the correct vertical alignment in Chrome, Firefox, and Opera.
 */
progress {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */
}
/**
 * Remove the default vertical scrollbar in IE.
 */
textarea {
  overflow: auto;
}
/**
 * 1. Add the correct box sizing in IE 10-.
 * 2. Remove the padding in IE 10-.
 */
[type="checkbox"],
[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */
}
/**
 * Correct the cursor style of increment and decrement buttons in Chrome.
 */
[type="number"]::-webkit-inner-spin-button,
[type="number"]::-webkit-outer-spin-button {
  height: auto;
}
/**
 * 1. Correct the odd appearance in Chrome and Safari.
 * 2. Correct the outline style in Safari.
 */
[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  outline-offset: -2px;
  /* 2 */
}
/**
 * Remove the inner padding and cancel buttons in Chrome and Safari on macOS.
 */
[type="search"]::-webkit-search-cancel-button,
[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}
/**
 * 1. Correct the inability to style clickable types in iOS and Safari.
 * 2. Change font properties to 'inherit' in Safari.
 */
::-webkit-file-upload-button {
  -webkit-appearance: button;
  /* 1 */
  font: inherit;
  /* 2 */
}
/* Interactive
   ========================================================================== */
/*
 * Add the correct display in IE 9-.
 * 1. Add the correct display in Edge, IE, and Firefox.
 */
details,
menu {
  display: block;
}
/*
 * Add the correct display in all browsers.
 */
summary {
  display: list-item;
}
/* Scripting
   ========================================================================== */
/**
 * Add the correct display in IE 9-.
 */
canvas {
  display: inline-block;
}
/**
 * Add the correct display in IE.
 */
template {
  display: none;
}
/* Hidden
   ========================================================================== */
/**
 * Add the correct display in IE 10-.
 */
[hidden] {
  display: none;
}
@font-face {
  font-family: "Helvetica Neue For Number";
  src: local("Helvetica Neue");
  unicode-range: U+30-39;
}
* {
  box-sizing: border-box;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
}
*:before,
*:after {
  box-sizing: border-box;
}
html,
body {
  width: 100%;
  height: 100%;
}
body {
  font-family: "Helvetica Neue For Number", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "PingFang SC", "Hiragino Sans GB", "Microsoft YaHei", "Helvetica Neue", Helvetica, Arial, sans-serif;
  font-size: 12px;
  line-height: 1.5;
  color: rgba(0, 0, 0, 0.65);
  background-color: #fff;
}
body,
div,
dl,
dt,
dd,
ul,
ol,
li,
h1,
h2,
h3,
h4,
h5,
h6,
pre,
code,
form,
fieldset,
legend,
input,
textarea,
p,
blockquote,
th,
td,
hr,
button,
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
menu,
nav,
section {
  margin: 0;
  padding: 0;
}
button,
input,
select,
textarea {
  font-family: inherit;
  font-size: inherit;
  line-height: inherit;
  color: inherit;
}
ul,
ol {
  list-style: none;
}
input::-ms-clear,
input::-ms-reveal {
  display: none;
}
::selection {
  background: #3FCE9E;
  color: #fff;
}
h1,
h2,
h3,
h4,
h5,
h6 {
  color: rgba(0, 0, 0, 0.85);
  font-weight: 500;
}
a {
  color: #3FCE9E;
  background: transparent;
  text-decoration: none;
  outline: none;
  cursor: pointer;
  transition: color .3s ease;
}
a:focus {
  text-decoration: underline;
  text-decoration-skip: ink;
}
a:hover {
  color: #6ddab5;
}
a:active {
  color: #36b38c;
}
a:active,
a:hover {
  outline: 0;
  text-decoration: none;
}
a[disabled] {
  color: rgba(0, 0, 0, 0.25);
  cursor: not-allowed;
  pointer-events: none;
}
.ant-divider {
  margin: 0 6px;
  display: inline-block;
  height: 8px;
  width: 1px;
  background: #ccc;
}
code,
kbd,
pre,
samp {
  font-family: Consolas, Menlo, Courier, monospace;
}
.clearfix {
  zoom: 1;
}
.clearfix:before,
.clearfix:after {
  content: " ";
  display: table;
}
.clearfix:after {
  clear: both;
  visibility: hidden;
  font-size: 0;
  height: 0;
}
@font-face {
  font-family: 'anticon';
  src: url('https://at.alicdn.com/t/font_zck90zmlh7hf47vi.eot');
  /* IE9*/
  src: url('https://at.alicdn.com/t/font_zck90zmlh7hf47vi.eot?#iefix') format('embedded-opentype'), /* chrome、firefox */ url('https://at.alicdn.com/t/font_zck90zmlh7hf47vi.woff') format('woff'), /* chrome、firefox、opera、Safari, Android, iOS 4.2+*/ url('https://at.alicdn.com/t/font_zck90zmlh7hf47vi.ttf') format('truetype'), /* iOS 4.1- */ url('https://at.alicdn.com/t/font_zck90zmlh7hf47vi.svg#iconfont') format('svg');
}
.anticon {
  display: inline-block;
  font-style: normal;
  vertical-align: baseline;
  text-align: center;
  text-transform: none;
  line-height: 1;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}
.anticon:before {
  display: block;
  font-family: "anticon" !important;
}
.anticon-step-forward:before {
  content: "\\e600";
}
.anticon-step-backward:before {
  content: "\\e601";
}
.anticon-forward:before {
  content: "\\e602";
}
.anticon-backward:before {
  content: "\\e603";
}
.anticon-caret-right:before {
  content: "\\e604";
}
.anticon-caret-left:before {
  content: "\\e605";
}
.anticon-caret-down:before {
  content: "\\e606";
}
.anticon-caret-up:before {
  content: "\\e607";
}
.anticon-right-circle:before {
  content: "\\e608";
}
.anticon-circle-right:before {
  content: "\\e608";
}
.anticon-caret-circle-right:before {
  content: "\\e608";
}
.anticon-left-circle:before {
  content: "\\e609";
}
.anticon-circle-left:before {
  content: "\\e609";
}
.anticon-caret-circle-left:before {
  content: "\\e609";
}
.anticon-up-circle:before {
  content: "\\e60a";
}
.anticon-circle-up:before {
  content: "\\e60a";
}
.anticon-caret-circle-up:before {
  content: "\\e60a";
}
.anticon-down-circle:before {
  content: "\\e60b";
}
.anticon-circle-down:before {
  content: "\\e60b";
}
.anticon-caret-circle-down:before {
  content: "\\e60b";
}
.anticon-right-circle-o:before {
  content: "\\e60c";
}
.anticon-circle-o-right:before {
  content: "\\e60c";
}
.anticon-caret-circle-o-right:before {
  content: "\\e60c";
}
.anticon-left-circle-o:before {
  content: "\\e60d";
}
.anticon-circle-o-left:before {
  content: "\\e60d";
}
.anticon-caret-circle-o-left:before {
  content: "\\e60d";
}
.anticon-up-circle-o:before {
  content: "\\e60e";
}
.anticon-circle-o-up:before {
  content: "\\e60e";
}
.anticon-caret-circle-o-up:before {
  content: "\\e60e";
}
.anticon-down-circle-o:before {
  content: "\\e60f";
}
.anticon-circle-o-down:before {
  content: "\\e60f";
}
.anticon-caret-circle-o-down:before {
  content: "\\e60f";
}
.anticon-verticle-left:before {
  content: "\\e610";
}
.anticon-verticle-right:before {
  content: "\\e611";
}
.anticon-rollback:before {
  content: "\\e612";
}
.anticon-retweet:before {
  content: "\\e613";
}
.anticon-shrink:before {
  content: "\\e614";
}
.anticon-arrows-alt:before {
  content: "\\e615";
}
.anticon-arrow-salt:before {
  content: "\\e615";
}
.anticon-reload:before {
  content: "\\e616";
}
.anticon-double-right:before {
  content: "\\e617";
}
.anticon-double-left:before {
  content: "\\e618";
}
.anticon-arrow-down:before {
  content: "\\e619";
}
.anticon-arrow-up:before {
  content: "\\e61a";
}
.anticon-arrow-right:before {
  content: "\\e61b";
}
.anticon-arrow-left:before {
  content: "\\e61c";
}
.anticon-down:before {
  content: "\\e61d";
}
.anticon-up:before {
  content: "\\e61e";
}
.anticon-right:before {
  content: "\\e61f";
}
.anticon-left:before {
  content: "\\e620";
}
.anticon-minus-square-o:before {
  content: "\\e621";
}
.anticon-minus-circle:before {
  content: "\\e622";
}
.anticon-minus-circle-o:before {
  content: "\\e623";
}
.anticon-minus:before {
  content: "\\e624";
}
.anticon-plus-circle-o:before {
  content: "\\e625";
}
.anticon-plus-circle:before {
  content: "\\e626";
}
.anticon-plus:before {
  content: "\\e627";
}
.anticon-info-circle:before {
  content: "\\e628";
}
.anticon-info-circle-o:before {
  content: "\\e629";
}
.anticon-info:before {
  content: "\\e62a";
}
.anticon-exclamation:before {
  content: "\\e62b";
}
.anticon-exclamation-circle:before {
  content: "\\e62c";
}
.anticon-exclamation-circle-o:before {
  content: "\\e62d";
}
.anticon-close-circle:before {
  content: "\\e62e";
}
.anticon-cross-circle:before {
  content: "\\e62e";
}
.anticon-close-circle-o:before {
  content: "\\e62f";
}
.anticon-cross-circle-o:before {
  content: "\\e62f";
}
.anticon-check-circle:before {
  content: "\\e630";
}
.anticon-check-circle-o:before {
  content: "\\e631";
}
.anticon-check:before {
  content: "\\e632";
}
.anticon-close:before {
  content: "\\e633";
}
.anticon-cross:before {
  content: "\\e633";
}
.anticon-customer-service:before {
  content: "\\e634";
}
.anticon-customerservice:before {
  content: "\\e634";
}
.anticon-credit-card:before {
  content: "\\e635";
}
.anticon-code-o:before {
  content: "\\e636";
}
.anticon-book:before {
  content: "\\e637";
}
.anticon-bar-chart:before {
  content: "\\e638";
}
.anticon-bars:before {
  content: "\\e639";
}
.anticon-question:before {
  content: "\\e63a";
}
.anticon-question-circle:before {
  content: "\\e63b";
}
.anticon-question-circle-o:before {
  content: "\\e63c";
}
.anticon-pause:before {
  content: "\\e63d";
}
.anticon-pause-circle:before {
  content: "\\e63e";
}
.anticon-pause-circle-o:before {
  content: "\\e63f";
}
.anticon-clock-circle:before {
  content: "\\e640";
}
.anticon-clock-circle-o:before {
  content: "\\e641";
}
.anticon-swap:before {
  content: "\\e642";
}
.anticon-swap-left:before {
  content: "\\e643";
}
.anticon-swap-right:before {
  content: "\\e644";
}
.anticon-plus-square-o:before {
  content: "\\e645";
}
.anticon-frown:before {
  content: "\\e646";
}
.anticon-frown-circle:before {
  content: "\\e646";
}
.anticon-ellipsis:before {
  content: "\\e647";
}
.anticon-copy:before {
  content: "\\e648";
}
.anticon-menu-fold:before {
  content: "\\e658";
}
.anticon-mail:before {
  content: "\\e659";
}
.anticon-logout:before {
  content: "\\e65a";
}
.anticon-link:before {
  content: "\\e65b";
}
.anticon-area-chart:before {
  content: "\\e65c";
}
.anticon-line-chart:before {
  content: "\\e65d";
}
.anticon-home:before {
  content: "\\e65e";
}
.anticon-laptop:before {
  content: "\\e65f";
}
.anticon-star:before {
  content: "\\e660";
}
.anticon-star-o:before {
  content: "\\e661";
}
.anticon-folder:before {
  content: "\\e662";
}
.anticon-filter:before {
  content: "\\e663";
}
.anticon-file:before {
  content: "\\e664";
}
.anticon-exception:before {
  content: "\\e665";
}
.anticon-meh:before {
  content: "\\e666";
}
.anticon-meh-circle:before {
  content: "\\e666";
}
.anticon-meh-o:before {
  content: "\\e667";
}
.anticon-shopping-cart:before {
  content: "\\e668";
}
.anticon-save:before {
  content: "\\e669";
}
.anticon-user:before {
  content: "\\e66a";
}
.anticon-video-camera:before {
  content: "\\e66b";
}
.anticon-to-top:before {
  content: "\\e66c";
}
.anticon-team:before {
  content: "\\e66d";
}
.anticon-tablet:before {
  content: "\\e66e";
}
.anticon-solution:before {
  content: "\\e66f";
}
.anticon-search:before {
  content: "\\e670";
}
.anticon-share-alt:before {
  content: "\\e671";
}
.anticon-setting:before {
  content: "\\e672";
}
.anticon-poweroff:before {
  content: "\\e6d5";
}
.anticon-picture:before {
  content: "\\e674";
}
.anticon-phone:before {
  content: "\\e675";
}
.anticon-paper-clip:before {
  content: "\\e676";
}
.anticon-notification:before {
  content: "\\e677";
}
.anticon-mobile:before {
  content: "\\e678";
}
.anticon-menu-unfold:before {
  content: "\\e679";
}
.anticon-inbox:before {
  content: "\\e67a";
}
.anticon-lock:before {
  content: "\\e67b";
}
.anticon-qrcode:before {
  content: "\\e67c";
}
.anticon-play-circle:before {
  content: "\\e6d0";
}
.anticon-play-circle-o:before {
  content: "\\e6d1";
}
.anticon-tag:before {
  content: "\\e6d2";
}
.anticon-tag-o:before {
  content: "\\e6d3";
}
.anticon-tags:before {
  content: "\\e67d";
}
.anticon-tags-o:before {
  content: "\\e67e";
}
.anticon-cloud-o:before {
  content: "\\e67f";
}
.anticon-cloud:before {
  content: "\\e680";
}
.anticon-cloud-upload:before {
  content: "\\e681";
}
.anticon-cloud-download:before {
  content: "\\e682";
}
.anticon-cloud-download-o:before {
  content: "\\e683";
}
.anticon-cloud-upload-o:before {
  content: "\\e684";
}
.anticon-environment:before {
  content: "\\e685";
}
.anticon-environment-o:before {
  content: "\\e686";
}
.anticon-eye:before {
  content: "\\e687";
}
.anticon-eye-o:before {
  content: "\\e688";
}
.anticon-camera:before {
  content: "\\e689";
}
.anticon-camera-o:before {
  content: "\\e68a";
}
.anticon-windows:before {
  content: "\\e68b";
}
.anticon-apple:before {
  content: "\\e68c";
}
.anticon-apple-o:before {
  content: "\\e6d4";
}
.anticon-android:before {
  content: "\\e938";
}
.anticon-android-o:before {
  content: "\\e68d";
}
.anticon-aliwangwang:before {
  content: "\\e68e";
}
.anticon-aliwangwang-o:before {
  content: "\\e68f";
}
.anticon-export:before {
  content: "\\e691";
}
.anticon-edit:before {
  content: "\\e692";
}
.anticon-circle-down-o:before {
  content: "\\e693";
}
.anticon-circle-down-:before {
  content: "\\e694";
}
.anticon-appstore-o:before {
  content: "\\e695";
}
.anticon-appstore:before {
  content: "\\e696";
}
.anticon-scan:before {
  content: "\\e697";
}
.anticon-file-text:before {
  content: "\\e698";
}
.anticon-folder-open:before {
  content: "\\e699";
}
.anticon-hdd:before {
  content: "\\e69a";
}
.anticon-ie:before {
  content: "\\e69b";
}
.anticon-file-jpg:before {
  content: "\\e69c";
}
.anticon-like:before {
  content: "\\e64c";
}
.anticon-like-o:before {
  content: "\\e69d";
}
.anticon-dislike:before {
  content: "\\e64b";
}
.anticon-dislike-o:before {
  content: "\\e69e";
}
.anticon-delete:before {
  content: "\\e69f";
}
.anticon-enter:before {
  content: "\\e6a0";
}
.anticon-pushpin-o:before {
  content: "\\e6a1";
}
.anticon-pushpin:before {
  content: "\\e6a2";
}
.anticon-heart:before {
  content: "\\e6a3";
}
.anticon-heart-o:before {
  content: "\\e6a4";
}
.anticon-pay-circle:before {
  content: "\\e6a5";
}
.anticon-pay-circle-o:before {
  content: "\\e6a6";
}
.anticon-smile:before {
  content: "\\e6a7";
}
.anticon-smile-circle:before {
  content: "\\e6a7";
}
.anticon-smile-o:before {
  content: "\\e6a8";
}
.anticon-frown-o:before {
  content: "\\e6a9";
}
.anticon-calculator:before {
  content: "\\e6aa";
}
.anticon-message:before {
  content: "\\e6ab";
}
.anticon-chrome:before {
  content: "\\e6ac";
}
.anticon-github:before {
  content: "\\e6ad";
}
.anticon-file-unknown:before {
  content: "\\e6af";
}
.anticon-file-excel:before {
  content: "\\e6b0";
}
.anticon-file-ppt:before {
  content: "\\e6b1";
}
.anticon-file-word:before {
  content: "\\e6b2";
}
.anticon-file-pdf:before {
  content: "\\e6b3";
}
.anticon-desktop:before {
  content: "\\e6b4";
}
.anticon-upload:before {
  content: "\\e6b6";
}
.anticon-download:before {
  content: "\\e6b7";
}
.anticon-pie-chart:before {
  content: "\\e6b8";
}
.anticon-unlock:before {
  content: "\\e6ba";
}
.anticon-calendar:before {
  content: "\\e6bb";
}
.anticon-windows-o:before {
  content: "\\e6bc";
}
.anticon-dot-chart:before {
  content: "\\e6bd";
}
.anticon-bar-chart:before {
  content: "\\e6be";
}
.anticon-code:before {
  content: "\\e6bf";
}
.anticon-api:before {
  content: "\\e951";
}
.anticon-plus-square:before {
  content: "\\e6c0";
}
.anticon-minus-square:before {
  content: "\\e6c1";
}
.anticon-close-square:before {
  content: "\\e6c2";
}
.anticon-close-square-o:before {
  content: "\\e6c3";
}
.anticon-check-square:before {
  content: "\\e6c4";
}
.anticon-check-square-o:before {
  content: "\\e6c5";
}
.anticon-fast-backward:before {
  content: "\\e6c6";
}
.anticon-fast-forward:before {
  content: "\\e6c7";
}
.anticon-up-square:before {
  content: "\\e6c8";
}
.anticon-down-square:before {
  content: "\\e6c9";
}
.anticon-left-square:before {
  content: "\\e6ca";
}
.anticon-right-square:before {
  content: "\\e6cb";
}
.anticon-right-square-o:before {
  content: "\\e6cc";
}
.anticon-left-square-o:before {
  content: "\\e6cd";
}
.anticon-down-square-o:before {
  content: "\\e6ce";
}
.anticon-up-square-o:before {
  content: "\\e6cf";
}
.anticon-loading:before {
  content: "\\e64d";
}
.anticon-loading-3-quarters:before {
  content: "\\e6ae";
}
.anticon-bulb:before {
  content: "\\e649";
}
.anticon-select:before {
  content: "\\e64a";
}
.anticon-addfile:before,
.anticon-file-add:before {
  content: "\\e910";
}
.anticon-addfolder:before,
.anticon-folder-add:before {
  content: "\\e914";
}
.anticon-switcher:before {
  content: "\\e913";
}
.anticon-rocket:before {
  content: "\\e90f";
}
.anticon-dingding:before {
  content: "\\e923";
}
.anticon-dingding-o:before {
  content: "\\e925";
}
.anticon-bell:before {
  content: "\\e64e";
}
.anticon-disconnect:before {
  content: "\\e64f";
}
.anticon-database:before {
  content: "\\e650";
}
.anticon-compass:before {
  content: "\\e6db";
}
.anticon-barcode:before {
  content: "\\e652";
}
.anticon-hourglass:before {
  content: "\\e653";
}
.anticon-key:before {
  content: "\\e654";
}
.anticon-flag:before {
  content: "\\e655";
}
.anticon-layout:before {
  content: "\\e656";
}
.anticon-login:before {
  content: "\\e657";
}
.anticon-printer:before {
  content: "\\e673";
}
.anticon-sound:before {
  content: "\\e6e9";
}
.anticon-usb:before {
  content: "\\e6d7";
}
.anticon-skin:before {
  content: "\\e6d8";
}
.anticon-tool:before {
  content: "\\e6d9";
}
.anticon-sync:before {
  content: "\\e6da";
}
.anticon-wifi:before {
  content: "\\e6d6";
}
.anticon-car:before {
  content: "\\e6dc";
}
.anticon-copyright:before {
  content: "\\e6de";
}
.anticon-schedule:before {
  content: "\\e6df";
}
.anticon-user-add:before {
  content: "\\e6ed";
}
.anticon-user-delete:before {
  content: "\\e6e0";
}
.anticon-usergroup-add:before {
  content: "\\e6dd";
}
.anticon-usergroup-delete:before {
  content: "\\e6e1";
}
.anticon-man:before {
  content: "\\e6e2";
}
.anticon-woman:before {
  content: "\\e6ec";
}
.anticon-shop:before {
  content: "\\e6e3";
}
.anticon-gift:before {
  content: "\\e6e4";
}
.anticon-idcard:before {
  content: "\\e6e5";
}
.anticon-medicine-box:before {
  content: "\\e6e6";
}
.anticon-red-envelope:before {
  content: "\\e6e7";
}
.anticon-coffee:before {
  content: "\\e6e8";
}
.anticon-trademark:before {
  content: "\\e651";
}
.anticon-safety:before {
  content: "\\e6ea";
}
.anticon-wallet:before {
  content: "\\e6eb";
}
.anticon-bank:before {
  content: "\\e6ee";
}
.anticon-trophy:before {
  content: "\\e6ef";
}
.anticon-contacts:before {
  content: "\\e6f0";
}
.anticon-global:before {
  content: "\\e6f1";
}
.anticon-shake:before {
  content: "\\e94f";
}
.anticon-fork:before {
  content: "\\e6f2";
}
.anticon-spin:before {
  display: inline-block;
  animation: loadingCircle 1s infinite linear;
}
.fade-enter,
.fade-appear {
  animation-duration: 0.2s;
  animation-fill-mode: both;
  animation-play-state: paused;
}
.fade-leave {
  animation-duration: 0.2s;
  animation-fill-mode: both;
  animation-play-state: paused;
}
.fade-enter.fade-enter-active,
.fade-appear.fade-appear-active {
  animation-name: antFadeIn;
  animation-play-state: running;
}
.fade-leave.fade-leave-active {
  animation-name: antFadeOut;
  animation-play-state: running;
  pointer-events: none;
}
.fade-enter,
.fade-appear {
  opacity: 0;
  animation-timing-function: linear;
}
.fade-leave {
  animation-timing-function: linear;
}
@keyframes antFadeIn {
  0% {
    opacity: 0;
  }
  100% {
    opacity: 1;
  }
}
@keyframes antFadeOut {
  0% {
    opacity: 1;
  }
  100% {
    opacity: 0;
  }
}
.move-up-enter,
.move-up-appear {
  animation-duration: 0.2s;
  animation-fill-mode: both;
  animation-play-state: paused;
}
.move-up-leave {
  animation-duration: 0.2s;
  animation-fill-mode: both;
  animation-play-state: paused;
}
.move-up-enter.move-up-enter-active,
.move-up-appear.move-up-appear-active {
  animation-name: antMoveUpIn;
  animation-play-state: running;
}
.move-up-leave.move-up-leave-active {
  animation-name: antMoveUpOut;
  animation-play-state: running;
  pointer-events: none;
}
.move-up-enter,
.move-up-appear {
  opacity: 0;
  animation-timing-function: cubic-bezier(0.08, 0.82, 0.17, 1);
}
.move-up-leave {
  animation-timing-function: cubic-bezier(0.6, 0.04, 0.98, 0.34);
}
.move-down-enter,
.move-down-appear {
  animation-duration: 0.2s;
  animation-fill-mode: both;
  animation-play-state: paused;
}
.move-down-leave {
  animation-duration: 0.2s;
  animation-fill-mode: both;
  animation-play-state: paused;
}
.move-down-enter.move-down-enter-active,
.move-down-appear.move-down-appear-active {
  animation-name: antMoveDownIn;
  animation-play-state: running;
}
.move-down-leave.move-down-leave-active {
  animation-name: antMoveDownOut;
  animation-play-state: running;
  pointer-events: none;
}
.move-down-enter,
.move-down-appear {
  opacity: 0;
  animation-timing-function: cubic-bezier(0.08, 0.82, 0.17, 1);
}
.move-down-leave {
  animation-timing-function: cubic-bezier(0.6, 0.04, 0.98, 0.34);
}
.move-left-enter,
.move-left-appear {
  animation-duration: 0.2s;
  animation-fill-mode: both;
  animation-play-state: paused;
}
.move-left-leave {
  animation-duration: 0.2s;
  animation-fill-mode: both;
  animation-play-state: paused;
}
.move-left-enter.move-left-enter-active,
.move-left-appear.move-left-appear-active {
  animation-name: antMoveLeftIn;
  animation-play-state: running;
}
.move-left-leave.move-left-leave-active {
  animation-name: antMoveLeftOut;
  animation-play-state: running;
  pointer-events: none;
}
.move-left-enter,
.move-left-appear {
  opacity: 0;
  animation-timing-function: cubic-bezier(0.08, 0.82, 0.17, 1);
}
.move-left-leave {
  animation-timing-function: cubic-bezier(0.6, 0.04, 0.98, 0.34);
}
.move-right-enter,
.move-right-appear {
  animation-duration: 0.2s;
  animation-fill-mode: both;
  animation-play-state: paused;
}
.move-right-leave {
  animation-duration: 0.2s;
  animation-fill-mode: both;
  animation-play-state: paused;
}
.move-right-enter.move-right-enter-active,
.move-right-appear.move-right-appear-active {
  animation-name: antMoveRightIn;
  animation-play-state: running;
}
.move-right-leave.move-right-leave-active {
  animation-name: antMoveRightOut;
  animation-play-state: running;
  pointer-events: none;
}
.move-right-enter,
.move-right-appear {
  opacity: 0;
  animation-timing-function: cubic-bezier(0.08, 0.82, 0.17, 1);
}
.move-right-leave {
  animation-timing-function: cubic-bezier(0.6, 0.04, 0.98, 0.34);
}
@keyframes antMoveDownIn {
  0% {
    transform-origin: 0 0;
    transform: translateY(100%);
    opacity: 0;
  }
  100% {
    transform-origin: 0 0;
    transform: translateY(0%);
    opacity: 1;
  }
}
@keyframes antMoveDownOut {
  0% {
    transform-origin: 0 0;
    transform: translateY(0%);
    opacity: 1;
  }
  100% {
    transform-origin: 0 0;
    transform: translateY(100%);
    opacity: 0;
  }
}
@keyframes antMoveLeftIn {
  0% {
    transform-origin: 0 0;
    transform: translateX(-100%);
    opacity: 0;
  }
  100% {
    transform-origin: 0 0;
    transform: translateX(0%);
    opacity: 1;
  }
}
@keyframes antMoveLeftOut {
  0% {
    transform-origin: 0 0;
    transform: translateX(0%);
    opacity: 1;
  }
  100% {
    transform-origin: 0 0;
    transform: translateX(-100%);
    opacity: 0;
  }
}
@keyframes antMoveRightIn {
  0% {
    opacity: 0;
    transform-origin: 0 0;
    transform: translateX(100%);
  }
  100% {
    opacity: 1;
    transform-origin: 0 0;
    transform: translateX(0%);
  }
}
@keyframes antMoveRightOut {
  0% {
    transform-origin: 0 0;
    transform: translateX(0%);
    opacity: 1;
  }
  100% {
    transform-origin: 0 0;
    transform: translateX(100%);
    opacity: 0;
  }
}
@keyframes antMoveUpIn {
  0% {
    transform-origin: 0 0;
    transform: translateY(-100%);
    opacity: 0;
  }
  100% {
    transform-origin: 0 0;
    transform: translateY(0%);
    opacity: 1;
  }
}
@keyframes antMoveUpOut {
  0% {
    transform-origin: 0 0;
    transform: translateY(0%);
    opacity: 1;
  }
  100% {
    transform-origin: 0 0;
    transform: translateY(-100%);
    opacity: 0;
  }
}
@keyframes loadingCircle {
  0% {
    transform-origin: 50% 50%;
    transform: rotate(0deg);
  }
  100% {
    transform-origin: 50% 50%;
    transform: rotate(360deg);
  }
}
.slide-up-enter,
.slide-up-appear {
  animation-duration: 0.2s;
  animation-fill-mode: both;
  animation-play-state: paused;
}
.slide-up-leave {
  animation-duration: 0.2s;
  animation-fill-mode: both;
  animation-play-state: paused;
}
.slide-up-enter.slide-up-enter-active,
.slide-up-appear.slide-up-appear-active {
  animation-name: antSlideUpIn;
  animation-play-state: running;
}
.slide-up-leave.slide-up-leave-active {
  animation-name: antSlideUpOut;
  animation-play-state: running;
  pointer-events: none;
}
.slide-up-enter,
.slide-up-appear {
  opacity: 0;
  animation-timing-function: cubic-bezier(0.23, 1, 0.32, 1);
}
.slide-up-leave {
  animation-timing-function: cubic-bezier(0.755, 0.05, 0.855, 0.06);
}
.slide-down-enter,
.slide-down-appear {
  animation-duration: 0.2s;
  animation-fill-mode: both;
  animation-play-state: paused;
}
.slide-down-leave {
  animation-duration: 0.2s;
  animation-fill-mode: both;
  animation-play-state: paused;
}
.slide-down-enter.slide-down-enter-active,
.slide-down-appear.slide-down-appear-active {
  animation-name: antSlideDownIn;
  animation-play-state: running;
}
.slide-down-leave.slide-down-leave-active {
  animation-name: antSlideDownOut;
  animation-play-state: running;
  pointer-events: none;
}
.slide-down-enter,
.slide-down-appear {
  opacity: 0;
  animation-timing-function: cubic-bezier(0.23, 1, 0.32, 1);
}
.slide-down-leave {
  animation-timing-function: cubic-bezier(0.755, 0.05, 0.855, 0.06);
}
.slide-left-enter,
.slide-left-appear {
  animation-duration: 0.2s;
  animation-fill-mode: both;
  animation-play-state: paused;
}
.slide-left-leave {
  animation-duration: 0.2s;
  animation-fill-mode: both;
  animation-play-state: paused;
}
.slide-left-enter.slide-left-enter-active,
.slide-left-appear.slide-left-appear-active {
  animation-name: antSlideLeftIn;
  animation-play-state: running;
}
.slide-left-leave.slide-left-leave-active {
  animation-name: antSlideLeftOut;
  animation-play-state: running;
  pointer-events: none;
}
.slide-left-enter,
.slide-left-appear {
  opacity: 0;
  animation-timing-function: cubic-bezier(0.23, 1, 0.32, 1);
}
.slide-left-leave {
  animation-timing-function: cubic-bezier(0.755, 0.05, 0.855, 0.06);
}
.slide-right-enter,
.slide-right-appear {
  animation-duration: 0.2s;
  animation-fill-mode: both;
  animation-play-state: paused;
}
.slide-right-leave {
  animation-duration: 0.2s;
  animation-fill-mode: both;
  animation-play-state: paused;
}
.slide-right-enter.slide-right-enter-active,
.slide-right-appear.slide-right-appear-active {
  animation-name: antSlideRightIn;
  animation-play-state: running;
}
.slide-right-leave.slide-right-leave-active {
  animation-name: antSlideRightOut;
  animation-play-state: running;
  pointer-events: none;
}
.slide-right-enter,
.slide-right-appear {
  opacity: 0;
  animation-timing-function: cubic-bezier(0.23, 1, 0.32, 1);
}
.slide-right-leave {
  animation-timing-function: cubic-bezier(0.755, 0.05, 0.855, 0.06);
}
@keyframes antSlideUpIn {
  0% {
    opacity: 0;
    transform-origin: 0% 0%;
    transform: scaleY(0.8);
  }
  100% {
    opacity: 1;
    transform-origin: 0% 0%;
    transform: scaleY(1);
  }
}
@keyframes antSlideUpOut {
  0% {
    opacity: 1;
    transform-origin: 0% 0%;
    transform: scaleY(1);
  }
  100% {
    opacity: 0;
    transform-origin: 0% 0%;
    transform: scaleY(0.8);
  }
}
@keyframes antSlideDownIn {
  0% {
    opacity: 0;
    transform-origin: 100% 100%;
    transform: scaleY(0.8);
  }
  100% {
    opacity: 1;
    transform-origin: 100% 100%;
    transform: scaleY(1);
  }
}
@keyframes antSlideDownOut {
  0% {
    opacity: 1;
    transform-origin: 100% 100%;
    transform: scaleY(1);
  }
  100% {
    opacity: 0;
    transform-origin: 100% 100%;
    transform: scaleY(0.8);
  }
}
@keyframes antSlideLeftIn {
  0% {
    opacity: 0;
    transform-origin: 0% 0%;
    transform: scaleX(0.8);
  }
  100% {
    opacity: 1;
    transform-origin: 0% 0%;
    transform: scaleX(1);
  }
}
@keyframes antSlideLeftOut {
  0% {
    opacity: 1;
    transform-origin: 0% 0%;
    transform: scaleX(1);
  }
  100% {
    opacity: 0;
    transform-origin: 0% 0%;
    transform: scaleX(0.8);
  }
}
@keyframes antSlideRightIn {
  0% {
    opacity: 0;
    transform-origin: 100% 0%;
    transform: scaleX(0.8);
  }
  100% {
    opacity: 1;
    transform-origin: 100% 0%;
    transform: scaleX(1);
  }
}
@keyframes antSlideRightOut {
  0% {
    opacity: 1;
    transform-origin: 100% 0%;
    transform: scaleX(1);
  }
  100% {
    opacity: 0;
    transform-origin: 100% 0%;
    transform: scaleX(0.8);
  }
}
.swing-enter,
.swing-appear {
  animation-duration: 0.2s;
  animation-fill-mode: both;
  animation-play-state: paused;
}
.swing-enter.swing-enter-active,
.swing-appear.swing-appear-active {
  animation-name: antSwingIn;
  animation-play-state: running;
}
@keyframes antSwingIn {
  0%,
  100% {
    transform: translateX(0);
  }
  20% {
    transform: translateX(-10px);
  }
  40% {
    transform: translateX(10px);
  }
  60% {
    transform: translateX(-5px);
  }
  80% {
    transform: translateX(5px);
  }
}
.zoom-enter,
.zoom-appear {
  animation-duration: 0.2s;
  animation-fill-mode: both;
  animation-play-state: paused;
}
.zoom-leave {
  animation-duration: 0.2s;
  animation-fill-mode: both;
  animation-play-state: paused;
}
.zoom-enter.zoom-enter-active,
.zoom-appear.zoom-appear-active {
  animation-name: antZoomIn;
  animation-play-state: running;
}
.zoom-leave.zoom-leave-active {
  animation-name: antZoomOut;
  animation-play-state: running;
  pointer-events: none;
}
.zoom-enter,
.zoom-appear {
  transform: scale(0);
  animation-timing-function: cubic-bezier(0.08, 0.82, 0.17, 1);
}
.zoom-leave {
  animation-timing-function: cubic-bezier(0.78, 0.14, 0.15, 0.86);
}
.zoom-big-enter,
.zoom-big-appear {
  animation-duration: 0.2s;
  animation-fill-mode: both;
  animation-play-state: paused;
}
.zoom-big-leave {
  animation-duration: 0.2s;
  animation-fill-mode: both;
  animation-play-state: paused;
}
.zoom-big-enter.zoom-big-enter-active,
.zoom-big-appear.zoom-big-appear-active {
  animation-name: antZoomBigIn;
  animation-play-state: running;
}
.zoom-big-leave.zoom-big-leave-active {
  animation-name: antZoomBigOut;
  animation-play-state: running;
  pointer-events: none;
}
.zoom-big-enter,
.zoom-big-appear {
  transform: scale(0);
  animation-timing-function: cubic-bezier(0.08, 0.82, 0.17, 1);
}
.zoom-big-leave {
  animation-timing-function: cubic-bezier(0.78, 0.14, 0.15, 0.86);
}
.zoom-big-fast-enter,
.zoom-big-fast-appear {
  animation-duration: 0.1s;
  animation-fill-mode: both;
  animation-play-state: paused;
}
.zoom-big-fast-leave {
  animation-duration: 0.1s;
  animation-fill-mode: both;
  animation-play-state: paused;
}
.zoom-big-fast-enter.zoom-big-fast-enter-active,
.zoom-big-fast-appear.zoom-big-fast-appear-active {
  animation-name: antZoomBigIn;
  animation-play-state: running;
}
.zoom-big-fast-leave.zoom-big-fast-leave-active {
  animation-name: antZoomBigOut;
  animation-play-state: running;
  pointer-events: none;
}
.zoom-big-fast-enter,
.zoom-big-fast-appear {
  transform: scale(0);
  animation-timing-function: cubic-bezier(0.08, 0.82, 0.17, 1);
}
.zoom-big-fast-leave {
  animation-timing-function: cubic-bezier(0.78, 0.14, 0.15, 0.86);
}
.zoom-up-enter,
.zoom-up-appear {
  animation-duration: 0.2s;
  animation-fill-mode: both;
  animation-play-state: paused;
}
.zoom-up-leave {
  animation-duration: 0.2s;
  animation-fill-mode: both;
  animation-play-state: paused;
}
.zoom-up-enter.zoom-up-enter-active,
.zoom-up-appear.zoom-up-appear-active {
  animation-name: antZoomUpIn;
  animation-play-state: running;
}
.zoom-up-leave.zoom-up-leave-active {
  animation-name: antZoomUpOut;
  animation-play-state: running;
  pointer-events: none;
}
.zoom-up-enter,
.zoom-up-appear {
  transform: scale(0);
  animation-timing-function: cubic-bezier(0.08, 0.82, 0.17, 1);
}
.zoom-up-leave {
  animation-timing-function: cubic-bezier(0.78, 0.14, 0.15, 0.86);
}
.zoom-down-enter,
.zoom-down-appear {
  animation-duration: 0.2s;
  animation-fill-mode: both;
  animation-play-state: paused;
}
.zoom-down-leave {
  animation-duration: 0.2s;
  animation-fill-mode: both;
  animation-play-state: paused;
}
.zoom-down-enter.zoom-down-enter-active,
.zoom-down-appear.zoom-down-appear-active {
  animation-name: antZoomDownIn;
  animation-play-state: running;
}
.zoom-down-leave.zoom-down-leave-active {
  animation-name: antZoomDownOut;
  animation-play-state: running;
  pointer-events: none;
}
.zoom-down-enter,
.zoom-down-appear {
  transform: scale(0);
  animation-timing-function: cubic-bezier(0.08, 0.82, 0.17, 1);
}
.zoom-down-leave {
  animation-timing-function: cubic-bezier(0.78, 0.14, 0.15, 0.86);
}
.zoom-left-enter,
.zoom-left-appear {
  animation-duration: 0.2s;
  animation-fill-mode: both;
  animation-play-state: paused;
}
.zoom-left-leave {
  animation-duration: 0.2s;
  animation-fill-mode: both;
  animation-play-state: paused;
}
.zoom-left-enter.zoom-left-enter-active,
.zoom-left-appear.zoom-left-appear-active {
  animation-name: antZoomLeftIn;
  animation-play-state: running;
}
.zoom-left-leave.zoom-left-leave-active {
  animation-name: antZoomLeftOut;
  animation-play-state: running;
  pointer-events: none;
}
.zoom-left-enter,
.zoom-left-appear {
  transform: scale(0);
  animation-timing-function: cubic-bezier(0.08, 0.82, 0.17, 1);
}
.zoom-left-leave {
  animation-timing-function: cubic-bezier(0.78, 0.14, 0.15, 0.86);
}
.zoom-right-enter,
.zoom-right-appear {
  animation-duration: 0.2s;
  animation-fill-mode: both;
  animation-play-state: paused;
}
.zoom-right-leave {
  animation-duration: 0.2s;
  animation-fill-mode: both;
  animation-play-state: paused;
}
.zoom-right-enter.zoom-right-enter-active,
.zoom-right-appear.zoom-right-appear-active {
  animation-name: antZoomRightIn;
  animation-play-state: running;
}
.zoom-right-leave.zoom-right-leave-active {
  animation-name: antZoomRightOut;
  animation-play-state: running;
  pointer-events: none;
}
.zoom-right-enter,
.zoom-right-appear {
  transform: scale(0);
  animation-timing-function: cubic-bezier(0.08, 0.82, 0.17, 1);
}
.zoom-right-leave {
  animation-timing-function: cubic-bezier(0.78, 0.14, 0.15, 0.86);
}
@keyframes antZoomIn {
  0% {
    opacity: 0;
    transform: scale(0.2);
  }
  100% {
    opacity: 1;
    transform: scale(1);
  }
}
@keyframes antZoomOut {
  0% {
    transform: scale(1);
  }
  100% {
    opacity: 0;
    transform: scale(0.2);
  }
}
@keyframes antZoomBigIn {
  0% {
    opacity: 0;
    transform: scale(0.8);
  }
  100% {
    transform: scale(1);
  }
}
@keyframes antZoomBigOut {
  0% {
    transform: scale(1);
  }
  100% {
    opacity: 0;
    transform: scale(0.8);
  }
}
@keyframes antZoomUpIn {
  0% {
    opacity: 0;
    transform-origin: 50% 0%;
    transform: scale(0.8);
  }
  100% {
    transform-origin: 50% 0%;
    transform: scale(1);
  }
}
@keyframes antZoomUpOut {
  0% {
    transform-origin: 50% 0%;
    transform: scale(1);
  }
  100% {
    opacity: 0;
    transform-origin: 50% 0%;
    transform: scale(0.8);
  }
}
@keyframes antZoomLeftIn {
  0% {
    opacity: 0;
    transform-origin: 0% 50%;
    transform: scale(0.8);
  }
  100% {
    transform-origin: 0% 50%;
    transform: scale(1);
  }
}
@keyframes antZoomLeftOut {
  0% {
    transform-origin: 0% 50%;
    transform: scale(1);
  }
  100% {
    opacity: 0;
    transform-origin: 0% 50%;
    transform: scale(0.8);
  }
}
@keyframes antZoomRightIn {
  0% {
    opacity: 0;
    transform-origin: 100% 50%;
    transform: scale(0.8);
  }
  100% {
    transform-origin: 100% 50%;
    transform: scale(1);
  }
}
@keyframes antZoomRightOut {
  0% {
    transform-origin: 100% 50%;
    transform: scale(1);
  }
  100% {
    opacity: 0;
    transform-origin: 100% 50%;
    transform: scale(0.8);
  }
}
@keyframes antZoomDownIn {
  0% {
    opacity: 0;
    transform-origin: 50% 100%;
    transform: scale(0.8);
  }
  100% {
    transform-origin: 50% 100%;
    transform: scale(1);
  }
}
@keyframes antZoomDownOut {
  0% {
    transform-origin: 50% 100%;
    transform: scale(1);
  }
  100% {
    opacity: 0;
    transform-origin: 50% 100%;
    transform: scale(0.8);
  }
}
.ant-motion-collapse {
  overflow: hidden;
}
.ant-motion-collapse-active {
  transition: height 0.15s cubic-bezier(0.645, 0.045, 0.355, 1), opacity 0.15s cubic-bezier(0.645, 0.045, 0.355, 1) !important;
}
`,
                    `/**
 * Global styles for all components (NOTE: antd's global style is at components/style)
 */
.nz-overlay-container {
  pointer-events: none;
  top: 0;
  left: 0;
  height: 100%;
  width: 100%;
  position: fixed;
  z-index: 1000;
}
.nz-overlay-backdrop {
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  -webkit-tap-highlight-color: transparent;
  transition: opacity 0.4s cubic-bezier(0.25, 0.8, 0.25, 1);
  opacity: 0;
  position: absolute;
  pointer-events: auto;
  z-index: 1000;
}
.nz-overlay-pane {
  position: absolute;
  pointer-events: auto;
  z-index: 1000;
}
`,
                ],
                encapsulation: ViewEncapsulation.None,
            },] },
];
/**
 * @nocollapse
 */
NzRootStyleComponent.ctorParameters = () => [];

class NzRootModule {
    /**
     * @param {?} _document
     * @param {?} injector
     * @param {?} resolver
     */
    constructor(_document, injector, resolver) {
        const componentFactory = resolver.resolveComponentFactory(NzRootStyleComponent);
        const div = _document.createElement('div');
        this.styleHostComponent = componentFactory.create(injector, null, div);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.styleHostComponent.destroy();
    }
}
NzRootModule.decorators = [
    { type: NgModule, args: [{
                exports: [NzRootComponent],
                declarations: [NzRootComponent, NzRootStyleComponent],
                imports: [CommonModule],
                entryComponents: [NzRootStyleComponent],
                providers: [
                    { provide: APP_INITIALIZER, multi: true, useFactory: createNzRootInitializer, deps: [DOCUMENT, [new Optional(), NZ_ROOT_CONFIG]] },
                ],
            },] },
];
/**
 * @nocollapse
 */
NzRootModule.ctorParameters = () => [
    { type: Document, decorators: [{ type: Inject, args: [DOCUMENT,] },] },
    { type: Injector, },
    { type: ComponentFactoryResolver, },
];

class NzCarouselContentDirective {
    /**
     * @param {?} _el
     */
    constructor(_el) {
        this._el = _el;
        this.width = 0;
        this.isActive = false;
        this.left = null;
        this.top = null;
        this.fadeMode = false;
        this._nzSlickSlide = true;
        this.nativeElement = this._el.nativeElement;
    }
    /**
     * @return {?}
     */
    get setActiveClass() {
        return this.isActive === true;
    }
    /**
     * @return {?}
     */
    get setWidth() {
        return this.width;
    }
    /**
     * @return {?}
     */
    get setLeft() {
        return this.left;
    }
    /**
     * @return {?}
     */
    get setTop() {
        return this.top;
    }
    /**
     * @return {?}
     */
    get setPosition() {
        if (this.fadeMode) {
            return 'relative';
        }
    }
    /**
     * @return {?}
     */
    get setOpacity() {
        if (this.fadeMode) {
            return this.isActive ? 1 : 0;
        }
    }
}
NzCarouselContentDirective.decorators = [
    { type: Directive, args: [{
                selector: '[nz-carousel-content]',
            },] },
];
/**
 * @nocollapse
 */
NzCarouselContentDirective.ctorParameters = () => [
    { type: ElementRef, },
];
NzCarouselContentDirective.propDecorators = {
    '_nzSlickSlide': [{ type: HostBinding, args: ['class.slick-slide',] },],
    'setActiveClass': [{ type: HostBinding, args: ['class.slick-active',] },],
    'setWidth': [{ type: HostBinding, args: ['style.width.px',] },],
    'setLeft': [{ type: HostBinding, args: ['style.left.px',] },],
    'setTop': [{ type: HostBinding, args: ['style.top.px',] },],
    'setPosition': [{ type: HostBinding, args: ['style.position',] },],
    'setOpacity': [{ type: HostBinding, args: ['style.opacity',] },],
};

class NzCarouselComponent {
    /**
     * @param {?} hostElement
     * @param {?} _renderer
     */
    constructor(hostElement, _renderer) {
        this.hostElement = hostElement;
        this._renderer = _renderer;
        this.activeIndex = 0;
        this.transform = 'translate3d(0px, 0px, 0px)';
        this.nzAutoPlay = false;
        this.nzDots = true;
        this.nzEffect = 'scrollx';
        this.nzVertical = false;
        this._nzCarousel = true;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set _slideContents(value) {
        this.slideContents = value;
        this.renderContent();
    }
    /**
     * @param {?} content
     * @param {?} i
     * @return {?}
     */
    setActive(content, i) {
        this.clearInterval();
        if (this.nzAutoPlay) {
            this.createInterval();
        }
        this.activeIndex = i;
        if (this.nzEffect !== 'fade') {
            if (!this.nzVertical) {
                this.transform = `translate3d(${-this.activeIndex * this.hostElement.nativeElement.offsetWidth}px, 0px, 0px)`;
            }
            else {
                this.transform = `translate3d(0px, ${-this.activeIndex * this.hostElement.nativeElement.offsetHeight}px, 0px)`;
            }
        }
        this.slideContents.forEach(slide => {
            slide.isActive = false;
        });
        content.isActive = true;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.renderContent();
    }
    /**
     * @return {?}
     */
    renderContent() {
        setTimeout(_ => {
            if (this.slideContents.first) {
                this.slideContents.first.isActive = true;
            }
            this.slideContents.forEach((content, i) => {
                content.width = this.hostElement.nativeElement.offsetWidth;
                if (this.nzEffect === 'fade') {
                    content.fadeMode = true;
                    if (!this.nzVertical) {
                        content.left = -i * content.width;
                    }
                    else {
                        content.top = -i * this.hostElement.nativeElement.offsetHeight;
                    }
                }
            });
            if (this.nzAutoPlay) {
                this.createInterval();
            }
            if (this.nzVertical) {
                this._renderer.removeStyle(this.slickList.nativeElement, 'height');
                if (this.slideContents.first) {
                    this._renderer.setStyle(this.slickList.nativeElement, 'height', `${this.slideContents.first.nativeElement.offsetHeight}px`);
                }
                this._renderer.removeStyle(this.slickTrack.nativeElement, 'height');
                this._renderer.setStyle(this.slickTrack.nativeElement, 'height', `${this.slideContents.length * this.hostElement.nativeElement.offsetHeight}px`);
            }
            else {
                this._renderer.removeStyle(this.slickTrack.nativeElement, 'width');
                this._renderer.setStyle(this.slickTrack.nativeElement, 'width', `${this.slideContents.length * this.hostElement.nativeElement.offsetWidth}px`);
            }
        });
    }
    /**
     * @return {?}
     */
    createInterval() {
        this.interval = setInterval(_ => {
            if (this.activeIndex < this.slideContents.length - 1) {
                this.activeIndex++;
            }
            else {
                this.activeIndex = 0;
            }
            this.setActive(this.slideContents.toArray()[this.activeIndex], this.activeIndex);
        }, 3000);
    }
    /**
     * @return {?}
     */
    clearInterval() {
        if (this.interval) {
            clearInterval(this.interval);
            this.interval = null;
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.clearInterval();
    }
}
NzCarouselComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-carousel',
                encapsulation: ViewEncapsulation.None,
                template: `
    <div class="slick-initialized slick-slider" [class.slick-vertical]="nzVertical">
      <div class="slick-list" #slickList>
        <div class="slick-track" style="opacity: 1;" [style.transform]="transform" #slickTrack>
          <ng-content></ng-content>
        </div>
      </div>
      <ul class="slick-dots" style="display: block;" *ngIf="nzDots">
        <li [class.slick-active]="content.isActive" *ngFor="let content of slideContents; let i =index" (click)="setActive(content,i)">
          <button>1</button>
        </li>
      </ul>
    </div>`,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-carousel .slick-slider {
  position: relative;
  display: block;
  box-sizing: border-box;
  -webkit-touch-callout: none;
  -ms-touch-action: pan-y;
  touch-action: pan-y;
  -webkit-tap-highlight-color: transparent;
}
.ant-carousel .slick-list {
  position: relative;
  overflow: hidden;
  display: block;
  margin: 0;
  padding: 0;
}
.ant-carousel .slick-list:focus {
  outline: none;
}
.ant-carousel .slick-list.dragging {
  cursor: pointer;
}
.ant-carousel .slick-slider .slick-track,
.ant-carousel .slick-slider .slick-list {
  transform: translate3d(0, 0, 0);
}
.ant-carousel .slick-track {
  position: relative;
  left: 0;
  top: 0;
  display: block;
}
.ant-carousel .slick-track:before,
.ant-carousel .slick-track:after {
  content: "";
  display: table;
}
.ant-carousel .slick-track:after {
  clear: both;
}
.slick-loading .ant-carousel .slick-track {
  visibility: hidden;
}
.ant-carousel .slick-slide {
  float: left;
  height: 100%;
  min-height: 1px;
  display: none;
}
[dir="rtl"] .ant-carousel .slick-slide {
  float: right;
}
.ant-carousel .slick-slide img {
  display: block;
}
.ant-carousel .slick-slide.slick-loading img {
  display: none;
}
.ant-carousel .slick-slide.dragging img {
  pointer-events: none;
}
.ant-carousel .slick-initialized .slick-slide {
  display: block;
}
.ant-carousel .slick-loading .slick-slide {
  visibility: hidden;
}
.ant-carousel .slick-vertical .slick-slide {
  display: block;
  height: auto;
  border: 1px solid transparent;
}
.ant-carousel .slick-arrow.slick-hidden {
  display: none;
}
.ant-carousel .slick-prev,
.ant-carousel .slick-next {
  position: absolute;
  display: block;
  height: 20px;
  width: 20px;
  line-height: 0;
  font-size: 0;
  cursor: pointer;
  background: transparent;
  color: transparent;
  top: 50%;
  margin-top: -10px;
  padding: 0;
  border: 0;
  outline: none;
}
.ant-carousel .slick-prev:hover,
.ant-carousel .slick-next:hover,
.ant-carousel .slick-prev:focus,
.ant-carousel .slick-next:focus {
  outline: none;
  background: transparent;
  color: transparent;
}
.ant-carousel .slick-prev:hover:before,
.ant-carousel .slick-next:hover:before,
.ant-carousel .slick-prev:focus:before,
.ant-carousel .slick-next:focus:before {
  opacity: 1;
}
.ant-carousel .slick-prev.slick-disabled:before,
.ant-carousel .slick-next.slick-disabled:before {
  opacity: 0.25;
}
.ant-carousel .slick-prev {
  left: -25px;
}
.ant-carousel .slick-prev:before {
  content: "←";
}
.ant-carousel .slick-next {
  right: -25px;
}
.ant-carousel .slick-next:before {
  content: "→";
}
.ant-carousel .slick-dots {
  position: absolute;
  bottom: 12px;
  list-style: none;
  display: block;
  text-align: center;
  padding: 0;
  width: 100%;
  height: 3px;
}
.ant-carousel .slick-dots li {
  position: relative;
  display: inline-block;
  vertical-align: top;
  text-align: center;
  margin: 0 2px;
  padding: 0;
}
.ant-carousel .slick-dots li button {
  border: 0;
  cursor: pointer;
  background: #fff;
  opacity: 0.3;
  display: block;
  width: 16px;
  height: 3px;
  border-radius: 1px;
  outline: none;
  font-size: 0;
  color: transparent;
  transition: all .5s;
}
.ant-carousel .slick-dots li button:hover,
.ant-carousel .slick-dots li button:focus {
  opacity: 0.75;
}
.ant-carousel .slick-dots li.slick-active button {
  background: #fff;
  opacity: 1;
  width: 24px;
}
.ant-carousel .slick-dots li.slick-active button:hover,
.ant-carousel .slick-dots li.slick-active button:focus {
  opacity: 1;
}
.ant-carousel-vertical .slick-dots {
  width: 3px;
  bottom: auto;
  right: 12px;
  top: 50%;
  transform: translateY(-50%);
  height: auto;
}
.ant-carousel-vertical .slick-dots li {
  margin: 0 2px;
  vertical-align: baseline;
}
.ant-carousel-vertical .slick-dots li button {
  width: 3px;
  height: 16px;
}
.ant-carousel-vertical .slick-dots li.slick-active button {
  width: 3px;
  height: 24px;
}
`,
                    `nz-carousel {
  display: block;
  position: relative;
  width: 100%;
  height: 100%;
}
nz-carousel .slick-track {
  transition: all 0.5s ease;
}
nz-carousel .slick-track .slick-slide {
  transition: opacity 500ms ease;
}
`
                ]
            },] },
];
/**
 * @nocollapse
 */
NzCarouselComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
];
NzCarouselComponent.propDecorators = {
    '_slideContents': [{ type: ContentChildren, args: [NzCarouselContentDirective,] },],
    'slickList': [{ type: ViewChild, args: ['slickList',] },],
    'slickTrack': [{ type: ViewChild, args: ['slickTrack',] },],
    'nzAutoPlay': [{ type: Input },],
    'nzDots': [{ type: Input },],
    'nzEffect': [{ type: Input },],
    'nzVertical': [{ type: Input }, { type: HostBinding, args: ['class.ant-carousel-vertical',] },],
    '_nzCarousel': [{ type: HostBinding, args: ['class.ant-carousel',] },],
};

class NzCarouselModule {
}
NzCarouselModule.decorators = [
    { type: NgModule, args: [{
                declarations: [NzCarouselComponent, NzCarouselContentDirective],
                exports: [NzCarouselComponent, NzCarouselContentDirective],
                imports: [CommonModule]
            },] },
];
/**
 * @nocollapse
 */
NzCarouselModule.ctorParameters = () => [];

class NzCardComponent {
    constructor() {
        this.nzBordered = true;
        this.nzLoading = false;
        this.nzNoHovering = false;
        this._nzCard = true;
    }
}
NzCardComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-card',
                encapsulation: ViewEncapsulation.None,
                template: `
    <div class="ant-card-head" *ngIf="title">
      <h3 class="ant-card-head-title">
        <ng-template
          [ngTemplateOutlet]="title">
        </ng-template>
      </h3>
    </div>
    <div class="ant-card-extra" *ngIf="extra">
      <ng-template
        [ngTemplateOutlet]="extra">
      </ng-template>
    </div>
    <div class="ant-card-body">
      <ng-template
        *ngIf="!nzLoading"
        [ngTemplateOutlet]="body">
      </ng-template>
      <div *ngIf="nzLoading">
        <p class="ant-card-loading-block" style="width: 94%;"></p>
        <p>
          <span class="ant-card-loading-block" style="width: 28%;"></span><span class="ant-card-loading-block" style="width: 62%;"></span>
        </p>
        <p>
          <span class="ant-card-loading-block" style="width: 22%;"></span><span class="ant-card-loading-block" style="width: 66%;"></span>
        </p>
        <p>
          <span class="ant-card-loading-block" style="width: 56%;"></span><span class="ant-card-loading-block" style="width: 39%;"></span>
        </p>
        <p>
          <span class="ant-card-loading-block" style="width: 21%;"></span><span class="ant-card-loading-block" style="width: 15%;"></span><span class="ant-card-loading-block" style="width: 40%;"></span>
        </p>
      </div>
    </div>
  `,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-card {
  background: #fff;
  border-radius: 2px;
  font-size: 12px;
  position: relative;
  transition: all .3s;
}
.ant-card:not(.ant-card-no-hovering):hover {
  box-shadow: 0 1px 6px rgba(0, 0, 0, 0.2);
  border-color: transparent;
}
.ant-card-bordered {
  border: 1px solid #e9e9e9;
}
.ant-card-head {
  height: 48px;
  line-height: 48px;
  background: #fff;
  border-bottom: 1px solid #e9e9e9;
  padding: 0 24px;
  border-radius: 2px 2px 0 0;
}
.ant-card-head-title {
  font-size: 14px;
  display: inline-block;
  text-overflow: ellipsis;
  width: 100%;
  overflow: hidden;
  white-space: nowrap;
  color: rgba(0, 0, 0, 0.85);
  font-weight: 500;
}
.ant-card-extra {
  position: absolute;
  right: 24px;
  top: 14px;
}
.ant-card-body {
  padding: 24px;
  zoom: 1;
}
.ant-card-body:before,
.ant-card-body:after {
  content: " ";
  display: table;
}
.ant-card-body:after {
  clear: both;
  visibility: hidden;
  font-size: 0;
  height: 0;
}
.ant-card-loading .ant-card-body {
  user-select: none;
  padding: 0;
}
.ant-card-loading-content {
  padding: 24px;
}
.ant-card-loading-block {
  display: inline-block;
  margin: 5px 1% 0;
  height: 14px;
  border-radius: 2px;
  background: linear-gradient(90deg, rgba(207, 216, 220, 0.2), rgba(207, 216, 220, 0.4), rgba(207, 216, 220, 0.2));
  animation: card-loading 1.4s ease infinite;
  background-size: 600% 600%;
}
.ant-card-contain-grid .ant-card-body {
  margin: -0.5px;
  padding: 0;
}
.ant-card-grid {
  border-radius: 0;
  border: 0;
  box-shadow: 0 0 0 0.5px #e9e9e9, 0 0 0 0.5px #e9e9e9 inset;
  width: 33.33%;
  float: left;
  padding: 24px;
  transition: all .3s;
}
.ant-card-grid:hover {
  position: relative;
  z-index: 1;
  box-shadow: 0 1px 6px rgba(0, 0, 0, 0.2);
}
.ant-card-wider-padding .ant-card-head {
  padding: 0 32px;
}
.ant-card-wider-padding .ant-card-body {
  padding: 24px 32px;
}
.ant-card-wider-padding .ant-card-extra {
  right: 32px;
}
.ant-card-padding-transition .ant-card-head,
.ant-card-padding-transition .ant-card-body {
  transition: padding .3s;
}
.ant-card-padding-transition .ant-card-extra {
  transition: right .3s;
}
@keyframes card-loading {
  0%,
  100% {
    background-position: 0 50%;
  }
  50% {
    background-position: 100% 50%;
  }
}
`,
                    `nz-card {
  display: block;
  position: relative;
}
`
                ]
            },] },
];
/**
 * @nocollapse
 */
NzCardComponent.ctorParameters = () => [];
NzCardComponent.propDecorators = {
    'nzBordered': [{ type: Input }, { type: HostBinding, args: ['class.ant-card-bordered',] },],
    'nzLoading': [{ type: Input },],
    'nzNoHovering': [{ type: Input }, { type: HostBinding, args: ['class.ant-card-no-hovering',] },],
    'title': [{ type: ContentChild, args: ['title',] },],
    'extra': [{ type: ContentChild, args: ['extra',] },],
    'body': [{ type: ContentChild, args: ['body',] },],
    '_nzCard': [{ type: HostBinding, args: ['class.ant-card',] },],
};

class NzCardGridDirective {
    constructor() {
        this._nzCardGrid = true;
    }
}
NzCardGridDirective.decorators = [
    { type: Directive, args: [{
                selector: '[nz-card-grid]'
            },] },
];
/**
 * @nocollapse
 */
NzCardGridDirective.ctorParameters = () => [];
NzCardGridDirective.propDecorators = {
    '_nzCardGrid': [{ type: HostBinding, args: ['class.ant-card-grid',] },],
};

class NzCardModule {
}
NzCardModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [NzCardComponent, NzCardGridDirective],
                exports: [NzCardComponent, NzCardGridDirective]
            },] },
];
/**
 * @nocollapse
 */
NzCardModule.ctorParameters = () => [];

class NzCollapsesetComponent {
    constructor() {
        /**
         * all child collapse
         */
        this.panels = [];
        this.nzAccordion = false;
        this.nzBordered = true;
    }
    /**
     * @param {?} collapse
     * @return {?}
     */
    nzClick(collapse) {
        if (this.nzAccordion) {
            this.panels.map((item, index) => {
                const /** @type {?} */ curIndex = this.panels.indexOf(collapse);
                if (index !== curIndex) {
                    item.nzActive = false;
                }
            });
        }
    }
    /**
     * @param {?} collapse
     * @return {?}
     */
    addTab(collapse) {
        this.panels.push(collapse);
    }
}
NzCollapsesetComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-collapseset',
                encapsulation: ViewEncapsulation.None,
                template: `
    <div class="ant-collapse" [class.ant-collapse-borderless]="!nzBordered">
      <ng-content></ng-content>
    </div>
  `,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-collapse {
  background-color: #f7f7f7;
  border-radius: 4px;
  border: 1px solid #d9d9d9;
  border-bottom: 0;
}
.ant-collapse > .ant-collapse-item {
  border-bottom: 1px solid #d9d9d9;
}
.ant-collapse > .ant-collapse-item:last-child,
.ant-collapse > .ant-collapse-item:last-child > .ant-collapse-header {
  border-radius: 0 0 4px 4px;
}
.ant-collapse > .ant-collapse-item > .ant-collapse-header {
  line-height: 22px;
  padding: 8px 0 8px 32px;
  color: rgba(0, 0, 0, 0.85);
  cursor: pointer;
  position: relative;
  transition: all .3s;
}
.ant-collapse > .ant-collapse-item > .ant-collapse-header .arrow {
  font-size: 12px;
  font-size: 9px \9;
  transform: scale(0.75) rotate(0);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
  font-style: normal;
  vertical-align: baseline;
  text-align: center;
  text-transform: none;
  line-height: 1;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  position: absolute;
  color: rgba(0, 0, 0, 0.43);
  display: inline-block;
  font-weight: bold;
  line-height: 40px;
  vertical-align: middle;
  transition: transform 0.24s;
  top: 0;
  left: 16px;
}
:root .ant-collapse > .ant-collapse-item > .ant-collapse-header .arrow {
  filter: none;
}
:root .ant-collapse > .ant-collapse-item > .ant-collapse-header .arrow {
  font-size: 12px;
}
.ant-collapse > .ant-collapse-item > .ant-collapse-header .arrow:before {
  display: block;
  font-family: "anticon" !important;
}
.ant-collapse > .ant-collapse-item > .ant-collapse-header .arrow:before {
  content: "\\E61F";
}
.ant-collapse-anim-active {
  transition: height 0.2s cubic-bezier(0.215, 0.61, 0.355, 1);
}
.ant-collapse-content {
  overflow: hidden;
  color: rgba(0, 0, 0, 0.65);
  padding: 0 16px;
  background-color: #fff;
}
.ant-collapse-content > .ant-collapse-content-box {
  padding-top: 16px;
  padding-bottom: 16px;
}
.ant-collapse-content-inactive {
  display: none;
}
.ant-collapse-item:last-child > .ant-collapse-content {
  border-radius: 0 0 4px 4px;
}
.ant-collapse > .ant-collapse-item > .ant-collapse-header[aria-expanded="true"] .arrow {
  display: inline-block;
  font-size: 12px;
  font-size: 9px \9;
  transform: scale(0.75) rotate(90deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=0.00000000000000006123, M12=-1, M21=1, M22=0.00000000000000006123)";
  zoom: 1;
}
:root .ant-collapse > .ant-collapse-item > .ant-collapse-header[aria-expanded="true"] .arrow {
  filter: none;
}
:root .ant-collapse > .ant-collapse-item > .ant-collapse-header[aria-expanded="true"] .arrow {
  font-size: 12px;
}
.ant-collapse-borderless {
  background-color: #fff;
  border: 0;
}
.ant-collapse-borderless > .ant-collapse-item-active {
  border: 0;
}
.ant-collapse-borderless > .ant-collapse-item > .ant-collapse-content {
  background-color: transparent;
  border-top: 1px solid #d9d9d9;
}
.ant-collapse-borderless > .ant-collapse-item > .ant-collapse-header {
  transition: all .3s;
}
.ant-collapse-borderless > .ant-collapse-item > .ant-collapse-header:hover {
  background-color: #f7f7f7;
}
.ant-collapse .ant-collapse-item-disabled > .ant-collapse-header,
.ant-collapse .ant-collapse-item-disabled > .ant-collapse-header > .arrow {
  cursor: not-allowed;
  color: rgba(0, 0, 0, 0.25);
  background-color: #f7f7f7;
}
.ant-collapse > .ant-collapse-item:not(.ant-collapse-item-disabled) > .ant-collapse-header:active {
  background-color: #eee;
}
`,
                    `nz-collapse {
  display: block;
}
`
                ]
            },] },
];
/**
 * @nocollapse
 */
NzCollapsesetComponent.ctorParameters = () => [];
NzCollapsesetComponent.propDecorators = {
    'nzAccordion': [{ type: Input },],
    'nzBordered': [{ type: Input },],
};

class NzCollapseComponent {
    /**
     * @param {?} _collapseSet
     * @param {?} _elementRef
     */
    constructor(_collapseSet, _elementRef) {
        this._collapseSet = _collapseSet;
        this._elementRef = _elementRef;
        this._nzCollapseItem = true;
        this.nzDisabled = false;
        this._el = this._elementRef.nativeElement;
        this._collapseSet.addTab(this);
    }
    /**
     * @return {?}
     */
    get nzActive() {
        return this._active;
    }
    /**
     * @param {?} active
     * @return {?}
     */
    set nzActive(active) {
        if (this._active === active) {
            return;
        }
        if (!this.nzDisabled) {
            this._active = active;
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    clickHeader($event) {
        this.nzActive = !this.nzActive;
        /** trigger host collapseSet click event */
        this._collapseSet.nzClick(this);
    }
}
NzCollapseComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-collapse',
                template: `
    <div class="ant-collapse-header" [attr.aria-expanded]="_active" (click)="clickHeader($event)" role="tab">
      <i class="arrow"></i>
      {{ nzTitle }}
    </div>
    <div class="ant-collapse-content" [@collapseState]="_active?'active':'inactive'">
      <div class="ant-collapse-content-box">
        <ng-content></ng-content>
      </div>
    </div>
  `,
                animations: [
                    trigger('collapseState', [
                        state('inactive', style({
                            opacity: '0',
                            height: 0
                        })),
                        state('active', style({
                            opacity: '1',
                            height: '*'
                        })),
                        transition('inactive => active', animate('150ms ease-in')),
                        transition('active => inactive', animate('150ms ease-out'))
                    ])
                ]
            },] },
];
/**
 * @nocollapse
 */
NzCollapseComponent.ctorParameters = () => [
    { type: NzCollapsesetComponent, decorators: [{ type: Host },] },
    { type: ElementRef, },
];
NzCollapseComponent.propDecorators = {
    '_nzCollapseItem': [{ type: HostBinding, args: ['class.ant-collapse-item',] },],
    'nzTitle': [{ type: Input },],
    'nzDisabled': [{ type: Input }, { type: HostBinding, args: ['class.ant-collapse-item-disabled',] },],
    'nzActive': [{ type: Input },],
};

const NZ_COLLAPSE_DIRECTIVES = [NzCollapsesetComponent, NzCollapseComponent];
class NzCollapseModule {
}
NzCollapseModule.decorators = [
    { type: NgModule, args: [{
                declarations: NZ_COLLAPSE_DIRECTIVES,
                exports: NZ_COLLAPSE_DIRECTIVES,
                imports: [CommonModule]
            },] },
];
/**
 * @nocollapse
 */
NzCollapseModule.ctorParameters = () => [];

class NzTimelineItemComponent {
    constructor() {
        this.itemHeadClass = { 'ant-timeline-item-head-blue': true };
        this._color = 'blue';
        this._custom = false;
        this._lastItem = false;
    }
    /**
     * @return {?}
     */
    get nzColor() {
        return this._color;
    }
    /**
     * @param {?} color
     * @return {?}
     */
    set nzColor(color) {
        this._color = color;
        if (color === 'green') {
            this.itemHeadClass['ant-timeline-item-head-green'] = true;
        }
        else if (color === 'red') {
            this.itemHeadClass['ant-timeline-item-head-red'] = true;
        }
        else {
            this.itemHeadClass['ant-timeline-item-head-blue'] = true;
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this._customContent) {
            this._custom = true;
        }
    }
}
NzTimelineItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-timeline-item',
                encapsulation: ViewEncapsulation.None,
                template: `
    <li
      class="ant-timeline-item"
      [class.ant-timeline-item-last]="_lastItem">
      <div class="ant-timeline-item-tail"></div>
      <div class="ant-timeline-item-head"
        [class.ant-timeline-item-head-custom]="_custom"
        [ngClass]="itemHeadClass">
        <ng-template [ngTemplateOutlet]="_customContent">
        </ng-template>
      </div>
      <div class="ant-timeline-item-content">
        <ng-content></ng-content>
      </div>
    </li>`,
                styles: []
            },] },
];
/**
 * @nocollapse
 */
NzTimelineItemComponent.ctorParameters = () => [];
NzTimelineItemComponent.propDecorators = {
    '_customContent': [{ type: ContentChild, args: ['custom',] },],
    'nzColor': [{ type: Input },],
};

class NzTimelineComponent {
    constructor() {
        this._isPending = false;
        this.items = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this._pendingContent) {
            this._isPending = true;
        }
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        setTimeout(_ => {
            if (this._listOfTimeline && this._listOfTimeline.length) {
                const /** @type {?} */ listArray = this._listOfTimeline.toArray();
                listArray[listArray.length - 1]._lastItem = true;
            }
        });
    }
}
NzTimelineComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-timeline',
                encapsulation: ViewEncapsulation.None,
                template: `
    <ul class="ant-timeline" [class.ant-timeline-pending]="_isPending">
      <ng-content></ng-content>
      <li *ngIf="_isPending" class="ant-timeline-item ant-timeline-item-pending">
        <div class="ant-timeline-item-tail"></div>
        <div class="ant-timeline-item-head ant-timeline-item-head-blue"></div>
        <div class="ant-timeline-item-content">
          <ng-template [ngTemplateOutlet]="_pendingContent">
          </ng-template>
        </div>
      </li>
    </ul>`,
                styles: [`/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-timeline {
  list-style: none;
  margin: 0;
  padding: 0;
}
.ant-timeline-item {
  position: relative;
  padding: 0 0 12px;
  list-style: none;
  margin: 0;
}
.ant-timeline-item-tail {
  position: absolute;
  left: 5px;
  top: 0;
  height: 100%;
  border-left: 2px solid #e9e9e9;
}
.ant-timeline-item-pending .ant-timeline-item-tail {
  display: none;
}
.ant-timeline-item-head {
  position: absolute;
  width: 12px;
  height: 12px;
  background-color: #fff;
  border-radius: 100px;
  border: 2px solid transparent;
}
.ant-timeline-item-head-blue {
  border-color: #3FCE9E;
  color: #3FCE9E;
}
.ant-timeline-item-head-red {
  border-color: #f04134;
  color: #f04134;
}
.ant-timeline-item-head-green {
  border-color: #00a854;
  color: #00a854;
}
.ant-timeline-item-head-custom {
  position: absolute;
  text-align: center;
  width: 40px;
  left: -14px;
  line-height: 1;
  margin-top: 6px;
  border: 0;
  height: auto;
  border-radius: 0;
  padding: 3px 0;
  font-size: 12px;
  transform: translateY(-50%);
}
.ant-timeline-item-content {
  padding: 0 0 10px 24px;
  font-size: 12px;
  position: relative;
  top: -3px;
}
.ant-timeline-item-last .ant-timeline-item-tail {
  border-left: 2px dotted #e9e9e9;
  display: none;
}
.ant-timeline-item-last .ant-timeline-item-content {
  min-height: 48px;
}
.ant-timeline.ant-timeline-pending .ant-timeline-item-last .ant-timeline-item-tail {
  display: block;
}
`]
            },] },
];
/**
 * @nocollapse
 */
NzTimelineComponent.ctorParameters = () => [];
NzTimelineComponent.propDecorators = {
    '_listOfTimeline': [{ type: ContentChildren, args: [NzTimelineItemComponent,] },],
    '_pendingContent': [{ type: ContentChild, args: ['pending',] },],
};

class NzTimelineModule {
}
NzTimelineModule.decorators = [
    { type: NgModule, args: [{
                declarations: [NzTimelineItemComponent, NzTimelineComponent],
                exports: [NzTimelineItemComponent, NzTimelineComponent],
                imports: [CommonModule]
            },] },
];
/**
 * @nocollapse
 */
NzTimelineModule.ctorParameters = () => [];

const availablePrefixs = ['moz', 'ms', 'webkit'];
/**
 * @return {?}
 */
function requestAnimationFramePolyfill() {
    let /** @type {?} */ lastTime = 0;
    return function (callback) {
        const /** @type {?} */ currTime = new Date().getTime();
        const /** @type {?} */ timeToCall = Math.max(0, 16 - (currTime - lastTime));
        const /** @type {?} */ id = window.setTimeout(function () { callback(currTime + timeToCall); }, timeToCall);
        lastTime = currTime + timeToCall;
        return id;
    };
}
/**
 * @return {?}
 */
function getRequestAnimationFrame() {
    if (typeof window === 'undefined') {
        return () => { };
    }
    if (window.requestAnimationFrame) {
        // https://github.com/vuejs/vue/issues/4465
        return window.requestAnimationFrame.bind(window);
    }
    const /** @type {?} */ prefix = availablePrefixs.filter(key => `${key}RequestAnimationFrame` in window)[0];
    return prefix
        ? window[`${prefix}RequestAnimationFrame`]
        : requestAnimationFramePolyfill();
}
const reqAnimFrame = getRequestAnimationFrame();
/**
 * @param {?} t
 * @param {?} b
 * @param {?} c
 * @param {?} d
 * @return {?}
 */
function easeInOutCubic(t, b, c, d) {
    const /** @type {?} */ cc = c - b;
    t /= d / 2;
    if (t < 1) {
        return cc / 2 * t * t * t + b;
    }
    else {
        return cc / 2 * ((t -= 2) * t * t + 2) + b;
    }
}
class NzScrollService {
    /**
     * @param {?} doc
     */
    constructor(doc) {
        this.doc = doc;
    }
    /**
     * 设置 `el` 滚动条位置
     * @param {?} el
     * @param {?=} topValue
     * @return {?}
     */
    setScrollTop(el, topValue = 0) {
        if (el === window) {
            this.doc.body.scrollTop = topValue;
            this.doc.documentElement.scrollTop = topValue;
        }
        else {
            ((el)).scrollTop = topValue;
        }
    }
    /**
     * 获取 `el` 相对于视窗距离
     * @param {?} el
     * @return {?}
     */
    getOffset(el) {
        let /** @type {?} */ ret = {
            top: 0,
            left: 0
        };
        if (!el || !el.getClientRects().length)
            return ret;
        const /** @type {?} */ rect = el.getBoundingClientRect();
        if (rect.width || rect.height) {
            const /** @type {?} */ doc = el.ownerDocument.documentElement;
            ret.top = rect.top - doc.clientTop;
            ret.left = rect.left - doc.clientLeft;
        }
        else {
            ret.top = rect.top;
            ret.left = rect.left;
        }
        return ret;
    }
    /**
     * 获取 `el` 滚动条位置
     * @param {?=} el
     * @param {?=} top
     * @return {?}
     */
    getScroll(el, top = true) {
        if (!el)
            el = window;
        const /** @type {?} */ prop = top ? 'pageYOffset' : 'pageXOffset';
        const /** @type {?} */ method = top ? 'scrollTop' : 'scrollLeft';
        const /** @type {?} */ isWindow = el === window;
        let /** @type {?} */ ret = isWindow ? el[prop] : el[method];
        if (isWindow && typeof ret !== 'number')
            ret = this.doc.documentElement[method];
        return ret;
    }
    /**
     * 使用动画形式将 `el` 滚动至某位置
    
    \@param {(Element | Window)} containerEl 容器，默认 `window`
    \@param {number} [targetTopValue=0] 滚动至目标 `top` 值，默认：0，相当于顶部
    \@param {Function} [easing] 动作算法，默认：`easeInOutCubic`
    \@param {Function} [callback] 动画结束后回调
     * @param {?} containerEl
     * @param {?=} targetTopValue
     * @param {?=} easing
     * @param {?=} callback
     * @return {?}
     */
    scrollTo(containerEl, targetTopValue = 0, easing, callback) {
        if (!containerEl)
            containerEl = window;
        const /** @type {?} */ scrollTop = this.getScroll(containerEl);
        const /** @type {?} */ startTime = Date.now();
        const /** @type {?} */ frameFunc = () => {
            const /** @type {?} */ timestamp = Date.now();
            const /** @type {?} */ time = timestamp - startTime;
            this.setScrollTop(containerEl, (easing || easeInOutCubic)(time, scrollTop, targetTopValue, 450));
            if (time < 450) {
                reqAnimFrame(frameFunc);
            }
            else {
                if (callback)
                    callback();
            }
        };
        reqAnimFrame(frameFunc);
    }
}
NzScrollService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
NzScrollService.ctorParameters = () => [
    { type: Document, decorators: [{ type: Inject, args: [DOCUMENT,] },] },
];
/**
 * @param {?} doc
 * @param {?} scrollService
 * @return {?}
 */
function SCROLL_SERVICE_PROVIDER_FACTORY(doc, scrollService) {
    return scrollService || new NzScrollService(doc);
}
const SCROLL_SERVICE_PROVIDER = {
    provide: NzScrollService,
    useFactory: SCROLL_SERVICE_PROVIDER_FACTORY,
    deps: [DOCUMENT, [new Optional(), new SkipSelf(), NzScrollService]]
};

// import { Observable } from 'rxjs/Observable';
class NzBackTopComponent {
    /**
     * @param {?} scrollSrv
     * @param {?} _renderer
     */
    constructor(scrollSrv, _renderer) {
        this.scrollSrv = scrollSrv;
        this._renderer = _renderer;
        this.scroll$ = null;
        this.target = null;
        this._display = false;
        this.nzVisibilityHeight = 400;
        this.nzClick = new EventEmitter();
    }
    /**
     * @param {?} el
     * @return {?}
     */
    set nzTarget(el) {
        this.target = el;
        this.registerScrollEvent();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this.scroll$)
            this.registerScrollEvent();
    }
    /**
     * @return {?}
     */
    clickBackTop() {
        this.scrollSrv.scrollTo(this.getTarget(), 0);
        this.nzClick.emit(true);
    }
    /**
     * @return {?}
     */
    getTarget() {
        return this.target || window;
    }
    /**
     * @return {?}
     */
    handleScroll() {
        this._display = this.scrollSrv.getScroll(this.getTarget()) > this.nzVisibilityHeight;
    }
    /**
     * @return {?}
     */
    removeListen() {
        if (this.scroll$)
            this.scroll$.unsubscribe();
    }
    /**
     * @return {?}
     */
    registerScrollEvent() {
        this.removeListen();
        this.handleScroll();
        this.scroll$ = ((RxChain.from(fromEvent$1(this.getTarget(), 'scroll'))))
            .call(throttleTime$1, 50)
            .call(distinctUntilChanged$1)
            .subscribe(e => {
            this.handleScroll();
        });
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.removeListen();
    }
}
NzBackTopComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-back-top',
                encapsulation: ViewEncapsulation.None,
                animations: [
                    trigger('enterLeave', [
                        transition(':enter', [
                            style({ opacity: 0 }),
                            animate(300, style({ opacity: 1 }))
                        ]),
                        transition(':leave', [
                            style({ opacity: 1 }),
                            animate(300, style({ opacity: 0 }))
                        ])
                    ])
                ],
                template: `
  <div class="ant-back-top" (click)="clickBackTop()" [@enterLeave] *ngIf="_display">
    <ng-template #defaultContent>
      <div class="ant-back-top-content"><i class="anticon anticon-to-top ant-back-top-icon"></i></div>
    </ng-template>
    <ng-template [ngTemplateOutlet]="nzTemplate || defaultContent"></ng-template>
  </div>
  `,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-back-top {
  z-index: 10;
  position: fixed;
  right: 100px;
  bottom: 50px;
  height: 40px;
  width: 40px;
  cursor: pointer;
}
.ant-back-top-content {
  height: 40px;
  width: 40px;
  border-radius: 20px;
  background-color: rgba(64, 64, 64, 0.4);
  color: #fff;
  text-align: center;
  transition: all 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
}
.ant-back-top-content:hover {
  background-color: rgba(64, 64, 64, 0.6);
  transition: all 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
}
.ant-back-top-icon {
  font-size: 20px;
  margin-top: 10px;
}
`,
                    ``
                ]
            },] },
];
/**
 * @nocollapse
 */
NzBackTopComponent.ctorParameters = () => [
    { type: NzScrollService, },
    { type: Renderer2, },
];
NzBackTopComponent.propDecorators = {
    'nzTemplate': [{ type: ContentChild, args: ['nzTemplate',] },],
    'nzVisibilityHeight': [{ type: Input },],
    'nzTarget': [{ type: Input },],
    'nzClick': [{ type: Output },],
};

class NzBackTopModule {
}
NzBackTopModule.decorators = [
    { type: NgModule, args: [{
                declarations: [NzBackTopComponent],
                exports: [NzBackTopComponent],
                imports: [CommonModule],
                providers: [SCROLL_SERVICE_PROVIDER]
            },] },
];
/**
 * @nocollapse
 */
NzBackTopModule.ctorParameters = () => [];

// import { Observable } from 'rxjs/Observable';
class NzAffixComponent {
    /**
     * @param {?} scrollSrv
     * @param {?} _el
     * @param {?} _renderer
     */
    constructor(scrollSrv, _el, _renderer) {
        this.scrollSrv = scrollSrv;
        this._el = _el;
        this._renderer = _renderer;
        this.scroll$ = null;
        this.scrollWinInTarget$ = null;
        this.target = null;
        this.fixed = false;
        this.nzOffsetTop = 0;
        this.nzOffsetBottom = 0;
        this.nzChange = new EventEmitter();
    }
    /**
     * @param {?} el
     * @return {?}
     */
    set nzTarget(el) {
        this.target = el;
        this.registerScrollEvent();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this.scroll$)
            this.registerScrollEvent();
    }
    /**
     * @return {?}
     */
    getTarget() {
        return this.target || window;
    }
    /**
     * @return {?}
     */
    reCalculate() {
        let /** @type {?} */ elOffset = this.scrollSrv.getOffset(this._el.nativeElement);
        this.orgOffset = {
            top: elOffset.top + this.scrollSrv.getScroll(this.getTarget()),
            left: elOffset.left + this.scrollSrv.getScroll(this.getTarget(), false)
        };
        return this;
    }
    /**
     * @return {?}
     */
    process() {
        if (!this.orgOffset)
            this.reCalculate();
        const /** @type {?} */ containerScrollTop = this.scrollSrv.getScroll(this.getTarget());
        let /** @type {?} */ fixTop = this.getTarget() === window ? 0 : this.scrollSrv.getOffset(/** @type {?} */ (this.getTarget())).top;
        let /** @type {?} */ hasFixed = this.orgOffset.top - fixTop - containerScrollTop - this.nzOffsetTop <= 0;
        if (this.fixed === hasFixed)
            return;
        const /** @type {?} */ wrapEl = this.wrap.nativeElement;
        wrapEl.classList[hasFixed ? 'add' : 'remove']('ant-affix');
        if (hasFixed) {
            wrapEl.style.cssText = `top:${this.nzOffsetTop + fixTop}px;left:${this.orgOffset.left}px`;
        }
        else {
            wrapEl.style.cssText = ``;
        }
        this.fixed = hasFixed;
        this.nzChange.emit(hasFixed);
    }
    /**
     * @return {?}
     */
    removeListen() {
        if (this.scroll$)
            this.scroll$.unsubscribe();
        if (this.scrollWinInTarget$)
            this.scrollWinInTarget$.unsubscribe();
    }
    /**
     * @return {?}
     */
    registerScrollEvent() {
        this.removeListen();
        this.reCalculate().process();
        this.scroll$ = ((RxChain.from(fromEvent$1(this.getTarget(), 'scroll'))))
            .call(throttleTime$1, 50)
            .call(distinctUntilChanged$1)
            .subscribe(e => {
            this.process();
        });
        if (this.getTarget() !== window) {
            // 当 window 滚动位发生变动时，需要重新计算滚动容器
            this.scrollWinInTarget$ = ((RxChain.from(fromEvent$1(window, 'scroll'))))
                .call(throttleTime$1, 50)
                .call(distinctUntilChanged$1)
                .subscribe(e => {
                this.orgOffset = null;
                this.fixed = false;
            });
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.removeListen();
    }
}
NzAffixComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-affix',
                encapsulation: ViewEncapsulation.None,
                template: `<div #wrap><ng-content></ng-content></div>`,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-affix {
  position: fixed;
  z-index: 10;
}
`,
                    `nz-affix {
  display: block;
}
`
                ]
            },] },
];
/**
 * @nocollapse
 */
NzAffixComponent.ctorParameters = () => [
    { type: NzScrollService, },
    { type: ElementRef, },
    { type: Renderer2, },
];
NzAffixComponent.propDecorators = {
    'wrap': [{ type: ViewChild, args: ['wrap',] },],
    'nzTarget': [{ type: Input },],
    'nzOffsetTop': [{ type: Input },],
    'nzOffsetBottom': [{ type: Input },],
    'nzChange': [{ type: Output },],
};

class NzAffixModule {
}
NzAffixModule.decorators = [
    { type: NgModule, args: [{
                declarations: [NzAffixComponent],
                exports: [NzAffixComponent],
                imports: [CommonModule],
                providers: [SCROLL_SERVICE_PROVIDER]
            },] },
];
/**
 * @nocollapse
 */
NzAffixModule.ctorParameters = () => [];

// import { Observable } from 'rxjs/Observable';
class NzAnchorComponent {
    /**
     * @param {?} scrollSrv
     * @param {?} _renderer
     * @param {?} doc
     */
    constructor(scrollSrv, _renderer, doc) {
        this.scrollSrv = scrollSrv;
        this._renderer = _renderer;
        this.doc = doc;
        this.links = [];
        this.scroll$ = null;
        this.target = null;
        this.animating = false;
        this._top = 0;
        this._visible = false;
        this.nzOffsetTop = 0;
        this.nzBounds = 5;
        this.nzScroll = new EventEmitter();
    }
    /**
     * @param {?} el
     * @return {?}
     */
    set nzTarget(el) {
        this.target = el;
        this.registerScrollEvent();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this.scroll$)
            this.registerScrollEvent();
    }
    /**
     * @return {?}
     */
    getTarget() {
        return this.target || window;
    }
    /**
     * @return {?}
     */
    handleScroll() {
        if (this.animating)
            return;
        let /** @type {?} */ sections = [];
        this.links.forEach(comp => {
            comp.active = false;
            const /** @type {?} */ target = this.doc.querySelector(comp.nzHref);
            const /** @type {?} */ top = this.scrollSrv.getOffset(target).top;
            if (target && top < this.nzOffsetTop + this.nzBounds) {
                sections.push({
                    top,
                    comp
                });
            }
        });
        this._visible = !!sections.length;
        if (!this._visible)
            return;
        const /** @type {?} */ maxSection = sections.reduce((prev, curr) => curr.top > prev.top ? curr : prev);
        maxSection.comp.active = true;
        let /** @type {?} */ linkNode = (((maxSection.comp.el.nativeElement)).querySelector('.ant-anchor-link-title'));
        this.ball.nativeElement.style.top = `${linkNode.offsetTop + linkNode.clientHeight / 2 - 4.5}px`;
        // console.log(linkNode, linkNode.offsetTop + linkNode.clientHeight / 2 - 4.5);
        this.nzScroll.emit(maxSection.comp);
    }
    /**
     * @return {?}
     */
    removeListen() {
        if (this.scroll$)
            this.scroll$.unsubscribe();
    }
    /**
     * @return {?}
     */
    registerScrollEvent() {
        this.removeListen();
        // 由于页面刷新时滚动条位置的记忆
        // 倒置在dom未渲染完成，导致计算不正确（500ms用于延后执行解决）
        setTimeout(() => {
            this.handleScroll();
        }, 500);
        this.scroll$ = ((RxChain.from(fromEvent$1(this.getTarget(), 'scroll'))))
            .call(throttleTime$1, 50)
            .call(distinctUntilChanged$1)
            .subscribe(e => {
            this.handleScroll();
        });
    }
    /**
     * @param {?} linkComp
     * @return {?}
     */
    add(linkComp) {
        this.links.push(linkComp);
    }
    /**
     * 设置滚动条至 `linkComp` 所处位置
     * @param {?} linkComp
     * @return {?}
     */
    scrollTo(linkComp) {
        const /** @type {?} */ el = this.doc.querySelector(linkComp.nzHref);
        if (!el)
            return;
        this.animating = true;
        const /** @type {?} */ containerScrollTop = this.scrollSrv.getScroll(this.getTarget());
        const /** @type {?} */ elOffsetTop = this.scrollSrv.getOffset(el).top;
        const /** @type {?} */ targetScrollTop = containerScrollTop + elOffsetTop - this.nzOffsetTop;
        this.scrollSrv.scrollTo(this.getTarget(), targetScrollTop, null, () => {
            this.animating = false;
            this.handleScroll();
        });
        if (!location.href.includes('#'))
            history.pushState(null, '', linkComp.nzHref);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.removeListen();
    }
}
NzAnchorComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-anchor',
                encapsulation: ViewEncapsulation.None,
                template: `
  <div class="ant-anchor-wrapper" #container>
    <div class="ant-anchor">
      <div class="ant-anchor-ink">
        <div class="ant-anchor-ink-ball" [class.visible]="_visible" #ball></div>
      </div>
      <ng-content></ng-content>
    </div>
  </div>
  `,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-anchor {
  position: relative;
}
.ant-anchor-wrapper {
  background-color: #fff;
}
.ant-anchor-ink {
  position: absolute;
  height: 100%;
  left: 0;
  top: 0;
}
.ant-anchor-ink:before {
  content: ' ';
  position: relative;
  width: 2px;
  height: 100%;
  display: block;
  background-color: #e9e9e9;
  margin: 0 auto;
}
.ant-anchor-ink-ball {
  display: none;
  position: absolute;
  width: 9px;
  height: 9px;
  border-radius: 9px;
  border: 3px solid #3FCE9E;
  background-color: #fff;
  left: 50%;
  transition: top 0.3s ease-in-out;
  transform: translateX(-50%);
}
.ant-anchor-ink-ball.visible {
  display: inline-block;
}
.ant-anchor.fixed .ant-anchor-ink .ant-anchor-ink-ball {
  display: none;
}
.ant-anchor-link {
  padding: 8px 0 8px 18px;
  line-height: 1;
}
.ant-anchor-link .ant-anchor-link {
  padding-top: 6px;
  padding-bottom: 6px;
}
.ant-anchor-link-title {
  display: block;
  position: relative;
  transition: all .3s;
  color: rgba(0, 0, 0, 0.65);
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  margin-bottom: 8px;
}
.ant-anchor-link-title:only-child {
  margin-bottom: 0;
}
.ant-anchor-link-active > .ant-anchor-link-title {
  color: #3FCE9E;
}
.ant-anchor-link > .ant-anchor-link {
  font-size: 12px;
}
`,
                    `nz-link {
  display: block;
}
`
                ]
            },] },
];
/**
 * @nocollapse
 */
NzAnchorComponent.ctorParameters = () => [
    { type: NzScrollService, },
    { type: Renderer2, },
    { type: Document, decorators: [{ type: Inject, args: [DOCUMENT,] },] },
];
NzAnchorComponent.propDecorators = {
    'container': [{ type: ViewChild, args: ['container',] },],
    'ball': [{ type: ViewChild, args: ['ball',] },],
    'nzTarget': [{ type: Input },],
    'nzOffsetTop': [{ type: Input },],
    'nzBounds': [{ type: Input },],
    'nzScroll': [{ type: Output },],
};

class NzAnchorLinkComponent {
    /**
     * @param {?} el
     * @param {?} _anchorComp
     */
    constructor(el, _anchorComp) {
        this.el = el;
        this._anchorComp = _anchorComp;
        this._nzAnchorLink = true;
        this.active = false;
        this._anchorComp.add(this);
    }
    /**
     * @return {?}
     */
    _onClick() {
        this._anchorComp.scrollTo(this);
    }
    /**
     * @param {?} e
     * @return {?}
     */
    goToClick(e) {
        e.preventDefault();
        e.stopPropagation();
        this._anchorComp.scrollTo(this);
        // return false;
    }
}
NzAnchorLinkComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-link',
                encapsulation: ViewEncapsulation.None,
                template: `
    <a (click)="goToClick($event)" href="{{nzHref}}" class="ant-anchor-link-title">
      <span *ngIf="!nzTemplate">{{nzTitle}}</span>
      <ng-template *ngIf="nzTemplate" [ngTemplateOutlet]="nzTemplate"></ng-template>
    </a>
    <ng-content></ng-content>
  `
            },] },
];
/**
 * @nocollapse
 */
NzAnchorLinkComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: NzAnchorComponent, },
];
NzAnchorLinkComponent.propDecorators = {
    'nzHref': [{ type: Input },],
    'nzTitle': [{ type: Input },],
    'nzTemplate': [{ type: ContentChild, args: ['nzTemplate',] },],
    '_nzAnchorLink': [{ type: HostBinding, args: ['class.ant-anchor-link',] },],
    'active': [{ type: HostBinding, args: ['class.ant-anchor-link-active',] },],
    '_onClick': [{ type: HostListener, args: ['click',] },],
};

class NzAnchorModule {
}
NzAnchorModule.decorators = [
    { type: NgModule, args: [{
                declarations: [NzAnchorComponent, NzAnchorLinkComponent],
                exports: [NzAnchorComponent, NzAnchorLinkComponent],
                imports: [CommonModule],
                providers: [SCROLL_SERVICE_PROVIDER]
            },] },
];
/**
 * @nocollapse
 */
NzAnchorModule.ctorParameters = () => [];

class NzAvatarComponent {
    /**
     * @param {?} _elementRef
     * @param {?} _renderer
     */
    constructor(_elementRef, _renderer) {
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this._prefixCls = 'ant-avatar';
        this._classList = [];
        this._sizeMap = { large: 'lg', small: 'sm' };
        this._hasText = false;
        this._isSrcExist = true;
        this._hasIcon = false;
        this.nzShape = 'circle';
        this.nzSize = 'default';
        this._el = _elementRef.nativeElement;
        this._renderer.addClass(this._el, this._prefixCls);
    }
    /**
     * @return {?}
     */
    _setClassMap() {
        this._classList.forEach(_className => {
            this._renderer.removeClass(this._el, _className);
        });
        this._classList = [
            this._sizeMap[this.nzSize] && `${this._prefixCls}-${this._sizeMap[this.nzSize]}`,
            this.nzShape && `${this._prefixCls}-${this.nzShape}`,
            this.nzIcon && `${this._prefixCls}-icon`,
            this.nzSrc && `${this._prefixCls}-image`
        ].filter((item) => {
            return !!item;
        });
        this._classList.forEach(_className => {
            this._renderer.addClass(this._el, _className);
        });
        return this;
    }
    /**
     * @return {?}
     */
    _imgError() {
        this._isSrcExist = false;
        // TODO(i): need force remove [nzSrc] if broken image?
        this._hasIcon = false;
        this._hasText = false;
        if (this.nzIcon) {
            this._hasIcon = true;
        }
        else if (this.nzText) {
            this._hasText = true;
        }
        this._setClassMap()._notifyCalc();
    }
    /**
     * @return {?}
     */
    _calcStringSize() {
        if (!this._hasText)
            return;
        const /** @type {?} */ el = this._textEl && this._textEl.nativeElement;
        if (!el)
            return;
        const /** @type {?} */ childrenWidth = el.offsetWidth;
        const /** @type {?} */ avatarWidth = this._el.getBoundingClientRect().width;
        const /** @type {?} */ scale = avatarWidth - 8 < childrenWidth ? (avatarWidth - 8) / childrenWidth : 1;
        if (scale === 1) {
            this._textStyles = {};
        }
        else {
            this._textStyles = {
                transform: `scale(${scale})`,
                position: 'absolute',
                display: 'inline-block',
                left: `calc(50% - ${Math.round(childrenWidth / 2)}px)`
            };
        }
    }
    /**
     * @return {?}
     */
    _notifyCalc() {
        // If use ngAfterViewChecked, always demands more computations, so......
        setTimeout(() => {
            this._calcStringSize();
        });
        return this;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this._hasText = !this.nzSrc && !!this.nzText;
        this._hasIcon = !this.nzSrc && !!this.nzIcon;
        this._setClassMap()._notifyCalc();
    }
}
NzAvatarComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-avatar',
                encapsulation: ViewEncapsulation.None,
                template: `
  <i class="anticon anticon-{{nzIcon}}" *ngIf="nzIcon && _hasIcon"></i>
  <img [src]="nzSrc" *ngIf="nzSrc && _isSrcExist" (error)="_imgError($event)"/>
  <span class="ant-avatar-string" #textEl [ngStyle]="_textStyles" *ngIf="nzText && _hasText">{{nzText}}</span>
  `,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-avatar {
  display: inline-block;
  text-align: center;
  background: #ccc;
  color: #fff;
  white-space: nowrap;
  position: relative;
  overflow: hidden;
  width: 32px;
  height: 32px;
  line-height: 32px;
  border-radius: 16px;
}
.ant-avatar > * {
  line-height: 32px;
}
.ant-avatar.ant-avatar-icon {
  font-size: 18px;
}
.ant-avatar-lg {
  width: 40px;
  height: 40px;
  line-height: 40px;
  border-radius: 20px;
}
.ant-avatar-lg > * {
  line-height: 40px;
}
.ant-avatar-lg.ant-avatar-icon {
  font-size: 24px;
}
.ant-avatar-sm {
  width: 24px;
  height: 24px;
  line-height: 24px;
  border-radius: 12px;
}
.ant-avatar-sm > * {
  line-height: 24px;
}
.ant-avatar-sm.ant-avatar-icon {
  font-size: 14px;
}
.ant-avatar-square {
  border-radius: 4px;
}
.ant-avatar > img {
  width: 100%;
  height: 100%;
}
`,
                    ``
                ]
            },] },
];
/**
 * @nocollapse
 */
NzAvatarComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
];
NzAvatarComponent.propDecorators = {
    '_textEl': [{ type: ViewChild, args: ['textEl',] },],
    'nzShape': [{ type: Input },],
    'nzSize': [{ type: Input },],
    'nzText': [{ type: Input },],
    'nzSrc': [{ type: Input },],
    'nzIcon': [{ type: Input },],
};

class NzAvatarModule {
}
NzAvatarModule.decorators = [
    { type: NgModule, args: [{
                declarations: [NzAvatarComponent],
                exports: [NzAvatarComponent],
                imports: [CommonModule]
            },] },
];
/**
 * @nocollapse
 */
NzAvatarModule.ctorParameters = () => [];

class NzMessageBaseService {
    /**
     * @param {?} floaterService
     * @param {?} containerClass
     * @param {?=} _idPrefix
     */
    constructor(floaterService, containerClass, _idPrefix = '') {
        this._idPrefix = _idPrefix;
        this._counter = 0; // Id counter for messages
        this._container = floaterService.persistAttachComponent(containerClass);
    }
    /**
     * @param {?=} messageId
     * @return {?}
     */
    remove(messageId) {
        if (messageId) {
            this._container.removeMessage(messageId);
        }
        else {
            this._container.removeMessageAll();
        }
    }
    /**
     * @param {?} message
     * @param {?=} options
     * @return {?}
     */
    createMessage(message, options) {
        const /** @type {?} */ resultMessage = Object.assign(message, {
            messageId: this._generateMessageId(),
            options: options,
            createdAt: new Date()
        });
        this._container.createMessage(resultMessage);
        return resultMessage;
    }
    /**
     * @return {?}
     */
    _generateMessageId() {
        return this._idPrefix + this._counter++;
    }
}
class NzMessageService extends NzMessageBaseService {
    /**
     * @param {?} floaterService
     */
    constructor(floaterService) {
        super(floaterService, NzMessageContainerComponent, 'message-');
    }
    /**
     * @param {?} content
     * @param {?=} options
     * @return {?}
     */
    success(content, options) {
        return this.createMessage({ type: 'success', content: content }, options);
    }
    /**
     * @param {?} content
     * @param {?=} options
     * @return {?}
     */
    error(content, options) {
        return this.createMessage({ type: 'error', content: content }, options);
    }
    /**
     * @param {?} content
     * @param {?=} options
     * @return {?}
     */
    info(content, options) {
        return this.createMessage({ type: 'info', content: content }, options);
    }
    /**
     * @param {?} content
     * @param {?=} options
     * @return {?}
     */
    warning(content, options) {
        return this.createMessage({ type: 'warning', content: content }, options);
    }
    /**
     * @param {?} content
     * @param {?=} options
     * @return {?}
     */
    loading(content, options) {
        return this.createMessage({ type: 'loading', content: content }, options);
    }
    /**
     * @param {?} type
     * @param {?} content
     * @param {?=} options
     * @return {?}
     */
    create(type, content, options) {
        return this.createMessage({ type: /** @type {?} */ (type), content: content }, options);
    }
    /**
     * @param {?} html
     * @param {?=} options
     * @return {?}
     */
    html(html, options) {
        return this.createMessage({ html: html }, options);
    }
}
NzMessageService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
NzMessageService.ctorParameters = () => [
    { type: FloaterService, },
];

class NzNotificationService extends NzMessageBaseService {
    /**
     * @param {?} floaterService
     */
    constructor(floaterService) {
        super(floaterService, NzNotificationContainerComponent, 'notification-');
    }
    /**
     * @param {?} title
     * @param {?} content
     * @param {?=} options
     * @return {?}
     */
    success(title, content, options) {
        return this.createMessage({ type: 'success', title: title, content: content }, options);
    }
    /**
     * @param {?} title
     * @param {?} content
     * @param {?=} options
     * @return {?}
     */
    error(title, content, options) {
        return this.createMessage({ type: 'error', title: title, content: content }, options);
    }
    /**
     * @param {?} title
     * @param {?} content
     * @param {?=} options
     * @return {?}
     */
    info(title, content, options) {
        return this.createMessage({ type: 'info', title: title, content: content }, options);
    }
    /**
     * @param {?} title
     * @param {?} content
     * @param {?=} options
     * @return {?}
     */
    warning(title, content, options) {
        return this.createMessage({ type: 'warning', title: title, content: content }, options);
    }
    /**
     * @param {?} title
     * @param {?} content
     * @param {?=} options
     * @return {?}
     */
    blank(title, content, options) {
        return this.createMessage({ type: 'blank', title: title, content: content }, options);
    }
    /**
     * @param {?} type
     * @param {?} title
     * @param {?} content
     * @param {?=} options
     * @return {?}
     */
    create(type, title, content, options) {
        return this.createMessage({ type: /** @type {?} */ (type), title: title, content: content }, options);
    }
    /**
     * @param {?} html
     * @param {?=} options
     * @return {?}
     */
    html(html, options) {
        return this.createMessage({ html: html }, options);
    }
}
NzNotificationService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
NzNotificationService.ctorParameters = () => [
    { type: FloaterService, },
];

// ---------------------------------------------------------
// | Imports
// ---------------------------------------------------------
// Common of angular
// Modules
// Services
// Tokens (eg. global services' config)
class AntNgModule {
    /**
     * @param {?=} options
     * @return {?}
     */
    static forRoot(options) {
        return {
            ngModule: AntNgModule,
            providers: [
                // Services
                NzNotificationService,
                NzMessageService,
                { provide: NZ_ROOT_CONFIG, useValue: options },
            ]
        };
    }
}
AntNgModule.decorators = [
    { type: NgModule, args: [{
                exports: [
                    NzButtonModule,
                    NzAlertModule,
                    NzBadgeModule,
                    NzCalendarModule,
                    NzCascaderModule,
                    NzCheckboxModule,
                    NzDatePickerModule,
                    NzFormModule,
                    NzInputModule,
                    NzInputNumberModule,
                    NzGridModule,
                    NzMessageModule,
                    NzModalModule,
                    NzNotificationModule,
                    NzPaginationModule,
                    NzPopconfirmModule,
                    NzPopoverModule,
                    NzRadioModule,
                    NzRateModule,
                    NzSelectModule,
                    NzSpinModule,
                    NzSliderModule,
                    NzSwitchModule,
                    NzProgressModule,
                    NzTableModule,
                    NzTabsModule,
                    NzTagModule,
                    NzTimePickerModule,
                    NzUtilModule,
                    NzStepsModule,
                    NzDropDownModule,
                    NzMenuModule,
                    NzBreadCrumbModule,
                    NzLayoutModule,
                    NzRootModule,
                    NzCarouselModule,
                    NzCardModule,
                    NzCollapseModule,
                    NzTimelineModule,
                    NzToolTipModule,
                    NzBackTopModule,
                    NzAffixModule,
                    NzAnchorModule,
                    NzAvatarModule
                ]
            },] },
];
/**
 * @nocollapse
 */
AntNgModule.ctorParameters = () => [];

/**
 * Generated bundle index. Do not edit.
 */

export { NzGridModule, NzButtonModule, NzAlertModule, NzBadgeModule, NzCalendarModule, NzCascaderModule, NzCheckboxModule, NzDatePickerModule, NzFormModule, NzInputModule, NzInputNumberModule, NzMessageModule, NzModalModule, NzNotificationModule, NzPaginationModule, NzPopconfirmModule, NzPopoverModule, NzRadioModule, NzRateModule, NzSelectModule, NzSpinModule, NzProgressModule, NzSliderModule, NzSwitchModule, NzTableModule, NzTabsModule, NzTagModule, NzTimePickerModule, NzUtilModule, NzStepsModule, NzDropDownModule, NzMenuModule, NzBreadCrumbModule, NzLayoutModule, NzRootModule, NzCarouselModule, NzCardModule, NzCollapseModule, NzTimelineModule, NzToolTipModule, NzBackTopModule, NzAffixModule, NzAnchorModule, NzAvatarModule, NzNotificationService, NzMessageService, NzModalService, NzModalSubject, NZ_MESSAGE_CONFIG, NZ_NOTIFICATION_CONFIG, NZ_ROOT_CONFIG, AntNgModule, NzAffixComponent as ɵfm, NzAlertComponent as ɵl, NzAnchorLinkComponent as ɵfo, NzAnchorComponent as ɵfn, NzAvatarComponent as ɵfp, NzBackTopComponent as ɵfi, NzBadgeComponent as ɵn, NzBreadCrumbItemComponent as ɵes, NzBreadCrumbComponent as ɵer, NzButtonGroupComponent as ɵk, NzButtonComponent as ɵj, NzCalendarComponent as ɵbo, NzCardGridDirective as ɵfd, NzCardComponent as ɵfc, NzCarouselContentDirective as ɵfb, NzCarouselComponent as ɵfa, NzCascaderComponent as ɵbs, NzCheckboxGroupComponent as ɵbu, NzCheckboxComponent as ɵbt, NzCollapseComponent as ɵff, NZ_COLLAPSE_DIRECTIVES as ɵa, NzCollapsesetComponent as ɵfe, DropDownAnimation as ɵbj, FadeAnimation as ɵm, TagAnimation as ɵbk, FLOATER_SERVICE_PROVIDER as ɵcp, FLOATER_SERVICE_PROVIDER_FACTORY as ɵco, FloaterService as ɵcn, FloaterModule as ɵcm, OVERLAY_PROVIDERS as ɵo, OverlayModule as ɵp, Overlay as ɵq, OVERLAY_CONTAINER_PROVIDER as ɵt, OVERLAY_CONTAINER_PROVIDER_FACTORY as ɵs, OverlayContainer as ɵr, ConnectedOverlayDirective as ɵv, OverlayOrigin as ɵu, OverlayPositionBuilder as ɵbf, VIEWPORT_RULER_PROVIDER as ɵy, VIEWPORT_RULER_PROVIDER_FACTORY as ɵx, ViewportRuler as ɵw, ScrollDispatchModule as ɵz, SCROLL_DISPATCHER_PROVIDER as ɵbd, SCROLL_DISPATCHER_PROVIDER_FACTORY as ɵbc, ScrollDispatcher as ɵbb, ScrollStrategyOptions as ɵbe, Scrollable as ɵba, NzScrollService as ɵfj, SCROLL_SERVICE_PROVIDER as ɵfl, SCROLL_SERVICE_PROVIDER_FACTORY as ɵfk, NzDatePickerComponent as ɵby, NzDropDownButtonComponent as ɵeq, NzDropDownComponent as ɵdq, NzDropDownDirective as ɵdr, NzFormControlComponent as ɵcd, NzFormExplainComponent as ɵce, NzFormExtraDirective as ɵbz, NzFormItemRequiredDirective as ɵch, NzFormItemDirective as ɵcc, NzFormLabelDirective as ɵca, NzFormSplitDirective as ɵcg, NzFormTextDirective as ɵcf, NzFormComponent as ɵcb, NzColComponent as ɵcl, NzColDirective as ɵck, NzRowComponent as ɵcj, NzInputNumberComponent as ɵci, NzInputGroupComponent as ɵbq, NzInputComponent as ɵbp, NzInputDirectiveComponent as ɵbr, NzContentComponent as ɵev, NzFooterComponent as ɵew, NzHeaderComponent as ɵeu, NzLayoutComponent as ɵet, NzSiderComponent as ɵex, NzMenuDividerComponent as ɵeo, NzMenuGroupComponent as ɵep, NzMenuItemComponent as ɵem, NzMenuComponent as ɵds, NzSubMenuComponent as ɵen, NZ_MESSAGE_DEFAULT_CONFIG as ɵd, NZ_MESSAGE_DEFAULT_CONFIG_PROVIDER as ɵe, NzMessageConfig as ɵc, NzMessageContainerComponent as ɵcq, NzMessageComponent as ɵcr, NzMessageBaseService as ɵb, NzConfirmComponent as ɵct, NzModalComponent as ɵcs, NZ_NOTIFICATION_DEFAULT_CONFIG as ɵg, NZ_NOTIFICATION_DEFAULT_CONFIG_PROVIDER as ɵh, NzNotificationConfig as ɵf, NzNotificationContainerComponent as ɵcv, NzNotificationComponent as ɵcu, NzPaginationComponent as ɵcw, NzPopconfirmComponent as ɵcx, NzPopconfirmDirective as ɵda, NzPopoverComponent as ɵdb, NzPopoverDirective as ɵdc, NzProgressComponent as ɵdm, NzRadioButtonComponent as ɵbn, NzRadioGroupComponent as ɵbm, NzRadioComponent as ɵbl, NzRateComponent as ɵdd, createNzRootInitializer as ɵi, NzRootStyleComponent as ɵez, NzRootComponent as ɵey, NzOptionComponent as ɵbh, NzOptionPipe as ɵbg, NzSelectComponent as ɵbi, NzSliderHandleComponent as ɵdi, NzSliderMarksComponent as ɵdk, NzSliderStepComponent as ɵdj, NzSliderTrackComponent as ɵdh, NzSliderComponent as ɵdf, NzSliderService as ɵdg, NzSpinComponent as ɵde, NzStepConnectService as ɵek, NzStepComponent as ɵel, NzStepsComponent as ɵej, NzSwitchComponent as ɵdl, NzRowExpandIconComponent as ɵdo, NzRowIndentComponent as ɵdn, NzTableDividerDirective as ɵdz, NzTableFilterComponent as ɵdp, NzTableSortComponent as ɵea, NzTableComponent as ɵdt, NzTbodyTrDirective as ɵdy, NzTbodyDirective as ɵdx, NzTdDirective as ɵdv, NzThDirective as ɵdu, NzTheadDirective as ɵdw, NzTabBodyComponent as ɵeg, NzTabLabelDirective as ɵee, NzTabComponent as ɵeb, NzTabsInkBarDirective as ɵef, NzTabsNavComponent as ɵed, NzTabSetComponent as ɵec, NzCheckableTagComponent as ɵei, NzTagComponent as ɵeh, NzTimePickerInnerComponent as ɵbx, NzTimePickerComponent as ɵbw, NzTimelineItemComponent as ɵfg, NzTimelineComponent as ɵfh, NzToolTipComponent as ɵcy, NzTooltipDirective as ɵcz, NzDatePipe as ɵbv };
