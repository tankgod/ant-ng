import { ElementRef, ChangeDetectorRef, OnInit } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { NzTimePickerInnerComponent } from '../time-picker/nz-timepicker-inner.component';
import { ConnectionPositionPair } from '../core/overlay/index';
export declare class NzDatePickerComponent implements ControlValueAccessor, OnInit {
    private _elementRef;
    private _cdr;
    _el: HTMLElement;
    _open: boolean;
    _mode: string;
    _dropDownPosition: string;
    _triggerWidth: number;
    _value: any;
    _disabled: boolean;
    _today: Date;
    _selectedMonth: number;
    _selectedYear: number;
    _selectedDate: number;
    _showMonth: number;
    _showYear: number;
    _startDecade: number;
    _yearPanel: Array<Array<string>>;
    _positions: ConnectionPositionPair[];
    onChange: any;
    onTouched: any;
    nzDisabledDate: any;
    nzAllowClear: boolean;
    nzShowTime: any;
    nzPlaceHolder: string;
    nzFormat: string;
    nzSize: string;
    trigger: any;
    timePickerInner: NzTimePickerInnerComponent;
    _nzCalendarPicker: boolean;
    nzDisabled: boolean;
    _setTriggerWidth(): void;
    onPositionChange(position: any): void;
    nzValue: Date;
    _changeTime($event: any): void;
    _blurInput(box: any): void;
    _preYear(): void;
    _nextYear(): void;
    _preMonth(): void;
    _nextMonth(): void;
    _setShowYear(year: any, $event: any): void;
    _preDecade(): void;
    _nextDecade(): void;
    _clearValue(e: MouseEvent): void;
    _changeToToday(): void;
    _clickDay(day: any): void;
    _clickMonth(month: any): void;
    _openCalendar(): void;
    _closeCalendar(): void;
    _changeMonthView(): void;
    _changeDecadeView($event: any): void;
    _changeTimeView($event: any): void;
    _changeYearView($event: any): void;
    readonly _showClearIcon: boolean;
    _generateYearPanel(): void;
    constructor(_elementRef: ElementRef, _cdr: ChangeDetectorRef);
    ngOnInit(): void;
    writeValue(value: any): void;
    registerOnChange(fn: (_: any) => {}): void;
    registerOnTouched(fn: () => {}): void;
    setDisabledState(isDisabled: boolean): void;
    private _updateValue(value);
}
